{"pageProps":{"allPostsData":[{"id":"chrome_extentionmake","content":"\n## 今回やること\n\n今回はGoogle Chromeの拡張機能を作っていきます。\n\nまあ、作れるの?という感じの人もいると思いますが、\n\n- JavaScript(できた方が楽だけどできなくてもおｋ)\n  \n  - ウェブとかの記述をするプログラミング言語\n\n- 設定用のJSONファイル\n\n- HTML(メニューとかを表示したい場合)\n  \n  - ウェブサイトとかの土台\n\n- テキストエディタ(メモ帳でも可能)\n\nの4点があればとりあえず作れます。\n\n他にもメニューなどの見た目を変えたい場合はCSSもできたほうが良いです。\n\nこれで技術についての説明は終わったので拡張機能の種類についての説明に移ります\n\n拡張機能の種類は主にこの3つです。\n\n### Browser Actions\n\n右上についててよく見かけるやつです。\n\n有名なもので言うと殆どの拡張で見かけます。\n\n### Page Actions\n\nページによって表示されたり\n\nされなかったりするタイプの拡張機能です。\n\n### Override Pages\n\n新しいタブなどのページを置き換えたりできます。\n\n主に\n\n- 新しいタブ\n\n- ブックマーク\n\n- 履歴\n\nといったものを置き換えることができます。\n\nそれと、注意点ですが、一つの拡張機能で一つのページしか置き換えられません。\n\n私もこのように新しいタブを自作のものにしています。\n\n![]()\n\n### 今回作る拡張機能\n\n今回はコピークリップボードを拡張する拡張機能の『コピー+』を作っていきます。(クソダサネーミング)\n\n画像はこんな感じです。\n\n![]()\n\nまあ、とてもシンプルです。\n\n仕組みはこの様になっています。\n\n1. 普通のコピーをそのままコピーできます。\n\n2. コピーしたものを0.5秒刻みで取得\n   \n   - コピー履歴をJSから取得するのは無理みたい\n   \n   - そもそもできたとしてもOSごとに取得方法が異なる\n\n3. 結果が変わった場合のみリストに書き込む\n   \n   - 時刻を取得して古いものから順に消す\n\nそれと、メニューからコピーした文字を確認できます。\n\nといった感じで割と単純です。\n\nまあ、こんな感じで仕組みを解説したところで実際にコードを書いてきましょう。\n\n## 実践\n\n### 環境構築\n\nまずは任意のディレクトリ内にフォルダを作っていきましょう。\n\nなるべくわかりやすいところがおすすめです。\n\nフォルダを作ったらこの中に設定ファイルを書いていきます。\n\nまずは、テキストエディタで新しくファイルを作成\n\nそしたら『manifest.json』という名前で保存\n\nここに設定を記載していきます。\n","data":{"title":"Chrome拡張機能を作ろう!","date":"2022-05-15","update_data":"2022-05-15","janle":"programming","view_janle":"プログラミング","category":"js","view_category":"JS","detail":"TEST"},"isEmpty":false,"excerpt":""},{"id":"GAS_SlackMessage","content":"\n## 今回やること\n\n今回は、スプレッドシートに書いた直近の予定をSlackに定期投稿するプログラムをGASで作っていきます。\n\n具体的にはこんな感じです。(画質汚くてすみません。)\n\n![メッセージの画像](/storage/article/GAS_SlackMessage/Mihon.jpg)\n\n今回はこのように予定と時間それと、誰の予定かを記入します。\n\n## GASとは?\n\nGASとはGoogleが開発しているGoogleアプリ向けのプログラミング言語です。\n\n要は、VBAのGoogle版です。\n\n主に、Google Workspaceなどを使っている会社などで使われることが多いです。\n\nGASにはこのような特徴があります。\n\n- JavaScriptベースなので構文がJavaScriptとほぼ一緒\n  \n  - alert()などのブラウザ関数が使えない\n  \n  - 少し古いバージョンがベースになっている\n\n- クラウド上で動作する\n  \n  - Googleのサーバー上で動くのでPCを起動しておく必要がない\n\n- ウェブサイトが作れる\n  \n  - 主に社用ウェブサイトの作成に使える\n\n- Google製品との連携が楽(スプレッドシート、Gmail、AdSense、Youtube)\n\nこれを踏まえてメリットとデメリットを見てみます\n\n- メリット\n  \n  - クラウドで動作するからPCを起動する必要がない\n  \n  - すぐに動作する\n  \n  - Google製品との連携が楽\n    \n    - AdSenseやYoutubeアナリティクスとの連携は特筆できる点\n  \n  - JSユーザーにとってはとっつきやすい\n\n- デメリット\n  \n  - ファイルとしてのダウンロードができない\n  \n  - VBAとは書き方が違う\n  \n  - 無料版(Google Workspace未加入)では制限がある\n    \n    - また、Google Workspaceのプランによっても制限が変わります。\n\nこのように一長一短ありますが、AdSenseなどとの連携はOfficeユーザーの方にとってもとても魅力的ではないでしょうか?\n\nといったところで、そろそろ本題に入っていきます。\n\n## 本題\n\nということで、GASのプログラムを作っていきたいのですが、\n\nその前に予定を書き込むスプレッドシートのファイルを作っていきましょう。\n\n## 入力するスプレッドシートを作\n\nまずは、スプレッドシートの新規ファイルを作ってください。\n\nそしたら、E〜Zを消してください。\n\n![E〜Zの削除後画像](/storage/article/GAS_SlackMessage/FZ.jpg)\n\n次に上4つにこのように項目を入力して、わかりやすいように色を変えておきましょう。\n\n![イメージ](/storage/article/GAS_SlackMessage/ColorSheet.jpg)\n\n他にも、全体に線をつけたりしておきましょう。\n\n装飾したら、それぞれ日付と時間を上のような形で入力しましょう。\n\n名前と予定は適当に入力してください。\n\nデータが送信されるには次の条件が必要です。\n\n- 日付が現在日時と一致していること\n\n- 時刻が過ぎていないこと\n\n入力し終わったら、いよいよGASのエディタを起動していきましょう。\n\n起動するには『拡張機能』、『Apps Script』をクリック。\n\n![イメージ](/storage/article/GAS_SlackMessage/GAS_Boot.jpg)\n\nこれでGASを起動できました。\n\nそしたら、コードを書いていきましょう。\n\n## GASを書いてみよう\n\nまずは、ここに書いてあるのを全部消してください。\n\nそしたら、このように書いておきます。\n\n```js\nconst SLACK_BOT_TOKEN=\"***\"\n```\n\nこれは箱みたいなものです。\n\nこの中に文字や数字を入力していきます。\n\nまた、文字はダブルクォーテーションで囲みましょう。\n\nその他にも、constは後から入れ替えができません。\n\nこのように後から入れ替えができない値を定数といいます。\n\n覚えておきましょう。\n\nまた、ここの文字は後でAPIキーというものを取得します。\n\nAPIというのは他のサービス(SlackやAmazon、Youtubeなど...)と連携するものです。\n\nAPIキーというのはそれと連携するパスワードみたいなものです。\n\nここでAPIキーに関しての説明も終わったので、続きをやっていきます。\n\n今度は関数を作っていきます。\n\n関数とは、複数の処理をまとめたものです。\n\nGASではこの関数を実行してコードを動かします。\n\nまず、関数はこのように書いてください。\n\n```js\nfunction postSlackbot() {\n  // この中に処理を書いていきます\n}\n```\n\nこの中に、メッセージを送信する処理を入力していきます。\n\nまた、コメントアウト(//で始まるやつ)はただの説明なので不要です。\n\nこのように入力してください。\n\n```js\nfunction postSlackbot() {\n  // ↓変数はletで定義\n  let token = SLACK_BOT_TOKEN; // トークン\n  let slackApp = SlackApp.create(token); //Slackライブラリとの連携(これでメッセージを送信したりする)\n  let channelId = \"#送るチャンネル名\"; //送るチャンネル名\n  let message = getMessage(); //メッセージ生成関数\n  slackApp.postMessage(channelId, message);\n}\n```\n\nコメントアウト(//から始まるやつ)は不要です。\n\nまた、letで定義したものは変数といって\n\n基本は定数と同じなのですが、あとから入れ替えができます。\n\nただ、ここではあまり出番がなかったためここで出てきますが、\n\n今回はconstでもおｋです。\n\nまた、基本的にはconstで十分です。\n\nそしたら、getMessageという関数を作成。\n\n```js\nfunction getMessage() {\n\n}\n```\n\nこの中にシートから時間などの値を収集して\n\nメッセージを作ってその文字列を返す処理を作っていきます。\n\nこのようにしてください\n\n```js\nfunction getMessage() {\n  // ここで定数の定義をします\n\n  // ↓変数定義は『let』\n  // 殆どの場合const ↓Gアプリを指す ↓このファイルを指定      ↓シートを選択\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"入力シート\"); // シートファイルを取得\n  const range = sheet.getDataRange();\n\n  //                   ↓で2次元配列にする ↓で配列の指定した場所を切り落とす\n  const values = range.getValues().slice(1);\n  const date = new Date(); // newで配列や時間などを作成できる。\n  // Date()が日時を表している。(Arrayで配列になったりする)\n  // Date(ここに文字を入れると取得する日時が決められる )\n\n  //               ↓日付を文字にする      ↓データ ↓タイムゾーン ↓『西暦-月-日付』になる\n  const todayStr = Utilities.formatDate(date, 'JST', 'yyyy-MM-dd');\n  //               ↓時間を文字にする                 ↓『時間:分』になる\n  const totime = Utilities.formatDate(date, \"JST\", \"HH:mm\");\n}\n```\n\nコードについて解説しておきます。\n\n- sheetでシートのファイルを取得\n  \n  - 『SpreadsheetApp』がスプレッドシートから情報を取得することを意味している。\n  \n  - 『getActiveSpreadsheet()』が最初から入っている関数でスプレッドシートなどのアプリからGASを開いた場合にそのファイルを指定します。\n  \n  - 『getSheetByName(\"シート名\")』でシートを指定します。\n    \n    - シートが一枚しか無い場合は不要です。\n\n- range.Values().slice()\n  \n  - range=シートからすべてのセルを取得\n  \n  - getValues()で二次元配列(\n    \n    ```js\n    [\n      [\"A\"]\n      [\"B\"]\n      [\"C\"]\n      [\"D\"]\n    ]\n    ```\n    \n    このように書く)に変換\n    \n    ※二次元配列とはcsvみたいなデータです。\n  \n  - slice(1)で上の4項目を削除\n\n- 『new』演算子というのは様々な関数を使って実際の値を作れます。\n  \n  - Date()関数で時間を取得\n  \n  - ()内に何もなければ現在時刻を取得\n  \n  - 時刻を指定したい場合は\n  \n  ```js\n    Date(西暦, 月, 日付, 時刻, 分, 秒, コンマ秒);\n  ```\n  \n  と入力\n  \n  - 他にもArray()で配列([\"A\",\"B\",\"C\"])こういうやつを作れる。\n\n- todayStrで現在時刻から『西暦-月-日付』の形の文字に変換します。\n  \n  - Utilities.formatDate(date, \"タイムゾーン(日本の場合はJST)\", \"返される文字列\")\n    \n    - 文字列部分はyyyyで西暦、MMで月、日付 HHで時刻、mmで分を表す。\n\n説明は以上です。\n\nそしたら、上から順に日付が一致して、時間が過ぎていない場合のみメッセージを返したいので\n\nデータ選別処理の繰り返しなどを繰り返し実行させます。\n\n下記のように入力してください。\n\n```js\nfunction getMessage() {\n  // ここで定数の定義をします\n\n  // ↓変数定義は『let』\n  // 殆どの場合const ↓Gアプリを指す ↓このファイルを指定      ↓シートを選択\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"入力シート\"); // シートファイルを取得\n  const range = sheet.getDataRange();\n\n  //                   ↓で2次元配列にする ↓で配列の指定した場所を切り落とす\n  const values = range.getValues().slice(1);\n  const date = new Date(); // newで配列や時間などを作成できる。\n  // Date()が日時を表している。(Arrayで配列になったりする)\n  // Date(ここに文字を入れると取得する日時が決められる )\n\n  //               ↓日付を文字にする      ↓データ ↓タイムゾーン ↓『西暦-月-日付』になる\n  const todayStr = Utilities.formatDate(date, 'JST', 'yyyy-MM-dd');\n  //               ↓時間を文字にする                 ↓『時間:分』になる\n  const totime = Utilities.formatDate(date, \"JST\", \"HH:mm\");\n\n  // ここでループ\n\n  //   ↓変数.       ↓式  ↓配列の数   ↓式が達成されるまでi+1される\n  for (let i = 0; i < values.length; i++) { //生成されるメッセージの条件の定義\n\n    //               ↓日付を文字にする      ↓データ      ↓タイムゾーン ↓『西暦-月-日付』になる\n    const forvalD = Utilities.formatDate(values[i][0], \"JST\", \"yyyy-MM-dd\"); // シートから日時を抽出\n    //               ↓時間を文字にする                          ↓『時間:分』になる\n    const forvalT = Utilities.formatDate(values[i][1], \"JST\", \"HH:mm\"); // シートから時刻を抽出\n  }\n}\n```\n\nループする際にはfor文を使います。\n\nfor文は一定の条件を満たすまで処理を繰り返します。\n\n改めてfor文の書き方は次のとおりです。\n\n```js\nfor (let i = 比較したい値; i < 比較したい値; 足すか引くかの動作を入力(例 i+1, i-1)) {\n\n}\n```\n\n足す1などの場合はi++やi--でおｋです。\n\nまた、forの下の定数はそれぞれシートに入力したデータを文字列に変換します。\n\nそしたら、シートのデータ選別をしていきます。\n\nfor文の中に以下のように入力してください。\n\n```js\nif (forvalD == todayStr &&\n  // ↓数学の不等号と同じ意味\n    forvalT >= totime)\n    {\n\n  }\n```\n\n条件によって結果を変える場合は下のような形で入力します。\n\n```js\n//       ↓不等号と同じ意味\nif (Test >= Test2 && Test3 == Test4) {\n//                ↑『なおかつ』や『それと』などと言った意味がある\n}\n```\n\nif文を書いたら、このように記入\n\n```js\nif (forvalD == todayStr &&\n  // ↓数学の不等号と同じ意味\n    forvalT >= totime)\n    {\n\n    // ↓名前欄が空欄の場合\n    if (values[i][2] == \"\") {\n      name = \"???\"; // ???になる\n    } else { // else{}でそれ以外を表現\n      name = values[i][2]; // 普通に表示する\n    }\n\n    // 上と同じ\n    if (values[i][3] == \"\") {\n      theme = \"???\";\n    } else {\n      theme = values[i][3];\n    }\n    // ↓送信されるメッセージのテンプレにシートの値を埋め込んだやつ\n    const postInfo =\n      \":calendar: 直近の予定 :calendar:\\n\" +\n      \"予定 : \" + theme + \"\\n\" +\n      \"書いたやつ : \" + name + \"さん\\n\" +\n      \"時間 : \" + forvalT + \"\\n\" +\n      \"\\n\" +\n      \"早めに準備しましょう\\n\" +\n      \"予定一覧はここ→シートのリンク\";\n    return postInfo\n  }\n```\n\nifの中で更にifで名前と予定が空欄の場合に???と表示するようにしています。\n\nここに表示する文字は任意で大丈夫です。\n\nその他にも、\n\n```js\nelse {\n  処理\n}\n```\n\nでifの条件に合わなかった場合に別の結果を表示できます。\n\n更にその下に実際に送信されるメッセージが書かれています。\n\nまた、値同士を足したい場合は+でつなげてください。\n\n数字の場合は足し算、文字の場合は単純に文字が連結されます。\n\nこちらもそれぞれ、『theme、name、forvalT』が入っていれば大丈夫です。\n\nまた、:calender:は🗓の絵文字です。\n\n更に、その下に\n\n```js\nreturn postInfo\n```\n\nと入力してください。\n\nこれで値を返します。\n\n値を返すというのは、例えば、\n\n```js\nconsole.log(getMessage()) /// console.log()はコンソールに入力した値を表示する関数\n```\n\n結果:\n\n```\n:calendar: 直近の予定 :calendar:\n予定 : theme\n書いたやつ : nameさん\n時間 : \" + forvalT\n\n早めに準備しましょう\n予定一覧はここ→貼ったリンク\n```\n\nこういった感じで最終的に出た結果をさっきの文字とかみたいに使用することができます。\n\nこれでプログラムは完成したので、Slackの設定、さっき言ったAPIキーの取得と\n\nSlackと連携を取るためのライブラリを導入します。\n\nとは言ってもコードを書くことは無いのでそんな難しくありません。\n\n## Slackの設定とAPIキー取得、ライブラリ\n\n[こちら](https://qiita.com/da1002/items/d8381f2c915fa94bbc4e)の記事を御覧ください。(人任せ)\n\n上の記事を参考にしてAPIキーを取得したらここにコピペしてください。\n\n```js\nconst SLACK_BOT_TOKEN=\"APIキー\"\n```\n\nまた、ライブラリ導入も上の記事を御覧ください。\n\n## 一度実行してみよう\n\n1. GASのエディタの実行ボタンをクリックしてみましょう。\n   \n   - 一応ですが、この部分が『postSlackbot』になっているか確認しておきましょう。\n   \n   - ![](/storage/article/GAS_SlackMessage/GAS_Home.jpg)\n\n2. すると、『承認が必要です』と出てくるので、『権限を確認』をクリック\n   \n   - ![権限認証のイメージ](/storage/article/GAS_SlackMessage/KENGENSHO.jpg)\n\n3. 自分のアカウントを選択\n   \n   - ![](/storage/article/GAccountSecret.jpg)\n\n4. 『このアプリはGoogleで確認されていません』と表示されますが、『詳細を表示』をクリック\n   \n   - ![](/storage/article/GAS_SlackMessage/WarnPage.jpg)\n   \n   - この表示が出てくる理由はGoogleが未確認のコードのためちゃんと挙動を知った状態で動かしてください。という意味で表示されます。\n\n5. 『安全ではないプロジェクトに移動』をクリック\n\n6. 改めて説明が出てきます。\n\n7. 『許可』を選択\n\nそしたら、指定したSlackチャンネルにアクセスしてください。 \n\nこれで正常に表示できている場合はそのまま次の工程に進んでください。\n\n正常に送信できていない場合は以下の要な場合があります。\n\n- データが入力されていない\n\n- 日時が違う\n\n- 時間が過ぎている\n\n- コードのミスやAPIキーの貼り忘れ\n\n## 定期実行をしよう\n\nここで一定時間ごとにメッセージを送りたいので定期実行をする必要があります。\n\n まずは、左側のメニューからトリガーをクリック\n\n![](/storage/article/GAS_SlackMessage/Trigger.jpg)\n\nそしたら、右下の『トリガーを作成』をクリック\n\nそれぞれの設定をこのようにしておいてください。\n\n![](/storage/article/GAS_SlackMessage/TimeTrigger.jpg)\n\nまた、『時間ベースのトリガータイム』と『時間の間隔』は任意の時間にしておいてください。\n\n他にも、無料ユーザーの方は30分おきで動作を確認しておりますので30分以上にしておきましょう。\n\nこれで、『保存』をクリック\n\nこれで完成です!\n\n## 最後に\n\nいかがでしたか?(クソブログ感)\n\nこれ以外にもGoogleカレンダーとの連携や\n\nChatWorkと連携してみたりなど他にも色々なことができます。\n\nということで、また別の記事か動画でお会いしましょう!!\n\n## 参考にした記事\n\n[GAS×Slack×スプレッドシートを用いたLT管理Bot作成 - Qiita](https://qiita.com/da1002/items/d8381f2c915fa94bbc4e)\n\n参考にさせていただき、\n\n本当にありがとうございました。\n","data":{"title":"GASで予定を送信するBotを作ろう!","date":"2022-04-29","update_data":"2022-04-29","janle":"programming","view_janle":"プログラミング","category":"gas","view_category":"GAS","detail":"今回はGAS(Google Apps Script)を使ってSlackで予定をお知らせするボットを作っていきます。"},"isEmpty":false,"excerpt":""}]},"__N_SSG":true}