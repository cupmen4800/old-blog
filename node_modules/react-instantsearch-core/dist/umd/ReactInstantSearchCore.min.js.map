{"version":3,"file":"ReactInstantSearchCore.min.js","sources":["../../../../node_modules/@babel/runtime/helpers/esm/extends.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../../../../node_modules/@babel/runtime/helpers/esm/inherits.js","../../../../node_modules/@babel/runtime/helpers/esm/typeof.js","../../../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/react-fast-compare/index.js","../../src/core/utils.ts","../../src/core/context.ts","../../src/core/createConnector.tsx","../../src/core/highlight.js","../../src/core/version.js","../../src/core/indexUtils.js","../../src/connectors/connectConfigure.js","../../src/widgets/Configure.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../../node_modules/algoliasearch-helper/src/functions/merge.js","../../../../node_modules/algoliasearch-helper/src/functions/defaultsPure.js","../../../../node_modules/algoliasearch-helper/src/functions/intersection.js","../../../../node_modules/algoliasearch-helper/src/functions/find.js","../../../../node_modules/algoliasearch-helper/src/functions/valToNumber.js","../../../../node_modules/algoliasearch-helper/src/functions/omit.js","../../../../node_modules/algoliasearch-helper/src/functions/objectHasKeys.js","../../../../node_modules/algoliasearch-helper/src/utils/isValidUserToken.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/index.js","../../../../node_modules/algoliasearch-helper/src/functions/orderBy.js","../../../../node_modules/algoliasearch-helper/src/functions/compact.js","../../../../node_modules/algoliasearch-helper/src/functions/findIndex.js","../../../../node_modules/algoliasearch-helper/src/functions/formatSort.js","../../../../node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/index.js","../../../../node_modules/@algolia/events/events.js","../../../../node_modules/algoliasearch-helper/src/functions/inherits.js","../../../../node_modules/algoliasearch-helper/src/DerivedHelper/index.js","../../../../node_modules/algoliasearch-helper/src/requestBuilder.js","../../../../node_modules/algoliasearch-helper/src/version.js","../../../../node_modules/algoliasearch-helper/src/algoliasearch.helper.js","../../../../node_modules/algoliasearch-helper/index.js","../../src/connectors/connectConfigureRelatedItems.ts","../../../../node_modules/rollup-plugin-node-globals/src/global.js","../../../../node_modules/process-es6/browser.js","../../../../node_modules/react-is/cjs/react-is.production.min.js","../../../../node_modules/react-is/index.js","../../node_modules/prop-types/factoryWithThrowingShims.js","../../node_modules/prop-types/index.js","../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../src/widgets/ConfigureRelatedItems.tsx","../../src/connectors/connectDynamicWidgets.ts","../../src/widgets/DynamicWidgets.tsx","../../src/connectors/connectQueryRules.ts","../../src/widgets/QueryRuleContext.ts","../../src/widgets/Index.tsx","../../src/core/createInstantSearchManager.js","../../src/core/createWidgetsManager.ts","../../src/core/createStore.ts","../../src/core/metadata.ts","../../src/widgets/InstantSearch.tsx","../../src/connectors/connectAutoComplete.js","../../src/connectors/connectBreadcrumb.js","../../src/connectors/connectCurrentRefinements.js","../../src/connectors/connectGeoSearch.js","../../src/connectors/connectHierarchicalMenu.js","../../src/connectors/connectHighlight.js","../../src/connectors/connectHits.js","../../src/connectors/connectHitsPerPage.js","../../src/connectors/connectInfiniteHits.js","../../src/connectors/connectMenu.js","../../../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/connectors/connectNumericMenu.js","../../src/connectors/connectPagination.js","../../src/connectors/connectPoweredBy.js","../../src/connectors/connectRange.js","../../src/connectors/connectRefinementList.js","../../src/connectors/connectScrollTo.js","../../src/connectors/connectSearchBox.js","../../src/connectors/connectRelevantSort.ts","../../src/connectors/connectSortBy.js","../../src/connectors/connectStateResults.js","../../src/connectors/connectStats.ts","../../src/connectors/connectToggleRefinement.js","../../src/connectors/connectHitInsights.ts","../../src/connectors/connectVoiceSearch.js","../../src/index.ts","../../src/core/translatable.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function';\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      if (keys[i] === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","// From https://github.com/reactjs/react-redux/blob/master/src/utils/shallowEqual.js\nexport const shallowEqual = (objA, objB) => {\n  if (objA === objB) {\n    return true;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  const hasOwn = Object.prototype.hasOwnProperty;\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const getDisplayName = (Component) =>\n  Component.displayName || Component.name || 'UnknownComponent';\n\nconst resolved = Promise.resolve();\nexport const defer = (f) => {\n  resolved.then(f);\n};\n\nconst isPlainObject = (value: unknown): value is object =>\n  typeof value === 'object' && value !== null && !Array.isArray(value);\n\nexport const removeEmptyKey = (obj: object) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    if (!objectHasKeys(value)) {\n      delete obj[key];\n    } else {\n      removeEmptyKey(value);\n    }\n  });\n\n  return obj;\n};\n\nexport const removeEmptyArraysFromObject = (obj: object) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (Array.isArray(value) && value.length === 0) {\n      delete obj[key];\n    }\n  });\n\n  return obj;\n};\n\nexport function addAbsolutePositions(hits, hitsPerPage, page) {\n  return hits.map((hit, index) => ({\n    ...hit,\n    __position: hitsPerPage * page + index + 1,\n  }));\n}\n\nexport function addQueryID(hits, queryID) {\n  if (!queryID) {\n    return hits;\n  }\n  return hits.map((hit) => ({\n    ...hit,\n    __queryID: queryID,\n  }));\n}\n\nexport function find<TItem = any>(\n  array: TItem[],\n  comparator: (item: TItem) => boolean\n): TItem | undefined {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n  return undefined;\n}\n\nexport function objectHasKeys(object: object | undefined) {\n  return object && Object.keys(object).length > 0;\n}\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nexport function omit(source: { [key: string]: any }, excluded: string[]) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n  const target = {};\n  const sourceKeys = Object.keys(source);\n  for (let i = 0; i < sourceKeys.length; i++) {\n    const key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * Retrieve the value at a path of the object:\n *\n * @example\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   'test.this.function[0].now.everyone'\n * ); // true\n *\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   ['test', 'this', 'function', 0, 'now', 'everyone']\n * ); // true\n *\n * @param object Source object to query\n * @param path either an array of properties, or a string form of the properties, separated by .\n */\nexport const getPropertyByPath = (object: object, path: string[] | string) =>\n  (Array.isArray(path)\n    ? path\n    : path.replace(/\\[(\\d+)]/g, '.$1').split('.')\n  ).reduce((current, key) => (current ? current[key] : undefined), object);\n\nexport function getObjectType(object: unknown): string {\n  return Object.prototype.toString.call(object).slice(8, -1);\n}\n\nexport function unescapeFacetValue(value: string): string {\n  return value.replace(/^\\\\-/, '-');\n}\n","import { createContext } from 'react';\nimport type { Store } from '../core/createStore';\nimport type InstantSearch from '../widgets/InstantSearch';\n\nexport type InstantSearchContext = {\n  onInternalStateUpdate: InstantSearch['onWidgetsInternalStateUpdate'];\n  createHrefForState: InstantSearch['createHrefForState'];\n  onSearchForFacetValues: InstantSearch['onSearchForFacetValues'];\n  onSearchStateChange: InstantSearch['onSearchStateChange'];\n  onSearchParameters: InstantSearch['onSearchParameters'];\n  store: Store;\n  widgetsManager: any;\n  mainTargetedIndex: string;\n};\n\nexport const instantSearchContext = createContext<InstantSearchContext>({\n  onInternalStateUpdate: () => undefined,\n  createHrefForState: () => '#',\n  onSearchForFacetValues: () => undefined,\n  onSearchStateChange: () => undefined,\n  onSearchParameters: () => undefined,\n  store: {} as Store,\n  widgetsManager: {},\n  mainTargetedIndex: '',\n});\n\nexport const {\n  Consumer: InstantSearchConsumer,\n  Provider: InstantSearchProvider,\n} = instantSearchContext;\n\nexport type IndexContext =\n  | {\n      targetedIndex: string;\n    }\n  | undefined;\n\nexport const { Consumer: IndexConsumer, Provider: IndexProvider } =\n  createContext<IndexContext>(undefined);\n","import type { ElementType } from 'react';\nimport React, { Component } from 'react';\nimport isEqual from 'react-fast-compare';\nimport { shallowEqual, getDisplayName, removeEmptyKey } from './utils';\nimport type { InstantSearchContext, IndexContext } from './context';\nimport { InstantSearchConsumer, IndexConsumer } from './context';\n\nexport type ConnectorDescription = {\n  displayName: string;\n  $$type: string;\n  /**\n   * a function to filter the local state\n   */\n  refine?: (...args: any[]) => any;\n  /**\n   * function transforming the local state to a SearchParameters\n   */\n  getSearchParameters?: (...args: any[]) => any;\n  /**\n   * metadata of the widget (for current refinements)\n   */\n  getMetadata?: (...args: any[]) => any;\n  /**\n   * hook after the state has changed\n   */\n  transitionState?: (...args: any[]) => any;\n  /**\n   * transform the state into props passed to the wrapped component.\n   * Receives (props, widgetStates, searchState, metadata) and returns the local state.\n   */\n  getProvidedProps: (...args: any[]) => any;\n  /**\n   * Receives props and return the id that will be used to identify the widget\n   */\n  getId?: (...args: any[]) => string;\n  /**\n   * hook when the widget will unmount. Receives (props, searchState) and return a cleaned state.\n   */\n  cleanUp?: (...args: any[]) => any;\n  searchForFacetValues?: (...args: any[]) => any;\n  shouldComponentUpdate?: (...args: any[]) => boolean;\n  /**\n   * PropTypes forwarded to the wrapped component.\n   */\n  propTypes?: {}; // I can't find a definition for a propTypes object\n  defaultProps?: {};\n};\n\nexport type AdditionalWidgetProperties = {\n  $$widgetType?: string;\n};\n\ntype ConnectorProps = {\n  contextValue: InstantSearchContext;\n  indexContextValue?: IndexContext;\n};\n\nexport type ConnectedProps<TWidgetProps> = TWidgetProps & ConnectorProps;\n\ntype ConnectorState = {\n  providedProps: {};\n};\n\n/**\n * Connectors are the HOC used to transform React components\n * into InstantSearch widgets.\n * In order to simplify the construction of such connectors\n * `createConnector` takes a description and transform it into\n * a connector.\n * @param {ConnectorDescription} connectorDesc the description of the connector\n * @return {Connector} a function that wraps a component into\n * an instantsearch connected one.\n */\nexport function createConnectorWithoutContext(\n  connectorDesc: ConnectorDescription\n) {\n  if (!connectorDesc.displayName) {\n    throw new Error(\n      '`createConnector` requires you to provide a `displayName` property.'\n    );\n  }\n\n  const isWidget =\n    typeof connectorDesc.getSearchParameters === 'function' ||\n    typeof connectorDesc.getMetadata === 'function' ||\n    typeof connectorDesc.transitionState === 'function';\n\n  return (\n    Composed: ElementType,\n    additionalWidgetProperties: AdditionalWidgetProperties = {}\n  ) => {\n    class Connector extends Component<ConnectorProps, ConnectorState> {\n      static displayName = `${connectorDesc.displayName}(${getDisplayName(\n        Composed\n      )})`;\n      static $$type = connectorDesc.$$type;\n      static $$widgetType = additionalWidgetProperties.$$widgetType;\n      static propTypes = connectorDesc.propTypes;\n      static defaultProps = connectorDesc.defaultProps;\n      static _connectorDesc = connectorDesc;\n\n      unsubscribe?: () => void;\n      unregisterWidget?: () => void;\n\n      isUnmounting = false;\n\n      state: ConnectorState = {\n        providedProps: this.getProvidedProps(this.props),\n      };\n\n      constructor(props: ConnectorProps) {\n        super(props);\n\n        if (connectorDesc.getSearchParameters) {\n          this.props.contextValue.onSearchParameters(\n            connectorDesc.getSearchParameters.bind(this),\n            {\n              ais: this.props.contextValue,\n              multiIndexContext: this.props.indexContextValue,\n            },\n            this.props,\n            connectorDesc.getMetadata && connectorDesc.getMetadata.bind(this),\n            connectorDesc.displayName\n          );\n        }\n      }\n\n      componentDidMount() {\n        this.unsubscribe = this.props.contextValue.store.subscribe(() => {\n          if (!this.isUnmounting) {\n            this.setState({\n              providedProps: this.getProvidedProps(this.props),\n            });\n          }\n        });\n\n        if (isWidget) {\n          this.unregisterWidget =\n            this.props.contextValue.widgetsManager.registerWidget(this);\n        }\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        if (typeof connectorDesc.shouldComponentUpdate === 'function') {\n          return connectorDesc.shouldComponentUpdate.call(\n            this,\n            this.props,\n            nextProps,\n            this.state,\n            nextState\n          );\n        }\n\n        const propsEqual = shallowEqual(this.props, nextProps);\n\n        if (\n          this.state.providedProps === null ||\n          nextState.providedProps === null\n        ) {\n          if (this.state.providedProps === nextState.providedProps) {\n            return !propsEqual;\n          }\n          return true;\n        }\n\n        return (\n          !propsEqual ||\n          !shallowEqual(this.state.providedProps, nextState.providedProps)\n        );\n      }\n\n      componentDidUpdate(prevProps) {\n        if (!isEqual(prevProps, this.props)) {\n          this.setState({\n            providedProps: this.getProvidedProps(this.props),\n          });\n\n          if (isWidget) {\n            this.props.contextValue.widgetsManager.update();\n\n            if (typeof connectorDesc.transitionState === 'function') {\n              this.props.contextValue.onSearchStateChange(\n                connectorDesc.transitionState.call(\n                  this,\n                  this.props,\n                  this.props.contextValue.store.getState().widgets,\n                  this.props.contextValue.store.getState().widgets\n                )\n              );\n            }\n          }\n        }\n      }\n\n      componentWillUnmount() {\n        this.isUnmounting = true;\n\n        if (this.unsubscribe) {\n          this.unsubscribe();\n        }\n\n        if (this.unregisterWidget) {\n          this.unregisterWidget();\n\n          if (typeof connectorDesc.cleanUp === 'function') {\n            const nextState = connectorDesc.cleanUp.call(\n              this,\n              this.props,\n              this.props.contextValue.store.getState().widgets\n            );\n\n            this.props.contextValue.store.setState({\n              ...this.props.contextValue.store.getState(),\n              widgets: nextState,\n            });\n\n            this.props.contextValue.onSearchStateChange(\n              removeEmptyKey(nextState)\n            );\n          }\n        }\n      }\n\n      getProvidedProps(props) {\n        const {\n          widgets,\n          results,\n          resultsFacetValues,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          metadata,\n          error,\n        } = this.props.contextValue.store.getState();\n\n        const searchResults = {\n          results,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          error,\n        };\n\n        return connectorDesc.getProvidedProps.call(\n          this,\n          props,\n          widgets,\n          searchResults,\n          metadata,\n          // @MAJOR: move this attribute on the `searchResults` it doesn't\n          // makes sense to have it into a separate argument. The search\n          // flags are on the object why not the results?\n          resultsFacetValues\n        );\n      }\n\n      getSearchParameters(searchParameters) {\n        if (typeof connectorDesc.getSearchParameters === 'function') {\n          return connectorDesc.getSearchParameters.call(\n            this,\n            searchParameters,\n            this.props,\n            this.props.contextValue.store.getState().widgets\n          );\n        }\n\n        return null;\n      }\n\n      getMetadata(nextWidgetsState) {\n        if (typeof connectorDesc.getMetadata === 'function') {\n          return connectorDesc.getMetadata.call(\n            this,\n            this.props,\n            nextWidgetsState\n          );\n        }\n\n        return {};\n      }\n\n      transitionState(prevWidgetsState, nextWidgetsState) {\n        if (typeof connectorDesc.transitionState === 'function') {\n          return connectorDesc.transitionState.call(\n            this,\n            this.props,\n            prevWidgetsState,\n            nextWidgetsState\n          );\n        }\n\n        return nextWidgetsState;\n      }\n\n      refine = (...args) => {\n        this.props.contextValue.onInternalStateUpdate(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      createURL = (...args) =>\n        this.props.contextValue.createHrefForState(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n\n      searchForFacetValues = (...args) => {\n        this.props.contextValue.onSearchForFacetValues(\n          // searchForFacetValues will always be defined here because the prop is only given conditionally\n          connectorDesc.searchForFacetValues!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      render() {\n        const { contextValue, ...props } = this.props;\n        const { providedProps } = this.state;\n\n        if (providedProps === null) {\n          return null;\n        }\n\n        const refineProps =\n          typeof connectorDesc.refine === 'function'\n            ? { refine: this.refine, createURL: this.createURL }\n            : {};\n\n        const searchForFacetValuesProps =\n          typeof connectorDesc.searchForFacetValues === 'function'\n            ? { searchForItems: this.searchForFacetValues }\n            : {};\n\n        return (\n          <Composed\n            {...props}\n            {...providedProps}\n            {...refineProps}\n            {...searchForFacetValuesProps}\n          />\n        );\n      }\n    }\n\n    return Connector;\n  };\n}\n\nconst createConnectorWithContext =\n  (connectorDesc: ConnectorDescription) =>\n  (\n    Composed: ElementType,\n    additionalWidgetProperties?: AdditionalWidgetProperties\n  ) => {\n    const Connector = createConnectorWithoutContext(connectorDesc)(\n      Composed,\n      additionalWidgetProperties\n    );\n\n    const ConnectorWrapper: React.FC<any> = (props) => (\n      <InstantSearchConsumer>\n        {(contextValue) => (\n          <IndexConsumer>\n            {(indexContextValue) => (\n              <Connector\n                contextValue={contextValue}\n                indexContextValue={indexContextValue}\n                {...props}\n              />\n            )}\n          </IndexConsumer>\n        )}\n      </InstantSearchConsumer>\n    );\n\n    return ConnectorWrapper;\n  };\n\nexport default createConnectorWithContext;\n","import { getPropertyByPath } from './utils';\n\nexport const HIGHLIGHT_TAGS = {\n  highlightPreTag: `<ais-highlight-0000000000>`,\n  highlightPostTag: `</ais-highlight-0000000000>`,\n};\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseHighlightedAttribute({ preTag, postTag, highlightedValue = '' }) {\n  const splitByPreTag = highlightedValue.split(preTag);\n  const firstValue = splitByPreTag.shift();\n  const elements =\n    firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    let isHighlighted = true;\n    splitByPreTag.forEach((split) => {\n      elements.push({ value: split, isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach((split) => {\n      const splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true,\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false,\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nexport function parseAlgoliaHit({\n  preTag = '<em>',\n  postTag = '</em>',\n  highlightProperty,\n  attribute,\n  hit,\n}) {\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  const highlightObject =\n    getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map((item) =>\n      parseHighlightedAttribute({\n        preTag,\n        postTag,\n        highlightedValue: item.value,\n      })\n    );\n  }\n\n  return parseHighlightedAttribute({\n    preTag,\n    postTag,\n    highlightedValue: highlightObject.value,\n  });\n}\n","export default '6.30.0';\n","import { omit } from './utils';\n\nexport function getIndexId(context) {\n  return hasMultipleIndices(context)\n    ? context.multiIndexContext.targetedIndex\n    : context.ais.mainTargetedIndex;\n}\n\n/**\n * @returns {import('algoliasearch-helper').SearchResults} results\n */\nexport function getResults(searchResults, context) {\n  if (searchResults.results) {\n    if (searchResults.results.hits) {\n      return searchResults.results;\n    }\n\n    const indexId = getIndexId(context);\n    if (searchResults.results[indexId]) {\n      return searchResults.results[indexId];\n    }\n  }\n\n  return null;\n}\n\nexport function hasMultipleIndices(context) {\n  return context && context.multiIndexContext;\n}\n\nexport function refineValue(\n  searchState,\n  nextRefinement,\n  context,\n  resetPage,\n  namespace\n) {\n  if (hasMultipleIndices(context)) {\n    const indexId = getIndexId(context);\n    return namespace\n      ? refineMultiIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          indexId,\n          resetPage,\n          namespace\n        )\n      : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);\n  } else {\n    // When we have a multi index page with shared widgets we should also\n    // reset their page to 1 if the resetPage is provided. Otherwise the\n    // indices will always be reset\n    // see: https://github.com/algolia/react-instantsearch/issues/310\n    // see: https://github.com/algolia/react-instantsearch/issues/637\n    if (searchState.indices && resetPage) {\n      Object.keys(searchState.indices).forEach((targetedIndex) => {\n        searchState = refineValue(\n          searchState,\n          { page: 1 },\n          { multiIndexContext: { targetedIndex } },\n          true,\n          namespace\n        );\n      });\n    }\n    return namespace\n      ? refineSingleIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          resetPage,\n          namespace\n        )\n      : refineSingleIndex(searchState, nextRefinement, resetPage);\n  }\n}\n\nfunction refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            ...nextRefinement,\n            ...page,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            ...nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndex(searchState, nextRefinement, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return { ...searchState, ...nextRefinement, ...page };\n}\n\nfunction refineMultiIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  indexId,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            [namespace]: {\n              ...searchState.indices[indexId][namespace],\n              ...nextRefinement,\n            },\n            page: 1,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            [namespace]: nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return {\n    ...searchState,\n    [namespace]: { ...searchState[namespace], ...nextRefinement },\n    ...page,\n  };\n}\n\nfunction getNamespaceAndAttributeName(id) {\n  const parts = id.match(/^([^.]*)\\.(.*)/);\n  const namespace = parts && parts[1];\n  const attributeName = parts && parts[2];\n\n  return { namespace, attributeName };\n}\n\nfunction hasRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      searchState.indices[indexId][namespace] &&\n      Object.hasOwnProperty.call(\n        searchState.indices[indexId][namespace],\n        attributeName\n      )\n    );\n  }\n\n  if (multiIndex) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      Object.hasOwnProperty.call(searchState.indices[indexId], id)\n    );\n  }\n\n  if (namespace) {\n    return (\n      searchState[namespace] &&\n      Object.hasOwnProperty.call(searchState[namespace], attributeName)\n    );\n  }\n\n  return Object.hasOwnProperty.call(searchState, id);\n}\n\nfunction getRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return searchState.indices[indexId][namespace][attributeName];\n  }\n  if (multiIndex) {\n    return searchState.indices[indexId][id];\n  }\n  if (namespace) {\n    return searchState[namespace][attributeName];\n  }\n\n  return searchState[id];\n}\n\nexport function getCurrentRefinementValue(\n  props,\n  searchState,\n  context,\n  id,\n  defaultValue\n) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n  const multiIndex = hasMultipleIndices(context);\n  const args = {\n    multiIndex,\n    indexId,\n    namespace,\n    attributeName,\n    id,\n    searchState,\n  };\n  const hasRefinementsValue = hasRefinements(args);\n\n  if (hasRefinementsValue) {\n    return getRefinements(args);\n  }\n\n  if (props.defaultRefinement) {\n    return props.defaultRefinement;\n  }\n\n  return defaultValue;\n}\n\nexport function cleanUpValue(searchState, context, id) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n\n  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {\n    return cleanUpValueWithMultiIndex({\n      attribute: attributeName,\n      searchState,\n      indexId,\n      id,\n      namespace,\n    });\n  }\n\n  return cleanUpValueWithSingleIndex({\n    attribute: attributeName,\n    searchState,\n    id,\n    namespace,\n  });\n}\n\nfunction cleanUpValueWithSingleIndex({\n  searchState,\n  id,\n  namespace,\n  attribute,\n}) {\n  if (namespace) {\n    return {\n      ...searchState,\n      [namespace]: omit(searchState[namespace], [attribute]),\n    };\n  }\n\n  return omit(searchState, [id]);\n}\n\nfunction cleanUpValueWithMultiIndex({\n  searchState,\n  indexId,\n  id,\n  namespace,\n  attribute,\n}) {\n  const indexSearchState = searchState.indices[indexId];\n\n  if (namespace && indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: {\n          ...indexSearchState,\n          [namespace]: omit(indexSearchState[namespace], [attribute]),\n        },\n      },\n    };\n  }\n\n  if (indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: omit(indexSearchState, [id]),\n      },\n    };\n  }\n\n  return searchState;\n}\n","import { omit } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'configure';\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigure',\n  $$type: 'ais.configure',\n  getProvidedProps() {\n    return {};\n  },\n  getSearchParameters(searchParameters, props) {\n    const { children, contextValue, indexContextValue, ...items } = props;\n    return searchParameters.setQueryParameters(items);\n  },\n  transitionState(props, prevSearchState, nextSearchState) {\n    const id = getId();\n    const { children, contextValue, indexContextValue, ...items } = props;\n    const propKeys = Object.keys(props);\n    const nonPresentKeys = this._props\n      ? Object.keys(this._props).filter((prop) => propKeys.indexOf(prop) === -1)\n      : [];\n    this._props = props;\n    const nextValue = {\n      [id]: { ...omit(nextSearchState[id], nonPresentKeys), ...items },\n    };\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n  cleanUp(props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = configureKeys.reduce((acc, item) => {\n      if (!props[item]) {\n        acc[item] = subState[id][item];\n      }\n      return acc;\n    }, {});\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import connectConfigure from '../connectors/connectConfigure';\n\n/**\n * Configure is a widget that lets you provide raw search parameters\n * to the Algolia API.\n *\n * Any of the props added to this widget will be forwarded to Algolia. For more information\n * on the different parameters that can be set, have a look at the\n * [reference](https://www.algolia.com/doc/api-client/javascript/search#search-parameters).\n *\n * This widget can be used either with react-dom and react-native. It will not render anything\n * on screen, only configure some parameters.\n *\n * Read more in the [Search parameters](guide/Search_parameters.html) guide.\n * @name Configure\n * @kind widget\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Configure, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\n\nexport default connectConfigure(\n  function Configure() {\n    return null;\n  },\n  { $$widgetType: 'ais.configure' }\n);\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__'\n    ) {\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\n\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n","'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function(acc, source) {\n    Object.keys(Object(source)).forEach(function(key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n","'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function(value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n","'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n};\n","'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error('The value should be a number, a parsable string or an array of those.');\n}\n\nmodule.exports = valToNumber;\n","'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n","'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n","'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n","'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function(el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function(currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  var self = this;\n  Object.keys(params).forEach(function(paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function(partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity'\n  ];\n\n  numberKeys.forEach(function(k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function(value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function(v) {\n          if (Array.isArray(v)) {\n            return v.map(function(vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function(facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function(currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n      'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n      'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n      ' is probably an error, if this is really what you want, you have to first' +\n      ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      )\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function(attribute, operator, v) {\n    var value = valToNumber(v);\n\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function(facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function(facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function(attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function(value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function(facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function(attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n\n        operators = operators || {};\n        Object.keys(operators).forEach(function(operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function(value) {\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n\n        memo[key] = operatorList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function(t) {\n        return t !== tag;\n      })\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet +\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 && (\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0] === value ||\n      // remove a parent refinement of the current refinement:\n      //  - refinement was 'beer > IPA > Flying dog'\n      //  - call is toggleRefine('beer > IPA')\n      //  - refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0\n    );\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function(facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function(facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function(facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function(facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function(facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function(facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function(facet) { return facet.name; }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    );\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function() {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function(f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements'\n  ],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    var self = this;\n    Object.keys(this).forEach(function(paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(\n      function(previous, key) {\n        var isPreviousValueDefined = previous[key] !== undefined;\n        var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n        if (isPreviousValueDefined && !isNextValueDefined) {\n          return omit(previous, [key]);\n        }\n\n        if (isNextValueDefined) {\n          previous[key] = nextWithNumbers[key];\n        }\n\n        return previous;\n      },\n      previousPlainObject\n    );\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function() {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function(hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function(hierarchicalFacetName) {\n    return find(\n      this.hierarchicalFacets,\n      function(f) {\n        return f.name === hierarchicalFacetName;\n      }\n    );\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function(facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function(part) {\n      return part.trim();\n    });\n  },\n\n  toString: function() {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n","'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function(value, index) {\n    return {\n      criteria: iteratees.map(function(iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function(res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n","'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n","'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n","'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function(sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(defaultInstructions, function(\n        defaultInstruction\n      ) {\n        return defaultInstruction[0] === sortInstruction[0];\n      });\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n","'use strict';\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns any\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns any\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue\n};\n","'use strict';\n\nmodule.exports = generateTrees;\n\nvar orderBy = require('../functions/orderBy');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\nvar fv = require('../functions/escapeFacetValue');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator = state._getHierarchicalFacetSeparator(\n      hierarchicalFacet\n    );\n    var hierarchicalRootPath = state._getHierarchicalRootPath(\n      hierarchicalFacet\n    );\n    var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(\n      hierarchicalFacet\n    );\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function(subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function(facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function(tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function(tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null\n  };\n}\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar orderBy = require('../functions/orderBy');\nvar compact = require('../functions/compact');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar fv = require('../functions/escapeFacetValue');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * @param {string[]} attributes\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function(val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets\n * @param {string} hierarchicalAttributeName\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(hierarchicalFacets, function facetKeyMatchesAttribute(\n    hierarchicalFacet\n  ) {\n    var facetNames = hierarchicalFacet.attributes || [];\n    return facetNames.indexOf(hierarchicalAttributeName) > -1;\n  });\n}\n\n/*eslint-disable */\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\n/*eslint-enable */\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0];\n\n  this._rawResults = results;\n\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function(key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  Object.keys(options || {}).forEach(function(key) {\n    self[key] = options[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   *  - `value` : the value of the facet highlighted (html)\n   *  - `matchLevel`: full, partial or none depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @member {number}\n   */\n  this.processingTimeMS = results.reduce(function(sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n    return [];\n  });\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function(facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function(disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge(\n          {},\n          self.hierarchicalFacets[position][attributeIndex].data,\n          facetResults\n        );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (!self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function(result) {\n      var facets = result && result.facets\n        ? result.facets\n        : {};\n\n      Object.keys(facets).forEach(function(dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        var defaultData = {};\n\n        if (currentRefinement.length > 0) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function(facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainSubResponse.facets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount\n    };\n    excludes.forEach(function(facetValue) {\n      self.facets[position] = self.facets[position] || {name: facetName};\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function(name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate);\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    return find(results.hierarchicalFacets, predicate);\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function(childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({data: sortedChildren}, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array}\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n\n  var order = facetOrdering.order || [];\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function(acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function(item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    if (reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function(facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [['path', 'name'], ['asc', 'asc']];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering=}\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function(attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy)\n  });\n\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(function(data, facetName) {\n    if (options.facetOrdering) {\n      var facetOrdering = getFacetOrdering(results, facetName);\n      if (Boolean(facetOrdering)) {\n        return sortViaFacetOrdering(data, facetOrdering);\n      }\n    }\n\n    if (Array.isArray(options.sortBy)) {\n      var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n      return orderBy(data, order[0], order[1]);\n    } else if (typeof options.sortBy === 'function') {\n      return vanillaSortFn(options.sortBy, data);\n    }\n    throw new Error(\n      'options.sortBy is optional but if defined it must be ' +\n        'either an array of string (predicates) or a sorting function'\n    );\n  }, facetValues, attributes);\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function(attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function(facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function() {\n  var state = this._state;\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n    state.facetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n    state.facetsExcludes[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'exclude', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'disjunctive', attributeName, name, results.disjunctiveFacets));\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n    });\n  });\n\n\n  Object.keys(state.numericRefinements).forEach(function(attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function(operator) {\n      operators[operator].forEach(function(value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function(name) {\n    res.push({type: 'tag', attributeName: '_tags', name: name});\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {*} state\n * @param {*} type\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function(f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\n/**\n * @param {*} state\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function(facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function(intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet && find(intermediateFacet.data, function(f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\nmodule.exports = SearchResults;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nmodule.exports = inherits;\n","'use strict';\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n */\nfunction DerivedHelper(mainHelper, fn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.lastResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function() {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function(parameters) {\n  return this.fn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n","'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort(function(a, b) {\n      return a.localeCompare(b);\n    })\n    .reduce(function(acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(\n          function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value: level === 0\n                ? segment\n                : [map[map.length - 1].value, segment].join(separator)\n            });\n          }\n        , []);\n\n        filtersMap.forEach(function(filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          var parent = filtersMap[level - 1];\n          params.facetFilters = level > 0 ? [parent.attribute + ':' + parent.value] : undefined;\n\n          queries.push({indexName: index, params: params});\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    ));\n  }\n};\n\nmodule.exports = requestBuilder;\n","'use strict';\n\nmodule.exports = '3.10.0';\n","'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search({onlyWithDerivedHelpers: false});\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n  this._search({onlyWithDerivedHelpers: true});\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n /**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n */\nAlgoliaSearchHelper.prototype.findAnswers = function(options) {\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n      ])\n    }\n  );\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      {indexName: state.index, params: algoliaQuery}\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery\n        }\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits.forEach(function(f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive\n        ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n        : state.isFacetRefined(facet, f.escapedValue);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    disjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function(operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function(options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n","'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\n\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @return {AlgoliaSearchHelper}\n */\nfunction algoliasearchHelper(client, index, opts) {\n  return new AlgoliaSearchHelper(client, index, opts);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version.js');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\nmodule.exports = algoliasearchHelper;\n","import type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  omit,\n  getObjectType,\n  getPropertyByPath,\n  removeEmptyKey,\n  removeEmptyArraysFromObject,\n} from '../core/utils';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n} from '../core/indexUtils';\n\ntype Hit = any;\n\nexport type MatchingPatterns = {\n  [attribute: string]: {\n    /**\n     * The score of the optional filter.\n     *\n     * @see https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/in-depth/optional-filters/\n     */\n    score: number;\n  };\n};\n\ninterface ConfigureRelatedItemsProps {\n  /**\n   * The reference hit to extract the filters from.\n   */\n  hit: Hit;\n  /**\n   * The schema to create the optional filters.\n   * Each key represents an attribute from the hit.\n   */\n  matchingPatterns: MatchingPatterns;\n  /**\n   * Function to transform the generated search parameters.\n   */\n  transformSearchParameters?(\n    searchParameters: SearchParameters\n  ): PlainSearchParameters;\n}\n\nfunction createOptionalFilter({\n  attributeName,\n  attributeValue,\n  attributeScore,\n}) {\n  return `${attributeName}:${attributeValue}<score=${attributeScore || 1}>`;\n}\n\nconst defaultProps: Partial<ConfigureRelatedItemsProps> = {\n  transformSearchParameters: (x) => ({ ...x }),\n};\n\nfunction getId(): string {\n  // We store the search state of this widget in `configure`.\n  return 'configure';\n}\n\ntype InternalConfigureRelatedItemsProps = ConfigureRelatedItemsProps &\n  Required<typeof defaultProps>;\n\nfunction getSearchParametersFromProps(\n  props: ConnectedProps<InternalConfigureRelatedItemsProps>\n): PlainSearchParameters {\n  const optionalFilters = Object.keys(props.matchingPatterns).reduce<\n    Array<string | string[]>\n  >((acc, attributeName) => {\n    const attributePattern = props.matchingPatterns[attributeName];\n    const attributeValue = getPropertyByPath(props.hit, attributeName);\n    const attributeScore = attributePattern.score;\n\n    if (Array.isArray(attributeValue)) {\n      return [\n        ...acc,\n        attributeValue.map((attributeSubValue) => {\n          return createOptionalFilter({\n            attributeName,\n            attributeValue: attributeSubValue,\n            attributeScore,\n          });\n        }),\n      ];\n    }\n\n    if (typeof attributeValue === 'string') {\n      return [\n        ...acc,\n        createOptionalFilter({\n          attributeName,\n          attributeValue,\n          attributeScore,\n        }),\n      ];\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The \\`matchingPatterns\\` option returned a value of type ${getObjectType(\n          attributeValue\n        )} for the \"${attributeName}\" key. This value was not sent to Algolia because \\`optionalFilters\\` only supports strings and array of strings.\n\nYou can remove the \"${attributeName}\" key from the \\`matchingPatterns\\` option.\n\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/`\n      );\n    }\n\n    return acc;\n  }, []);\n\n  return props.transformSearchParameters(\n    new algoliasearchHelper.SearchParameters({\n      // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type\n      // `sumOrFiltersScores`.\n      // See https://github.com/algolia/algoliasearch-helper-js/pull/753\n      sumOrFiltersScores: true,\n      facetFilters: [`objectID:-${props.hit.objectID}`],\n      optionalFilters,\n    })\n  );\n}\n\ninterface ConnectorState {\n  _searchParameters: PlainSearchParameters;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigureRelatedItems',\n  $$type: 'ais.configureRelatedItems',\n\n  defaultProps,\n\n  getProvidedProps() {\n    return {};\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<InternalConfigureRelatedItemsProps>\n  ) {\n    return searchParameters.setQueryParameters(\n      getSearchParametersFromProps(props)\n    );\n  },\n\n  transitionState(\n    this: ConnectorState,\n    props,\n    _prevSearchState,\n    nextSearchState\n  ) {\n    const id = getId();\n    // We need to transform the exhaustive search parameters back to clean\n    // search parameters without the empty default keys so we don't pollute the\n    // `configure` search state.\n    const searchParameters = removeEmptyArraysFromObject(\n      removeEmptyKey(getSearchParametersFromProps(props))\n    );\n\n    const searchParametersKeys = Object.keys(searchParameters);\n    const nonPresentKeys = this._searchParameters\n      ? Object.keys(this._searchParameters).filter(\n          (prop) => searchParametersKeys.indexOf(prop) === -1\n        )\n      : [];\n    this._searchParameters = searchParameters;\n    const nextValue = {\n      [id]: {\n        ...omit(nextSearchState[id], nonPresentKeys),\n        ...searchParameters,\n      },\n    };\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(this: ConnectorState, props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = configureKeys.reduce((acc, item) => {\n      if (!this._searchParameters[item]) {\n        acc[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {});\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nexport function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nexport var title = 'browser';\nexport var platform = 'browser';\nexport var browser = true;\nexport var env = {};\nexport var argv = [];\nexport var version = ''; // empty string to avoid regexp issues\nexport var versions = {};\nexport var release = {};\nexport var config = {};\n\nfunction noop() {}\n\nexport var on = noop;\nexport var addListener = noop;\nexport var once = noop;\nexport var off = noop;\nexport var removeListener = noop;\nexport var removeAllListeners = noop;\nexport var emit = noop;\n\nexport function binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nexport function cwd () { return '/' }\nexport function chdir (dir) {\n    throw new Error('process.chdir is not supported');\n};\nexport function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nexport function hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nexport function uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nexport default {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import connectConfigureRelatedItems from '../connectors/connectConfigureRelatedItems';\nimport PropTypes from 'prop-types';\n\nfunction ConfigureRelatedItems() {\n  return null;\n}\n\nConfigureRelatedItems.propTypes = {\n  hit: PropTypes.object.isRequired,\n  matchingPatterns: PropTypes.object.isRequired,\n  transformSearchParameters: PropTypes.func,\n};\n\nexport default connectConfigureRelatedItems(ConfigureRelatedItems, {\n  $$widgetType: 'ais.configureRelatedItems',\n});\n","import type { SearchParameters } from 'algoliasearch-helper';\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\nconst MAX_WILDCARD_FACETS = 20;\n\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n  $$type: 'ais.dynamicWidgets',\n\n  defaultProps: {\n    transformItems: (items) => items,\n    maxValuesPerFacet: 20,\n  },\n\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number,\n  },\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (\n      props.facets &&\n      !(\n        Array.isArray(props.facets) &&\n        props.facets.length <= 1 &&\n        (props.facets[0] === '*' || props.facets[0] === undefined)\n      )\n    ) {\n      throw new Error(\n        `The \\`facets\\` prop only accepts [] or [\"*\"], you passed ${JSON.stringify(\n          props.facets\n        )}`\n      );\n    }\n\n    if (!results) {\n      return { attributesToRender: [] };\n    }\n\n    const facetOrder =\n      (results.renderingContent &&\n        results.renderingContent.facetOrdering &&\n        results.renderingContent.facetOrdering.facets &&\n        results.renderingContent.facetOrdering.facets.order) ||\n      [];\n\n    const attributesToRender = props.transformItems(facetOrder, { results });\n\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `More than ${MAX_WILDCARD_FACETS} facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \"facets\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.`\n      );\n    }\n\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The maxValuesPerFacet set by dynamic widgets (${props.maxValuesPerFacet}) is smaller than one of the limits set by a widget (${results._state.maxValuesPerFacet}). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.`\n      );\n    }\n\n    return {\n      attributesToRender,\n    };\n  },\n\n  getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(\n      (acc: SearchParameters, curr: string) => acc.addFacet(curr),\n      searchParameters.setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          props.maxValuesPerFacet || 0,\n          searchParameters.maxValuesPerFacet || 0\n        ),\n      })\n    );\n  },\n});\n","import type { ComponentType, ReactElement, ReactNode } from 'react';\nimport React, { Fragment } from 'react';\nimport { getDisplayName } from '../core/utils';\nimport connectDynamicWidgets from '../connectors/connectDynamicWidgets';\n\nfunction isReactElement(element: any): element is ReactElement {\n  return typeof element === 'object' && element.props;\n}\n\nfunction getAttribute(element: ReactNode): string | undefined {\n  if (!isReactElement(element)) {\n    return undefined;\n  }\n\n  if (element.props.attribute) {\n    return element.props.attribute;\n  }\n  if (Array.isArray(element.props.attributes)) {\n    return element.props.attributes[0];\n  }\n  if (element.props.children) {\n    return getAttribute(React.Children.only(element.props.children));\n  }\n\n  return undefined;\n}\n\ntype DynamicWidgetsProps = {\n  children: ReactNode;\n  attributesToRender: string[];\n  fallbackComponent?: ComponentType<{ attribute: string }>;\n};\n\nfunction DynamicWidgets({\n  children,\n  attributesToRender,\n  fallbackComponent: Fallback = () => null,\n}: DynamicWidgetsProps) {\n  const widgets: Map<string, ReactNode> = new Map();\n\n  React.Children.forEach(children, (child) => {\n    const attribute = getAttribute(child);\n    if (!attribute) {\n      throw new Error(\n        `Could not find \"attribute\" prop for ${getDisplayName(child)}.`\n      );\n    }\n    widgets.set(attribute, child);\n  });\n\n  // on initial render this will be empty, but React InstantSearch keeps\n  // search state for unmounted components in place, so routing works.\n  return (\n    <>\n      {attributesToRender.map((attribute) => (\n        <Fragment key={attribute}>\n          {widgets.get(attribute) || <Fallback attribute={attribute} />}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default connectDynamicWidgets(DynamicWidgets, {\n  $$widgetType: 'ais.dynamicWidgets',\n});\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\ntype SearchState = any;\n\ntype SearchParameters = any;\n\nexport type CustomUserData = {\n  [key: string]: any;\n};\n\ntype TrackedFilterRefinement = string | number | boolean;\n\nexport type QueryRulesProps<TItem = CustomUserData> = {\n  trackedFilters: {\n    [facetName: string]: (\n      facetValues: TrackedFilterRefinement[]\n    ) => TrackedFilterRefinement[];\n  };\n  transformRuleContexts: (ruleContexts: string[]) => string[];\n  transformItems: (items: TItem[]) => TItem[];\n};\n\n// A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\nfunction escapeRuleContext(ruleName: string): string {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(\n  attribute: string,\n  widgetKey: string,\n  searchState: SearchState\n): TrackedFilterRefinement[] {\n  const widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(\n        (rangeKey) => widgetState[attribute][rangeKey]\n      );\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(\n  attribute: string,\n  searchState: SearchState = {}\n): TrackedFilterRefinement[] {\n  const refinements = Object.keys(searchState)\n    .filter(\n      (widgetKey) =>\n        searchState[widgetKey] !== undefined &&\n        searchState[widgetKey][attribute] !== undefined\n    )\n    .map((widgetKey) => getWidgetRefinements(attribute, widgetKey, searchState))\n    .reduce((acc, current) => acc.concat(current), []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters({\n  searchState,\n  trackedFilters,\n}: {\n  searchState: SearchState;\n  trackedFilters: QueryRulesProps['trackedFilters'];\n}) {\n  const ruleContexts = Object.keys(trackedFilters).reduce<string[]>(\n    (facets, facetName) => {\n      const facetRefinements: TrackedFilterRefinement[] = getRefinements(\n        facetName,\n        searchState\n      );\n\n      const getTrackedFacetValues = trackedFilters[facetName];\n      const trackedFacetValues = getTrackedFacetValues(facetRefinements);\n\n      return [\n        ...facets,\n        ...facetRefinements\n          .filter((facetRefinement) =>\n            trackedFacetValues.includes(facetRefinement)\n          )\n          .map((facetValue) =>\n            escapeRuleContext(`ais-${facetName}-${facetValue}`)\n          ),\n      ];\n    },\n    []\n  );\n\n  return ruleContexts;\n}\n\nconst defaultProps: QueryRulesProps = {\n  transformItems: (items) => items,\n  transformRuleContexts: (ruleContexts) => ruleContexts,\n  trackedFilters: {},\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n  $$type: 'ais.queryRules',\n\n  defaultProps,\n\n  getProvidedProps(\n    props: ConnectedProps<QueryRulesProps>,\n    _1: any,\n    searchResults: any\n  ) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const { userData = [] } = results;\n    const { transformItems } = props;\n    const transformedItems = transformItems(userData);\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<QueryRulesProps>,\n    searchState: SearchState\n  ) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    const indexSearchState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : searchState;\n\n    const newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters,\n    });\n\n    const initialRuleContexts = searchParameters.ruleContexts || [];\n    const nextRuleContexts = [...initialRuleContexts, ...newRuleContexts];\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The maximum number of \\`ruleContexts\\` is 10. They have been sliced to that limit.\nConsider using \\`transformRuleContexts\\` to minimize the number of rules sent to Algolia.`\n        );\n      }\n    }\n\n    const ruleContexts = props\n      .transformRuleContexts(nextRuleContexts)\n      .slice(0, 10);\n\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  },\n});\n","import connectQueryRules from '../connectors/connectQueryRules';\n\nexport default connectQueryRules(\n  function QueryRuleContext() {\n    return null;\n  },\n  { $$widgetType: 'ais.queryRuleContext' }\n);\n","import React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchConsumer, IndexProvider } from '../core/context';\n\nfunction getIndexContext(props: Props): IndexContext {\n  return {\n    targetedIndex: props.indexId,\n  };\n}\n\ntype Props = {\n  indexName: string;\n  indexId: string;\n  children?: React.ReactNode;\n};\n\ntype InnerProps = Props & { contextValue: InstantSearchContext };\n\ntype State = {\n  indexContext: IndexContext;\n};\n\n/**\n * The component that allows you to apply widgets to a dedicated index. It's\n * useful if you want to build an interface that targets multiple indices.\n *\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Index, SearchBox, Hits, Configure } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <SearchBox />\n *     <Index indexName=\"instant_search\">\n *       <Hits />\n *     </Index>\n *     <Index indexName=\"bestbuy\">\n *       <Hits />\n *     </Index>\n *   </InstantSearch>\n * );\n */\nclass Index extends Component<InnerProps, State> {\n  static propTypes = {\n    indexName: PropTypes.string.isRequired,\n    indexId: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static displayName = 'AlgoliaIndex';\n  static $$type = 'ais.index';\n  static $$widgetType = 'ais.index';\n\n  static getDerivedStateFromProps(props: InnerProps) {\n    return {\n      indexContext: getIndexContext(props),\n    };\n  }\n\n  state = {\n    indexContext: getIndexContext(this.props),\n  };\n\n  unregisterWidget?: () => void;\n\n  constructor(props: InnerProps) {\n    super(props);\n\n    this.props.contextValue.onSearchParameters(\n      this.getSearchParameters.bind(this),\n      {\n        ais: this.props.contextValue,\n        multiIndexContext: this.state.indexContext,\n      },\n      this.props,\n      undefined,\n      Index.displayName\n    );\n  }\n\n  componentDidMount() {\n    this.unregisterWidget =\n      this.props.contextValue.widgetsManager.registerWidget(this);\n  }\n\n  componentDidUpdate(prevProps: InnerProps) {\n    if (this.props.indexName !== prevProps.indexName) {\n      this.props.contextValue.widgetsManager.update();\n    }\n  }\n\n  componentWillUnmount() {\n    if (typeof this.unregisterWidget === 'function') {\n      this.unregisterWidget();\n    }\n  }\n\n  getSearchParameters(searchParameters, props: InnerProps) {\n    return searchParameters.setIndex(\n      this.props ? this.props.indexName : props.indexName\n    );\n  }\n\n  render() {\n    const childrenCount = Children.count(this.props.children);\n    if (childrenCount === 0) {\n      return null;\n    }\n    return (\n      <IndexProvider value={this.state.indexContext}>\n        {this.props.children}\n      </IndexProvider>\n    );\n  }\n}\n\ntype IndexWrapperProps = {\n  indexName: string;\n  indexId?: string;\n};\n\nconst IndexWrapper: React.FC<IndexWrapperProps> = (props) => {\n  const inferredIndexId = props.indexName;\n  return (\n    <InstantSearchConsumer>\n      {(contextValue) => (\n        <Index\n          contextValue={contextValue}\n          indexId={inferredIndexId}\n          {...props}\n        />\n      )}\n    </InstantSearchConsumer>\n  );\n};\n\nIndexWrapper.propTypes = {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string,\n};\n\nexport const IndexComponentWithoutContext = Index;\nexport default IndexWrapper;\n","import algoliasearchHelper from 'algoliasearch-helper';\nimport createWidgetsManager from './createWidgetsManager';\nimport createStore from './createStore';\nimport { HIGHLIGHT_TAGS } from './highlight';\nimport { hasMultipleIndices } from './indexUtils';\nimport { version as ReactVersion } from 'react';\nimport version from './version';\n\nfunction addAlgoliaAgents(searchClient) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent(`react (${ReactVersion})`);\n    searchClient.addAlgoliaAgent(`react-instantsearch (${version})`);\n  }\n}\n\nconst isMultiIndexContext = (widget) =>\n  hasMultipleIndices({\n    ais: widget.props.contextValue,\n    multiIndexContext: widget.props.indexContextValue,\n  });\nconst isTargetedIndexEqualIndex = (widget, indexId) =>\n  widget.props.indexContextValue.targetedIndex === indexId;\n\n// Relying on the `indexId` is a bit brittle to detect the `Index` widget.\n// Since it's a class we could rely on `instanceof` or similar. We never\n// had an issue though. Works for now.\nconst isIndexWidget = (widget) => Boolean(widget.props.indexId);\nconst isIndexWidgetEqualIndex = (widget, indexId) =>\n  widget.props.indexId === indexId;\n\nconst sortIndexWidgetsFirst = (firstWidget, secondWidget) => {\n  const isFirstWidgetIndex = isIndexWidget(firstWidget);\n  const isSecondWidgetIndex = isIndexWidget(secondWidget);\n\n  if (isFirstWidgetIndex && !isSecondWidgetIndex) {\n    return -1;\n  }\n  if (!isFirstWidgetIndex && isSecondWidgetIndex) {\n    return 1;\n  }\n  return 0;\n};\n\n// This function is copied from the algoliasearch v4 API Client. If modified,\n// consider updating it also in `serializeQueryParameters` from `@algolia/transporter`.\nfunction serializeQueryParameters(parameters) {\n  const isObjectOrArray = (value) =>\n    Object.prototype.toString.call(value) === '[object Object]' ||\n    Object.prototype.toString.call(value) === '[object Array]';\n\n  const encode = (format, ...args) => {\n    let i = 0;\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\n  };\n\n  return Object.keys(parameters)\n    .map((key) =>\n      encode(\n        '%s=%s',\n        key,\n        isObjectOrArray(parameters[key])\n          ? JSON.stringify(parameters[key])\n          : parameters[key]\n      )\n    )\n    .join('&');\n}\n\n/**\n * Creates a new instance of the InstantSearchManager which controls the widgets and\n * trigger the search when the widgets are updated.\n * @param {string} indexName - the main index name\n * @param {object} initialState - initial widget state\n * @param {object} SearchParameters - optional additional parameters to send to the algolia API\n * @param {number} stalledSearchDelay - time (in ms) after the search is stalled\n * @return {InstantSearchManager} a new instance of InstantSearchManager\n */\nexport default function createInstantSearchManager({\n  indexName,\n  initialState = {},\n  searchClient,\n  resultsState,\n  stalledSearchDelay,\n}) {\n  const helper = algoliasearchHelper(searchClient, indexName, {\n    ...HIGHLIGHT_TAGS,\n  });\n\n  addAlgoliaAgents(searchClient);\n\n  helper\n    .on('search', handleNewSearch)\n    .on('result', handleSearchSuccess({ indexId: indexName }))\n    .on('error', handleSearchError);\n\n  let skip = false;\n  let stalledSearchTimer = null;\n  let initialSearchParameters = helper.state;\n  let searchCounter;\n\n  const widgetsManager = createWidgetsManager(onWidgetsUpdate);\n\n  hydrateSearchClient(searchClient, resultsState);\n\n  const store = createStore({\n    widgets: initialState,\n    metadata: hydrateMetadata(resultsState),\n    results: hydrateResultsState(resultsState),\n    error: null,\n    searching: false,\n    isSearchStalled: true,\n    searchingForFacetValues: false,\n  });\n\n  function skipSearch() {\n    skip = true;\n  }\n\n  function updateClient(client) {\n    addAlgoliaAgents(client);\n    helper.setClient(client);\n    search();\n  }\n\n  function clearCache() {\n    helper.clearCache();\n    search();\n  }\n\n  function getMetadata(state) {\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getMetadata))\n      .map((widget) => widget.getMetadata(state));\n  }\n\n  function getSearchParameters() {\n    const sharedParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter(\n        (widget) => !isMultiIndexContext(widget) && !isIndexWidget(widget)\n      )\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        initialSearchParameters\n      );\n\n    const mainParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexEqualMainIndex =\n          isIndexWidget(widget) && isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexEqualMainIndex || subIndexEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      );\n\n    const derivedIndices = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexNotEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          !isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexNotEqualMainIndex =\n          isIndexWidget(widget) && !isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexNotEqualMainIndex || subIndexNotEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce((indices, widget) => {\n        const indexId = isMultiIndexContext(widget)\n          ? widget.props.indexContextValue.targetedIndex\n          : widget.props.indexId;\n\n        const widgets = indices[indexId] || [];\n\n        return {\n          ...indices,\n          [indexId]: widgets.concat(widget),\n        };\n      }, {});\n\n    const derivedParameters = Object.keys(derivedIndices).map((indexId) => ({\n      parameters: derivedIndices[indexId].reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      ),\n      indexId,\n    }));\n\n    return {\n      mainParameters,\n      derivedParameters,\n    };\n  }\n\n  function search() {\n    if (!skip) {\n      const { mainParameters, derivedParameters } = getSearchParameters(\n        helper.state\n      );\n\n      searchCounter = derivedParameters.length + 1;\n\n      // We have to call `slice` because the method `detach` on the derived\n      // helpers mutates the value `derivedHelpers`. The `forEach` loop does\n      // not iterate on each value and we're not able to correctly clear the\n      // previous derived helpers (memory leak + useless requests).\n      helper.derivedHelpers.slice().forEach((derivedHelper) => {\n        // Since we detach the derived helpers on **every** new search they\n        // won't receive intermediate results in case of a stalled search.\n        // Only the last result is dispatched by the derived helper because\n        // they are not detached yet:\n        //\n        // - a -> main helper receives results\n        // - ap -> main helper receives results\n        // - app -> main helper + derived helpers receive results\n        //\n        // The quick fix is to avoid to detach them on search but only once they\n        // received the results. But it means that in case of a stalled search\n        // all the derived helpers not detached yet register a new search inside\n        // the helper. The number grows fast in case of a bad network and it's\n        // not deterministic.\n        derivedHelper.detach();\n      });\n\n      derivedParameters.forEach(({ indexId, parameters }) => {\n        const derivedHelper = helper.derive(() => parameters);\n\n        derivedHelper\n          .on('result', handleSearchSuccess({ indexId }))\n          .on('error', handleSearchError);\n      });\n\n      helper.setState(mainParameters);\n\n      helper.search();\n    }\n  }\n\n  function handleSearchSuccess({ indexId }) {\n    return (event) => {\n      searchCounter--;\n\n      const state = store.getState();\n      const isDerivedHelpersEmpty = !helper.derivedHelpers.length;\n\n      let results = state.results ? state.results : {};\n\n      // Switching from mono index to multi index and vice versa must reset the\n      // results to an empty object, otherwise we keep reference of stalled and\n      // unused results.\n      results = !isDerivedHelpersEmpty && results.getFacetByName ? {} : results;\n\n      if (!isDerivedHelpersEmpty) {\n        results = { ...results, [indexId]: event.results };\n      } else {\n        results = event.results;\n      }\n\n      const currentState = store.getState();\n      let nextIsSearchStalled = currentState.isSearchStalled;\n      if (!helper.hasPendingRequests()) {\n        clearTimeout(stalledSearchTimer);\n        stalledSearchTimer = null;\n        nextIsSearchStalled = false;\n      }\n\n      const { resultsFacetValues, ...partialState } = currentState;\n\n      store.setState({\n        ...partialState,\n        results,\n        isSearchStalled: nextIsSearchStalled,\n        searching: searchCounter > 0,\n        error: null,\n      });\n    };\n  }\n\n  function handleSearchError({ error }) {\n    const currentState = store.getState();\n\n    let nextIsSearchStalled = currentState.isSearchStalled;\n    if (!helper.hasPendingRequests()) {\n      clearTimeout(stalledSearchTimer);\n      nextIsSearchStalled = false;\n    }\n\n    const { resultsFacetValues, ...partialState } = currentState;\n\n    store.setState({\n      ...partialState,\n      isSearchStalled: nextIsSearchStalled,\n      error,\n      searching: false,\n    });\n  }\n\n  function handleNewSearch() {\n    if (!stalledSearchTimer) {\n      stalledSearchTimer = setTimeout(() => {\n        const { resultsFacetValues, ...partialState } = store.getState();\n\n        store.setState({\n          ...partialState,\n          isSearchStalled: true,\n        });\n      }, stalledSearchDelay);\n    }\n  }\n\n  function hydrateSearchClient(client, results) {\n    if (!results) {\n      return;\n    }\n\n    // Disable cache hydration on:\n    // - Algoliasearch API Client < v4 with cache disabled\n    // - Third party clients (detected by the `addAlgoliaAgent` function missing)\n\n    if (\n      (!client.transporter || client._cacheHydrated) &&\n      (!client._useCache || typeof client.addAlgoliaAgent !== 'function')\n    ) {\n      return;\n    }\n\n    // Algoliasearch API Client >= v4\n    // To hydrate the client we need to populate the cache with the data from\n    // the server (done in `hydrateSearchClientWithMultiIndexRequest` or\n    // `hydrateSearchClientWithSingleIndexRequest`). But since there is no way\n    // for us to compute the key the same way as `algoliasearch-client` we need\n    // to populate it on a custom key and override the `search` method to\n    // search on it first.\n    if (client.transporter && !client._cacheHydrated) {\n      client._cacheHydrated = true;\n\n      const baseMethod = client.search;\n      client.search = (requests, ...methodArgs) => {\n        const requestsWithSerializedParams = requests.map((request) => ({\n          ...request,\n          params: serializeQueryParameters(request.params),\n        }));\n\n        return client.transporter.responsesCache.get(\n          {\n            method: 'search',\n            args: [requestsWithSerializedParams, ...methodArgs],\n          },\n          () => {\n            return baseMethod(requests, ...methodArgs);\n          }\n        );\n      };\n    }\n\n    if (Array.isArray(results.results)) {\n      hydrateSearchClientWithMultiIndexRequest(client, results.results);\n      return;\n    }\n\n    hydrateSearchClientWithSingleIndexRequest(client, results);\n  }\n\n  function hydrateSearchClientWithMultiIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.reduce(\n              (acc, result) =>\n                acc.concat(\n                  result.rawResults.map((request) => ({\n                    indexName: request.index,\n                    params: request.params,\n                  }))\n                ),\n              []\n            ),\n          ],\n        },\n        {\n          results: results.reduce(\n            (acc, result) => acc.concat(result.rawResults),\n            []\n          ),\n        }\n      );\n      return;\n    }\n\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.reduce(\n        (acc, result) =>\n          acc.concat(\n            result.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            }))\n          ),\n        []\n      ),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.reduce(\n          (acc, result) => acc.concat(result.rawResults),\n          []\n        ),\n      }),\n    };\n  }\n\n  function hydrateSearchClientWithSingleIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            })),\n          ],\n        },\n        {\n          results: results.rawResults,\n        }\n      );\n      return;\n    }\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.rawResults.map((request) => ({\n        indexName: request.index,\n        params: request.params,\n      })),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.rawResults,\n      }),\n    };\n  }\n\n  function hydrateResultsState(results) {\n    if (!results) {\n      return null;\n    }\n\n    if (Array.isArray(results.results)) {\n      return results.results.reduce(\n        (acc, result) => ({\n          ...acc,\n          [result._internalIndexId]: new algoliasearchHelper.SearchResults(\n            new algoliasearchHelper.SearchParameters(result.state),\n            result.rawResults\n          ),\n        }),\n        {}\n      );\n    }\n\n    return new algoliasearchHelper.SearchResults(\n      new algoliasearchHelper.SearchParameters(results.state),\n      results.rawResults\n    );\n  }\n\n  // Called whenever a widget has been rendered with new props.\n  function onWidgetsUpdate() {\n    const metadata = getMetadata(store.getState().widgets);\n\n    store.setState({\n      ...store.getState(),\n      metadata,\n      searching: true,\n    });\n\n    // Since the `getSearchParameters` method of widgets also depends on props,\n    // the result search parameters might have changed.\n    search();\n  }\n\n  function transitionState(nextSearchState) {\n    const searchState = store.getState().widgets;\n\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.transitionState))\n      .reduce(\n        (res, widget) => widget.transitionState(searchState, res),\n        nextSearchState\n      );\n  }\n\n  function onExternalStateUpdate(nextSearchState) {\n    const metadata = getMetadata(nextSearchState);\n\n    store.setState({\n      ...store.getState(),\n      widgets: nextSearchState,\n      metadata,\n      searching: true,\n    });\n\n    search();\n  }\n\n  function onSearchForFacetValues({ facetName, query, maxFacetHits = 10 }) {\n    // The values 1, 100 are the min / max values that the engine accepts.\n    // see: https://www.algolia.com/doc/api-reference/api-parameters/maxFacetHits\n    const maxFacetHitsWithinRange = Math.max(1, Math.min(maxFacetHits, 100));\n\n    store.setState({\n      ...store.getState(),\n      searchingForFacetValues: true,\n    });\n\n    helper\n      .searchForFacetValues(facetName, query, maxFacetHitsWithinRange)\n      .then(\n        (content) => {\n          store.setState({\n            ...store.getState(),\n            error: null,\n            searchingForFacetValues: false,\n            resultsFacetValues: {\n              ...store.getState().resultsFacetValues,\n              [facetName]: content.facetHits,\n              query,\n            },\n          });\n        },\n        (error) => {\n          store.setState({\n            ...store.getState(),\n            searchingForFacetValues: false,\n            error,\n          });\n        }\n      )\n      .catch((error) => {\n        // Since setState is synchronous, any error that occurs in the render of a\n        // component will be swallowed by this promise.\n        // This is a trick to make the error show up correctly in the console.\n        // See http://stackoverflow.com/a/30741722/969302\n        setTimeout(() => {\n          throw error;\n        });\n      });\n  }\n\n  function updateIndex(newIndex) {\n    initialSearchParameters = initialSearchParameters.setIndex(newIndex);\n    // No need to trigger a new search here as the widgets will also update and trigger it if needed.\n  }\n\n  function getWidgetsIds() {\n    return store\n      .getState()\n      .metadata.reduce(\n        (res, meta) =>\n          typeof meta.id !== 'undefined' ? res.concat(meta.id) : res,\n        []\n      );\n  }\n\n  return {\n    store,\n    widgetsManager,\n    getWidgetsIds,\n    getSearchParameters,\n    onSearchForFacetValues,\n    onExternalStateUpdate,\n    transitionState,\n    updateClient,\n    updateIndex,\n    clearCache,\n    skipSearch,\n  };\n}\n\nfunction hydrateMetadata(resultsState) {\n  if (!resultsState) {\n    return [];\n  }\n\n  // add a value noop, which gets replaced once the widgets are mounted\n  return resultsState.metadata.map((datum) => ({\n    value: () => ({}),\n    ...datum,\n    items:\n      datum.items &&\n      datum.items.map((item) => ({\n        value: () => ({}),\n        ...item,\n        items:\n          item.items &&\n          item.items.map((nestedItem) => ({\n            value: () => ({}),\n            ...nestedItem,\n          })),\n      })),\n  }));\n}\n","import type { Component } from 'react';\nimport type { ConnectorDescription } from './createConnector';\nimport { defer } from './utils';\n\nexport type Widget = Component & {\n  constructor: {\n    displayName?: string;\n    $$type?: string;\n    $$widgetType?: string;\n    _connectorDesc?: ConnectorDescription;\n  };\n};\n\nexport type WidgetsManager = ReturnType<typeof createWidgetsManager>;\n\nexport default function createWidgetsManager(onWidgetsUpdate: () => void) {\n  const widgets: Widget[] = [];\n  // Is an update scheduled?\n  let scheduled = false;\n\n  // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n    scheduled = true;\n    defer(() => {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n\n  return {\n    registerWidget(widget: Widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets() {\n      return widgets;\n    },\n  };\n}\n","type SearchState = any;\ntype ResultsState = any;\ntype ResultsFacetsValues = any;\ntype Listener = () => void;\ntype State = {\n  widgets: SearchState;\n  metadata: any[];\n  results: ResultsState | null;\n  resultsFacetValues: ResultsFacetsValues | null;\n  error: Error | null;\n  searching: boolean;\n  isSearchStalled: boolean;\n  searchingForFacetValues: boolean;\n};\nexport default function createStore(initialState: State) {\n  let state = initialState;\n  const listeners: Listener[] = [];\n  return {\n    getState() {\n      return state;\n    },\n    setState(nextState: State) {\n      state = nextState;\n      listeners.forEach((listener) => listener());\n    },\n    subscribe(listener: Listener) {\n      listeners.push(listener);\n      return function unsubscribe() {\n        listeners.splice(listeners.indexOf(listener), 1);\n      };\n    },\n  };\n}\n\nexport type Store = ReturnType<typeof createStore>;\n","import type { SearchClient } from '../widgets/InstantSearch';\nimport type { Widget } from './createWidgetsManager';\n\nexport function isMetadataEnabled() {\n  return (\n    typeof window === 'object' &&\n    typeof window.navigator === 'object' &&\n    typeof window.navigator.userAgent === 'string' &&\n    window.navigator.userAgent.includes('Algolia Crawler') &&\n    typeof window.document === 'object'\n  );\n}\n\nexport function getMetadataPayload(\n  widgets: Widget[],\n  searchClient: SearchClient\n) {\n  const internalProps = ['contextValue', 'indexContextValue'];\n\n  const widgetsPayload = widgets.map(({ props, constructor }) => {\n    const { defaultProps = {}, displayName = constructor.displayName } =\n      constructor._connectorDesc || {};\n\n    return {\n      displayName,\n      $$type: constructor.$$type,\n      $$widgetType: constructor.$$widgetType,\n      params: Object.keys(props).filter(\n        (prop) =>\n          !internalProps.includes(prop) &&\n          defaultProps[prop] !== props[prop] &&\n          props[prop] !== undefined\n      ),\n    };\n  });\n\n  const client = searchClient as Record<string, any>;\n  const ua =\n    client.transporter && client.transporter.userAgent\n      ? client.transporter.userAgent.value\n      : client._ua;\n\n  return {\n    ua,\n    widgets: widgetsPayload,\n  };\n}\n\nexport function injectMetadata(widgets: Widget[], searchClient: SearchClient) {\n  const payloadContainer = document.createElement('meta');\n  const refNode = document.querySelector('head')!;\n  payloadContainer.name = 'algolia:metadata';\n\n  const payload = getMetadataPayload(widgets, searchClient);\n\n  payloadContainer.content = JSON.stringify(payload);\n  refNode.appendChild(payloadContainer);\n}\n","import React, { Component, Children } from 'react';\nimport isEqual from 'react-fast-compare';\nimport PropTypes from 'prop-types';\nimport createInstantSearchManager from '../core/createInstantSearchManager';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchProvider } from '../core/context';\nimport type { Store } from '../core/createStore';\nimport type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport type { MultiResponse } from '../types/algoliasearch';\nimport type { ConnectorDescription } from '../core/createConnector';\nimport type { WidgetsManager } from '../core/createWidgetsManager';\nimport { isMetadataEnabled, injectMetadata } from '../core/metadata';\n\ntype ResultsState = {\n  metadata: never[];\n  state: PlainSearchParameters;\n  rawResults: MultiResponse;\n};\n\n// @TODO: move to createInstantSearchManager when it's TS\ntype InstantSearchManager = {\n  store: Store;\n  widgetsManager: WidgetsManager;\n  getWidgetsIds(): any;\n  getSearchParameters(...args: any[]): {\n    mainParameters: SearchParameters;\n    derivedParameters: SearchParameters;\n  };\n  onSearchForFacetValues(...args: any[]): any;\n  onExternalStateUpdate(...args: any[]): any;\n  transitionState: any;\n  updateClient: any;\n  updateIndex: any;\n  clearCache(): void;\n  skipSearch(...args: any[]): any;\n};\n\nexport type SearchClient = {\n  search: (requests: Array<{}>) => Promise<{}>;\n  searchForFacetValues: (requests: Array<{}>) => Promise<{}>;\n};\n\ntype SearchState = any;\n\ntype Props = {\n  refresh: boolean;\n  indexName: string;\n  searchClient: SearchClient;\n  createURL?: (searchState: SearchState, knownKeys: any) => string;\n  onSearchStateChange?: (searchState: SearchState) => void;\n  searchState?: SearchState;\n  onSearchParameters?: (\n    getSearchParameters: ConnectorDescription['getSearchParameters'],\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext },\n    props: object,\n    searchState: SearchState\n  ) => void;\n  widgetsCollector?: (args: {\n    getSearchParameters: ConnectorDescription['getSearchParameters'];\n    getMetadata: ConnectorDescription['getMetadata'];\n    searchState: SearchState;\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext };\n    props: object;\n    displayName: string;\n  }) => void;\n  stalledSearchDelay?: number;\n  resultsState?: ResultsState | { [indexId: string]: ResultsState };\n  children?: React.ReactNode;\n};\n\ntype State = {\n  isControlled: boolean;\n  instantSearchManager: InstantSearchManager;\n  contextValue: InstantSearchContext;\n};\n\nfunction isControlled(props: Props) {\n  return Boolean(props.searchState);\n}\n\n/**\n * @description\n * `<InstantSearch>` is the root component of all React InstantSearch implementations.\n * It provides all the connected components (aka widgets) a means to interact\n * with the searchState.\n * @kind widget\n * @name <InstantSearch>\n * @requirements You will need to have an Algolia account to be able to use this widget.\n * [Create one now](https://www.algolia.com/users/sign_up).\n * @propType {string} indexName - Main index in which to search.\n * @propType {boolean} [refresh=false] - Flag to activate when the cache needs to be cleared so that the front-end is updated when a change occurs in the index.\n * @propType {object} [searchClient] - Provide a custom search client.\n * @propType {func} [onSearchStateChange] - Function to be called everytime a new search is done. Useful for [URL Routing](guide/Routing.html).\n * @propType {object} [searchState] - Object to inject some search state. Switches the InstantSearch component in controlled mode. Useful for [URL Routing](guide/Routing.html).\n * @propType {func} [createURL] - Function to call when creating links, useful for [URL Routing](guide/Routing.html).\n * @propType {SearchResults|SearchResults[]} [resultsState] - Use this to inject the results that will be used at first rendering. Those results are found by using the `findResultsState` function. Useful for [Server Side Rendering](guide/Server-side_rendering.html).\n * @propType {number} [stalledSearchDelay=200] - The amount of time before considering that the search takes too much time. The time is expressed in milliseconds.\n * @propType {{ Root: string|function, props: object }} [root] - Use this to customize the root element. Default value: `{ Root: 'div' }`\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\nclass InstantSearch extends Component<Props, State> {\n  static defaultProps = {\n    stalledSearchDelay: 200,\n    refresh: false,\n  };\n\n  static propTypes = {\n    // @TODO: These props are currently constant.\n    indexName: PropTypes.string.isRequired,\n\n    searchClient: PropTypes.shape({\n      search: PropTypes.func.isRequired,\n      searchForFacetValues: PropTypes.func,\n      addAlgoliaAgent: PropTypes.func,\n      clearCache: PropTypes.func,\n    }).isRequired,\n\n    createURL: PropTypes.func,\n\n    refresh: PropTypes.bool,\n\n    searchState: PropTypes.object,\n    onSearchStateChange: PropTypes.func,\n\n    onSearchParameters: PropTypes.func,\n    widgetsCollector: PropTypes.func,\n    resultsState: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n    children: PropTypes.node,\n    stalledSearchDelay: PropTypes.number,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): Partial<State> {\n    const nextIsControlled = isControlled(nextProps);\n    const previousSearchState =\n      prevState.instantSearchManager.store.getState().widgets;\n    const nextSearchState = nextProps.searchState;\n\n    if (nextIsControlled && !isEqual(previousSearchState, nextSearchState)) {\n      prevState.instantSearchManager.onExternalStateUpdate(\n        nextProps.searchState\n      );\n    }\n\n    return {\n      isControlled: nextIsControlled,\n      contextValue: {\n        ...prevState.contextValue,\n        mainTargetedIndex: nextProps.indexName,\n      },\n    };\n  }\n\n  isUnmounting: boolean = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    const instantSearchManager = createInstantSearchManager({\n      indexName: this.props.indexName,\n      searchClient: this.props.searchClient,\n      initialState: this.props.searchState || {},\n      resultsState: this.props.resultsState,\n      stalledSearchDelay: this.props.stalledSearchDelay,\n    });\n\n    const contextValue = {\n      store: instantSearchManager.store,\n      widgetsManager: instantSearchManager.widgetsManager,\n      mainTargetedIndex: this.props.indexName,\n      onInternalStateUpdate: this.onWidgetsInternalStateUpdate.bind(this),\n      createHrefForState: this.createHrefForState.bind(this),\n      onSearchForFacetValues: this.onSearchForFacetValues.bind(this),\n      onSearchStateChange: this.onSearchStateChange.bind(this),\n      onSearchParameters: this.onSearchParameters.bind(this),\n    };\n\n    this.state = {\n      isControlled: isControlled(this.props),\n      instantSearchManager,\n      contextValue,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevIsControlled = isControlled(prevProps);\n\n    if (prevIsControlled && !this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being controlled to uncontrolled\"\n      );\n    }\n\n    if (!prevIsControlled && this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being uncontrolled to controlled\"\n      );\n    }\n\n    if (this.props.refresh !== prevProps.refresh && this.props.refresh) {\n      this.state.instantSearchManager.clearCache();\n    }\n\n    if (prevProps.indexName !== this.props.indexName) {\n      this.state.instantSearchManager.updateIndex(this.props.indexName);\n    }\n\n    if (prevProps.searchClient !== this.props.searchClient) {\n      this.state.instantSearchManager.updateClient(this.props.searchClient);\n    }\n  }\n\n  componentDidMount() {\n    if (isMetadataEnabled()) {\n      injectMetadata(\n        this.state.instantSearchManager.widgetsManager.getWidgets(),\n        this.props.searchClient\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true;\n    this.state.instantSearchManager.skipSearch();\n  }\n\n  createHrefForState(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n    return this.state.isControlled && this.props.createURL\n      ? this.props.createURL(searchState, this.getKnownKeys())\n      : '#';\n  }\n\n  onWidgetsInternalStateUpdate(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n\n    this.onSearchStateChange(searchState);\n\n    if (!this.state.isControlled) {\n      this.state.instantSearchManager.onExternalStateUpdate(searchState);\n    }\n  }\n\n  onSearchStateChange(searchState) {\n    if (this.props.onSearchStateChange && !this.isUnmounting) {\n      this.props.onSearchStateChange(searchState);\n    }\n  }\n\n  onSearchParameters(\n    getSearchParameters: ConnectorDescription['getMetadata'],\n    context: {\n      ais: InstantSearchContext;\n      multiIndexContext: IndexContext;\n    },\n    props: object,\n    getMetadata: ConnectorDescription['getMetadata'],\n    displayName: string\n  ) {\n    if (this.props.onSearchParameters) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.onSearchParameters(\n        getSearchParameters,\n        context,\n        props,\n        searchState\n      );\n    }\n    if (this.props.widgetsCollector) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.widgetsCollector({\n        getSearchParameters,\n        getMetadata,\n        context,\n        props,\n        searchState,\n        displayName,\n      });\n    }\n  }\n\n  onSearchForFacetValues(searchState) {\n    this.state.instantSearchManager.onSearchForFacetValues(searchState);\n  }\n\n  getKnownKeys() {\n    return this.state.instantSearchManager.getWidgetsIds();\n  }\n\n  render() {\n    if (Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <InstantSearchProvider value={this.state.contextValue}>\n        {this.props.children}\n      </InstantSearchProvider>\n    );\n  }\n}\n\nexport default InstantSearch;\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\nimport { addQueryID, addAbsolutePositions } from '../core/utils';\n\nconst getId = () => 'query';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (\n      searchResults.results.hits &&\n      Array.isArray(searchResults.results.hits)\n    ) {\n      return addAbsolutePositions(\n        addQueryID(searchResults.results.hits, searchResults.results.queryID),\n        searchResults.results.hitsPerPage,\n        searchResults.results.page\n      );\n    } else {\n      return Object.keys(searchResults.results).reduce(\n        (hits, index) => [\n          ...hits,\n          {\n            index,\n            hits: addAbsolutePositions(\n              addQueryID(\n                searchResults.results[index].hits,\n                searchResults.results[index].queryID\n              ),\n              searchResults.results[index].hitsPerPage,\n              searchResults.results[index].page\n            ),\n          },\n        ],\n        []\n      );\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n  $$type: 'ais.autoComplete',\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  /**\n   * AutoComplete needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { refineValue, getResults } from '../core/indexUtils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction transformValue(values) {\n  return values.reduce((acc, item) => {\n    if (item.isRefined) {\n      acc.push({\n        label: item.name,\n        // If dealing with a nested \"items\", \"value\" is equal to the previous value concatenated with the current value\n        // If dealing with the first level, \"value\" is equal to the current value\n        value: item.escapedValue,\n      });\n      // Create a variable in order to keep the same acc for the recursion, otherwise \"reduce\" returns a new one\n      if (item.data) {\n        acc = acc.concat(transformValue(item.data, acc));\n      }\n    }\n    return acc;\n  }, []);\n}\n\n/**\n * The breadcrumb component is s a type of secondary navigation scheme that\n * reveals the user’s location in a website or web application.\n *\n * @name connectBreadcrumb\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a Breadcrumb of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Breadcrumb can display.\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaBreadcrumb',\n  $$type: 'ais.breadcrumb',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const id = getId(props);\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const values = results.getFacetValues(id);\n\n    const items = values.data ? transformValue(values.data) : [];\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      canRefine: transformedItems.length > 0,\n      items: transformedItems,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\n\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attribute: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attribute` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\nexport default createConnector({\n  displayName: 'AlgoliaCurrentRefinements',\n  $$type: 'ais.currentRefinements',\n\n  propTypes: {\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults, metadata) {\n    const items = metadata.reduce((res, meta) => {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (\n            props.clearsQuery &&\n            meta.id === 'query' &&\n            meta.items[0].currentRefinement === ''\n          ) {\n            return res;\n          }\n          return res.concat(\n            meta.items.map((item) => ({\n              ...item,\n              id: meta.id,\n              index: meta.index,\n            }))\n          );\n        }\n      }\n      return res;\n    }, []);\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    const refinementsToClear =\n      items instanceof Array ? items.map((item) => item.value) : [items];\n    return refinementsToClear.reduce((res, clear) => clear(res), searchState);\n  },\n});\n","import { objectHasKeys } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  getResults,\n  getCurrentRefinementValue,\n  getIndexId,\n  refineValue,\n  cleanUpValue,\n} from '../core/indexUtils';\n\n/**\n * The GeoSearch connector provides the logic to build a widget that will display the results on a map.\n * It also provides a way to search for results based on their position. The connector provides function to manage the search experience (search on map interaction).\n * @name connectGeoSearch\n * @kind connector\n * @requirements Note that the GeoSearch connector uses the [geosearch](https://www.algolia.com/doc/guides/searching/geo-search) capabilities of Algolia.\n * Your hits **must** have a `_geoloc` attribute in order to be passed to the rendering function. Currently, the feature is not compatible with multiple values in the `_geoloc` attribute\n * (e.g. a restaurant with multiple locations). In that case you can duplicate your records and use the [distinct](https://www.algolia.com/doc/guides/ranking/distinct) feature of Algolia to only retrieve unique results.\n * @propType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [defaultRefinement] - Default search state of the widget containing the bounds for the map\n * @providedPropType {function({ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } })} refine - a function to toggle the refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<object>} hits - the records that matched the search\n * @providedPropType {boolean} isRefinedWithMap - true if the current refinement is set with the map bounds\n * @providedPropType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [currentRefinement] - the refinement currently applied\n * @providedPropType {{ lat: number, lng: number }} [position] - the position of the search\n */\n\n// To control the map with an external widget the other widget\n// **must** write the value in the attribute `aroundLatLng`\nconst getBoundingBoxId = () => 'boundingBox';\nconst getAroundLatLngId = () => 'aroundLatLng';\nconst getConfigureAroundLatLngId = () => 'configure.aroundLatLng';\n\nconst currentRefinementToString = (currentRefinement) =>\n  [\n    currentRefinement.northEast.lat,\n    currentRefinement.northEast.lng,\n    currentRefinement.southWest.lat,\n    currentRefinement.southWest.lng,\n  ].join();\n\nconst stringToCurrentRefinement = (value) => {\n  const values = value.split(',');\n\n  return {\n    northEast: {\n      lat: parseFloat(values[0]),\n      lng: parseFloat(values[1]),\n    },\n    southWest: {\n      lat: parseFloat(values[2]),\n      lng: parseFloat(values[3]),\n    },\n  };\n};\n\nconst latLngRegExp = /^(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)$/;\nconst stringToPosition = (value) => {\n  const pattern = value.match(latLngRegExp);\n\n  return {\n    lat: parseFloat(pattern[1]),\n    lng: parseFloat(pattern[2]),\n  };\n};\n\nconst getCurrentRefinement = (props, searchState, context) => {\n  const refinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    getBoundingBoxId(),\n    {}\n  );\n\n  if (!objectHasKeys(refinement)) {\n    return;\n  }\n\n  // eslint-disable-next-line consistent-return\n  return {\n    northEast: {\n      lat: parseFloat(refinement.northEast.lat),\n      lng: parseFloat(refinement.northEast.lng),\n    },\n    southWest: {\n      lat: parseFloat(refinement.southWest.lat),\n      lng: parseFloat(refinement.southWest.lng),\n    },\n  };\n};\n\nconst getCurrentPosition = (props, searchState, context) => {\n  const { defaultRefinement, ...propsWithoutDefaultRefinement } = props;\n\n  const aroundLatLng = getCurrentRefinementValue(\n    propsWithoutDefaultRefinement,\n    searchState,\n    context,\n    getAroundLatLngId()\n  );\n\n  if (!aroundLatLng) {\n    // Fallback on `configure.aroundLatLng`\n    const configureAroundLatLng = getCurrentRefinementValue(\n      propsWithoutDefaultRefinement,\n      searchState,\n      context,\n      getConfigureAroundLatLngId()\n    );\n\n    return configureAroundLatLng && stringToPosition(configureAroundLatLng);\n  }\n\n  return aroundLatLng;\n};\n\nconst refine = (searchState, nextValue, context) => {\n  const resetPage = true;\n  const nextRefinement = {\n    [getBoundingBoxId()]: nextValue,\n  };\n\n  return refineValue(searchState, nextRefinement, context, resetPage);\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaGeoSearch',\n  $$type: 'ais.geoSearch',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n\n    const results = getResults(searchResults, context);\n\n    // We read it from both because the SearchParameters & the searchState are not always\n    // in sync. When we set the refinement the searchState is used but when we clear the refinement\n    // the SearchParameters is used. In the first case when we render, the results are not there\n    // so we can't find the value from the results. The most up to date value is the searchState.\n    // But when we clear the refinement the searchState is immediately cleared even when the items\n    // retrieved are still the one from the previous query with the bounding box. It leads to some\n    // issue with the position of the map. We should rely on 1 source of truth or at least always\n    // be sync.\n\n    const currentRefinementFromSearchState = getCurrentRefinement(\n      props,\n      searchState,\n      context\n    );\n\n    const currentRefinementFromSearchParameters =\n      (results &&\n        results._state.insideBoundingBox &&\n        stringToCurrentRefinement(results._state.insideBoundingBox)) ||\n      undefined;\n\n    const currentPositionFromSearchState = getCurrentPosition(\n      props,\n      searchState,\n      context\n    );\n\n    const currentPositionFromSearchParameters =\n      (results &&\n        results._state.aroundLatLng &&\n        stringToPosition(results._state.aroundLatLng)) ||\n      undefined;\n\n    const currentRefinement =\n      currentRefinementFromSearchState || currentRefinementFromSearchParameters;\n\n    const position =\n      currentPositionFromSearchState || currentPositionFromSearchParameters;\n\n    return {\n      hits: !results ? [] : results.hits.filter((_) => Boolean(_._geoloc)),\n      isRefinedWithMap: Boolean(currentRefinement),\n      currentRefinement,\n      position,\n    };\n  },\n\n  refine(props, searchState, nextValue) {\n    return refine(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!currentRefinement) {\n      return searchParameters;\n    }\n\n    return searchParameters.setQueryParameter(\n      'insideBoundingBox',\n      currentRefinementToString(currentRefinement)\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getBoundingBoxId()\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const items = [];\n    const id = getBoundingBoxId();\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    const index = getIndexId(context);\n    const nextRefinement = {};\n    const currentRefinement = getCurrentRefinement(props, searchState, context);\n\n    if (currentRefinement) {\n      items.push({\n        label: `${id}: ${currentRefinementToString(currentRefinement)}`,\n        value: (nextState) => refine(nextState, nextRefinement, context),\n        currentRefinement,\n      });\n    }\n\n    return {\n      id,\n      index,\n      items,\n    };\n  },\n\n  shouldComponentUpdate() {\n    return true;\n  },\n});\n","import PropTypes from 'prop-types';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(value, props, searchState, context) {\n  const { id, attributes, separator, rootPath, showParentLevel } = props;\n\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  let nextRefinement;\n\n  if (currentRefinement === null) {\n    nextRefinement = value;\n  } else {\n    const tmpSearchParameters = new algoliasearchHelper.SearchParameters({\n      hierarchicalFacets: [\n        {\n          name: id,\n          attributes,\n          separator,\n          rootPath,\n          showParentLevel,\n        },\n      ],\n    });\n\n    nextRefinement = tmpSearchParameters\n      .toggleHierarchicalFacetRefinement(id, currentRefinement)\n      .toggleHierarchicalFacetRefinement(id, value)\n      .getHierarchicalRefinement(id)[0];\n  }\n\n  return nextRefinement;\n}\n\nfunction transformValue(value, props, searchState, context) {\n  return value.map((v) => ({\n    label: v.name,\n    value: getValue(v.escapedValue, props, searchState, context),\n    count: v.count,\n    isRefined: v.isRefined,\n    items: v.data && transformValue(v.data, props, searchState, context),\n  }));\n}\n\nconst truncate = (items = [], limit = 10) =>\n  items.slice(0, limit).map((item = {}) =>\n    Array.isArray(item.items)\n      ? {\n          ...item,\n          items: truncate(item.items, limit),\n        }\n      : item\n  );\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst sortBy = ['name:asc'];\n\n/**\n * connectHierarchicalMenu connector provides the logic to build a widget that will\n * give the user the ability to explore a tree-like structure.\n * This is commonly used for multi-level categorization of products on e-commerce\n * websites. From a UX point of view, we suggest not displaying more than two levels deep.\n * @name connectHierarchicalMenu\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a hierarchical menu of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {string} [defaultRefinement] - the item value selected by default\n * @propType {boolean} [showMore=false] - Flag to activate the show more button, for toggling the number of items between limit and showMoreLimit.\n * @propType {number} [limit=10] -  The maximum number of items displayed.\n * @propType {number} [showMoreLimit=20] -  The maximum number of items displayed when the user triggers the show more. Not considered if `showMore` is false.\n * @propType {string} [separator='>'] -  Specifies the level separator used in the data.\n * @propType {string} [rootPath=null] - The path to use if the first level is not the root level.\n * @propType {boolean} [showParentLevel=true] - Flag to set if the parent level should be displayed.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the HierarchicalMenu can display. items has the same shape as parent items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHierarchicalMenu',\n  $$type: 'ais.hierarchicalMenu',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    separator: PropTypes.string,\n    rootPath: PropTypes.string,\n    showParentLevel: PropTypes.bool,\n    defaultRefinement: PropTypes.string,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    separator: ' > ',\n    rootPath: null,\n    showParentLevel: true,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { showMore, limit, showMoreLimit, facetOrdering } = props;\n    const id = getId(props);\n\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine: false,\n      };\n    }\n    const itemsLimit = showMore ? showMoreLimit : limit;\n    const value = results.getFacetValues(id, { sortBy, facetOrdering });\n    const items = value.data\n      ? transformValue(value.data, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        })\n      : [];\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n    return {\n      items: truncate(transformedItems, itemsLimit),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const {\n      attributes,\n      separator,\n      rootPath,\n      showParentLevel,\n      showMore,\n      limit,\n      showMoreLimit,\n      contextValue,\n    } = props;\n\n    const id = getId(props);\n    const itemsLimit = showMore ? showMoreLimit : limit;\n\n    searchParameters = searchParameters\n      .addHierarchicalFacet({\n        name: id,\n        attributes,\n        separator,\n        rootPath,\n        showParentLevel,\n      })\n      .setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          searchParameters.maxValuesPerFacet || 0,\n          itemsLimit\n        ),\n      });\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.toggleHierarchicalFacetRefinement(\n        id,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const rootAttribute = props.attributes[0];\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = !currentRefinement\n      ? []\n      : [\n          {\n            label: `${rootAttribute}: ${unescapeFacetValue(currentRefinement)}`,\n            attribute: rootAttribute,\n            value: (nextState) =>\n              refine(props, nextState, '', {\n                ais: props.contextValue,\n                multiIndexContext: props.indexContextValue,\n              }),\n            currentRefinement,\n          },\n        ];\n\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { HIGHLIGHT_TAGS, parseAlgoliaHit } from '../core/highlight';\n\nconst highlight = ({\n  attribute,\n  hit,\n  highlightProperty,\n  preTag = HIGHLIGHT_TAGS.highlightPreTag,\n  postTag = HIGHLIGHT_TAGS.highlightPostTag,\n}) =>\n  parseAlgoliaHit({\n    attribute,\n    highlightProperty,\n    hit,\n    preTag,\n    postTag,\n  });\n\n/**\n * connectHighlight connector provides the logic to create an highlighter\n * component that will retrieve, parse and render an highlighted attribute\n * from an Algolia hit.\n * @name connectHighlight\n * @kind connector\n * @category connector\n * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectHighlight } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const CustomHighlight = connectHighlight(\n *   ({ highlight, attribute, hit, highlightProperty }) => {\n *     const highlights = highlight({\n *       highlightProperty: '_highlightResult',\n *       attribute,\n *       hit\n *     });\n *\n *     return highlights.map(part => part.isHighlighted ? (\n *       <mark>{part.value}</mark>\n *     ) : (\n *       <span>{part.value}</span>\n *     ));\n *   }\n * );\n *\n * const Hit = ({ hit }) => (\n *   <p>\n *     <CustomHighlight attribute=\"name\" hit={hit} />\n *   </p>\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox defaultRefinement=\"pho\" />\n *     <Hits hitComponent={Hit} />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHighlighter',\n  $$type: 'ais.highlighter',\n\n  propTypes: {},\n\n  getProvidedProps() {\n    return { highlight };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  $$type: 'ais.hits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (!results) {\n      return { hits: [] };\n    }\n    const hitsWithPositions = addAbsolutePositions(\n      results.hits,\n      results.hitsPerPage,\n      results.page\n    );\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n    return { hits: hitsWithPositionsAndQueryID };\n  },\n\n  /**\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters(searchParameters) {\n    return searchParameters;\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHitsPerPage',\n  $$type: 'ais.hitsPerPage',\n\n  propTypes: {\n    defaultRefinement: PropTypes.number.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.number.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import isEqual from 'react-fast-compare';\n\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  refineValue,\n  getResults,\n} from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction getStateWithoutPage(state) {\n  const { page, ...rest } = state || {};\n  return rest;\n}\n\nfunction getInMemoryCache() {\n  let cachedHits = undefined;\n  let cachedState = undefined;\n  return {\n    read({ state }) {\n      return isEqual(cachedState, getStateWithoutPage(state))\n        ? cachedHits\n        : null;\n    },\n    write({ state, hits }) {\n      cachedState = getStateWithoutPage(state);\n      cachedHits = hits;\n    },\n  };\n}\n\nfunction extractHitsFromCachedHits(cachedHits) {\n  return Object.keys(cachedHits)\n    .map(Number)\n    .sort((a, b) => a - b)\n    .reduce((acc, page) => {\n      return acc.concat(cachedHits[page]);\n    }, []);\n}\n\n/**\n * InfiniteHits connector provides the logic to create connected\n * components that will render an continuous list of results retrieved from\n * Algolia. This connector provides a function to load more results.\n * @name connectInfiniteHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {boolean} hasMore - indicates if there are more pages to load\n * @providedPropType {function} refine - call to load more results\n */\nexport default createConnector({\n  displayName: 'AlgoliaInfiniteHits',\n  $$type: 'ais.infiniteHits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        hits: [],\n        hasPrevious: false,\n        hasMore: false,\n        refine: () => {},\n        refinePrevious: () => {},\n        refineNext: () => {},\n      };\n    }\n\n    const { page, hits, hitsPerPage, nbPages, _state: state } = results;\n\n    this._cache = props.cache ? props.cache : this._cache || getInMemoryCache();\n    const cachedHits = this._cache.read({ state }) || {};\n\n    const hitsWithPositions = addAbsolutePositions(hits, hitsPerPage, page);\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n\n    cachedHits[page] = hitsWithPositionsAndQueryID;\n    this._cache.write({ state, hits: cachedHits });\n\n    /*\n      Math.min() and Math.max() returns Infinity or -Infinity when no argument is given.\n      But there is always something in this point because of `cachedHits[page]`.\n    */\n    const firstReceivedPage = Math.min(...Object.keys(cachedHits).map(Number));\n    const lastReceivedPage = Math.max(...Object.keys(cachedHits).map(Number));\n\n    const hasPrevious = firstReceivedPage > 0;\n    const lastPageIndex = nbPages - 1;\n    const hasMore = lastReceivedPage < lastPageIndex;\n    const refinePrevious = (event) => this.refine(event, firstReceivedPage - 1);\n    const refineNext = (event) => this.refine(event, lastReceivedPage + 1);\n\n    return {\n      hits: extractHitsFromCachedHits(cachedHits),\n      hasPrevious,\n      hasMore,\n      refinePrevious,\n      refineNext,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameters({\n      page:\n        getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }) - 1,\n    });\n  },\n\n  refine(props, searchState, event, index) {\n    const id = getId();\n    const nextValue = { [id]: index + 1 };\n    const resetPage = false;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getIndexId,\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nconst namespace = 'menu';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(value, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  return value === currentRefinement ? '' : value;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst defaultSortBy = ['count:desc', 'name:asc'];\n\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of diplayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [searchable=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaMenu',\n  $$type: 'ais.menu',\n\n  propTypes: {\n    attribute: PropTypes.string.isRequired,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.string,\n    transformItems: PropTypes.func,\n    searchable: PropTypes.bool,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    meta,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        isFromSearch,\n        searchable,\n        canRefine,\n      };\n    }\n\n    let items;\n    if (isFromSearch) {\n      items = searchForFacetValuesResults[attribute].map((v) => ({\n        label: v.value,\n        value: getValue(v.escapedValue, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        _highlightResult: { label: { value: v.highlighted } },\n        count: v.count,\n        isRefined: v.isRefined,\n      }));\n    } else {\n      items = results\n        .getFacetValues(attribute, {\n          sortBy: searchable ? undefined : defaultSortBy,\n          facetOrdering,\n        })\n        .map((v) => ({\n          label: v.name,\n          value: getValue(v.escapedValue, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          count: v.count,\n          isRefined: v.isRefined,\n        }));\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${props.attribute}: ${unescapeFacetValue(\n                  currentRefinement\n                )}`,\n                attribute: props.attribute,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { find } from '../core/utils';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction stringifyItem(item) {\n  if (typeof item.start === 'undefined' && typeof item.end === 'undefined') {\n    return '';\n  }\n  const start = typeof item.start !== 'undefined' ? item.start : '';\n  const end = typeof item.end !== 'undefined' ? item.end : '';\n  return `${start}:${end}`;\n}\n\nfunction parseItem(value) {\n  if (value.length === 0) {\n    return { start: null, end: null };\n  }\n  const [startStr, endStr] = value.split(':');\n  return {\n    start: startStr.length > 0 ? parseFloat(startStr) : null,\n    end: endStr.length > 0 ? parseFloat(endStr) : null,\n  };\n}\n\nconst namespace = 'multiRange';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    '',\n    (currentRefinement) => {\n      if (currentRefinement === '') {\n        return '';\n      }\n      return currentRefinement;\n    }\n  );\n}\n\nfunction isRefinementsRangeIncludesInsideItemRange(stats, start, end) {\n  return (\n    (stats.min >= start && stats.min <= end) ||\n    (stats.max >= start && stats.max <= end)\n  );\n}\n\nfunction isItemRangeIncludedInsideRefinementsRange(stats, start, end) {\n  return (\n    (start >= stats.min && start <= stats.max) ||\n    (end >= stats.min && end <= stats.max)\n  );\n}\n\nfunction itemHasRefinement(attribute, results, value) {\n  const stats = results.getFacetByName(attribute)\n    ? results.getFacetStats(attribute)\n    : null;\n  const range = value.split(':');\n  const start =\n    Number(range[0]) === 0 || value === ''\n      ? Number.NEGATIVE_INFINITY\n      : Number(range[0]);\n  const end =\n    Number(range[1]) === 0 || value === ''\n      ? Number.POSITIVE_INFINITY\n      : Number(range[1]);\n  return !(\n    Boolean(stats) &&\n    (isRefinementsRangeIncludesInsideItemRange(stats, start, end) ||\n      isItemRangeIncludedInsideRefinementsRange(stats, start, end))\n  );\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const nextValue = { [getId(props, searchState)]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectNumericMenu connector provides the logic to build a widget that will\n * give the user the ability to select a range value for a numeric attribute.\n * Ranges are defined statically.\n * @name connectNumericMenu\n * @requirements The attribute passed to the `attribute` prop must be holding numerical values.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the records\n * @propType {{label: string, start: number, end: number}[]} items - List of options. With a text label, and upper and lower bounds.\n * @propType {string} [defaultRefinement] - the value of the item selected by default, follow the shape of a `string` with a pattern of `'{start}:{end}'`.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied.  follow the shape of a `string` with a pattern of `'{start}:{end}'` which corresponds to the current selected item. For instance, when the selected item is `{start: 10, end: 20}`, the searchState of the widget is `'10:20'`. When `start` isn't defined, the searchState of the widget is `':{end}'`, and the same way around when `end` isn't defined. However, when neither `start` nor `end` are defined, the searchState is an empty string.\n * @providedPropType {array.<{isRefined: boolean, label: string, value: string, isRefined: boolean, noRefinement: boolean}>} items - the list of ranges the NumericMenu can display.\n */\nexport default createConnector({\n  displayName: 'AlgoliaNumericMenu',\n  $$type: 'ais.numericMenu',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.node,\n        start: PropTypes.number,\n        end: PropTypes.number,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const attribute = props.attribute;\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = props.items.map((item) => {\n      const value = stringifyItem(item);\n      return {\n        label: item.label,\n        value,\n        isRefined: value === currentRefinement,\n        noRefinement: results\n          ? itemHasRefinement(getId(props), results, value)\n          : false,\n      };\n    });\n\n    const stats =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetStats(attribute)\n        : null;\n    const refinedItem = find(items, (item) => item.isRefined === true);\n    if (!items.some((item) => item.value === '')) {\n      items.push({\n        value: '',\n        isRefined: refinedItem === undefined,\n        noRefinement: !stats,\n        label: 'All',\n      });\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      currentRefinement,\n      canRefine:\n        transformedItems.length > 0 &&\n        transformedItems.some((item) => item.noRefinement === false),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n    const { start, end } = parseItem(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (typeof start === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '>=',\n        start\n      );\n    }\n    if (typeof end === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '<=',\n        end\n      );\n    }\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const value = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (value !== '') {\n      const { label } = find(\n        props.items,\n        (item) => stringifyItem(item) === value\n      );\n      items.push({\n        label: `${props.attribute}: ${label}`,\n        attribute: props.attribute,\n        currentRefinement: label,\n        value: (nextState) =>\n          refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction refine(props, searchState, nextPage, context) {\n  const id = getId();\n  const nextValue = { [id]: nextPage };\n  const resetPage = false;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\n/**\n * connectPagination connector provides the logic to build a widget that will\n * let the user displays hits corresponding to a certain page.\n * @name connectPagination\n * @kind connector\n * @propType {boolean} [showFirst=true] - Display the first page link.\n * @propType {boolean} [showLast=false] - Display the last page link.\n * @propType {boolean} [showPrevious=true] - Display the previous page link.\n * @propType {boolean} [showNext=true] - Display the next page link.\n * @propType {number} [padding=3] - How many page links to display around the current page.\n * @propType {number} [totalPages=Infinity] - Maximum number of pages to display.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {number} nbPages - the total of existing pages\n * @providedPropType {number} currentRefinement - the page refinement currently applied\n */\nexport default createConnector({\n  displayName: 'AlgoliaPagination',\n  $$type: 'ais.pagination',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    const nbPages = results.nbPages;\n    return {\n      nbPages,\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: nbPages > 1,\n    };\n  },\n\n  refine(props, searchState, nextPage) {\n    return refine(props, searchState, nextPage, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) - 1\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\n\n/**\n * connectPoweredBy connector provides the logic to build a widget that\n * will display a link to algolia.\n * @name connectPoweredBy\n * @kind connector\n * @providedPropType {string} url - the url to redirect to algolia\n */\nexport default createConnector({\n  displayName: 'AlgoliaPoweredBy',\n  $$type: 'ais.poweredBy',\n\n  getProvidedProps() {\n    const hostname =\n      typeof window === 'undefined' || typeof window.location === 'undefined'\n        ? ''\n        : window.location.hostname;\n\n    const url =\n      'https://www.algolia.com/?' +\n      'utm_source=react-instantsearch&' +\n      'utm_medium=website&' +\n      `utm_content=${hostname}&` +\n      'utm_campaign=poweredby';\n\n    return {\n      url,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\n/**\n * connectRange connector provides the logic to create connected\n * components that will give the ability for a user to refine results using\n * a numeric range.\n * @name connectRange\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in “attributes for faceting”\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * The values inside the attribute must be JavaScript numbers (not strings).\n * @propType {string} attribute - Name of the attribute for faceting\n * @propType {{min?: number, max?: number}} [defaultRefinement] - Default searchState of the widget containing the start and the end of the range.\n * @propType {number} [min] - Minimum value. When this isn't set, the minimum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [max] - Maximum value. When this isn't set, the maximum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [precision=0] - Number of digits after decimal point to use.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {number} min - the minimum value available.\n * @providedPropType {number} max - the maximum value available.\n * @providedPropType {number} precision - Number of digits after decimal point to use.\n */\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'range';\n\nfunction getCurrentRange(boundaries, stats, precision) {\n  const pow = Math.pow(10, precision);\n\n  let min;\n  if (typeof boundaries.min === 'number' && isFinite(boundaries.min)) {\n    min = boundaries.min;\n  } else if (typeof stats.min === 'number' && isFinite(stats.min)) {\n    min = stats.min;\n  } else {\n    min = undefined;\n  }\n\n  let max;\n  if (typeof boundaries.max === 'number' && isFinite(boundaries.max)) {\n    max = boundaries.max;\n  } else if (typeof stats.max === 'number' && isFinite(stats.max)) {\n    max = stats.max;\n  } else {\n    max = undefined;\n  }\n\n  return {\n    min: min !== undefined ? Math.floor(min * pow) / pow : min,\n    max: max !== undefined ? Math.ceil(max * pow) / pow : max,\n  };\n}\n\nfunction getCurrentRefinement(props, searchState, currentRange, context) {\n  const { min, max } = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    {}\n  );\n\n  const isFloatPrecision = Boolean(props.precision);\n\n  let nextMin = min;\n  if (typeof nextMin === 'string') {\n    nextMin = isFloatPrecision ? parseFloat(nextMin) : parseInt(nextMin, 10);\n  }\n\n  let nextMax = max;\n  if (typeof nextMax === 'string') {\n    nextMax = isFloatPrecision ? parseFloat(nextMax) : parseInt(nextMax, 10);\n  }\n\n  const refinement = {\n    min: nextMin,\n    max: nextMax,\n  };\n\n  const hasMinBound = props.min !== undefined;\n  const hasMaxBound = props.max !== undefined;\n\n  const hasMinRefinment = refinement.min !== undefined;\n  const hasMaxRefinment = refinement.max !== undefined;\n\n  if (hasMinBound && hasMinRefinment && refinement.min < currentRange.min) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (hasMaxBound && hasMaxRefinment && refinement.max > currentRange.max) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  if (hasMinBound && !hasMinRefinment) {\n    refinement.min = currentRange.min;\n  }\n\n  if (hasMaxBound && !hasMaxRefinment) {\n    refinement.max = currentRange.max;\n  }\n\n  return refinement;\n}\n\nfunction getCurrentRefinementWithRange(refinement, range) {\n  return {\n    min: refinement.min !== undefined ? refinement.min : range.min,\n    max: refinement.max !== undefined ? refinement.max : range.max,\n  };\n}\n\nfunction nextValueForRefinement(hasBound, isReset, range, value) {\n  let next;\n  if (!hasBound && range === value) {\n    next = undefined;\n  } else if (hasBound && isReset) {\n    next = range;\n  } else {\n    next = value;\n  }\n\n  return next;\n}\n\nfunction refine(props, searchState, nextRefinement, currentRange, context) {\n  const { min: nextMin, max: nextMax } = nextRefinement;\n  const { min: currentMinRange, max: currentMaxRange } = currentRange;\n\n  const isMinReset = nextMin === undefined || nextMin === '';\n  const isMaxReset = nextMax === undefined || nextMax === '';\n\n  const nextMinAsNumber = !isMinReset ? parseFloat(nextMin) : undefined;\n  const nextMaxAsNumber = !isMaxReset ? parseFloat(nextMax) : undefined;\n\n  const isNextMinValid = isMinReset || isFinite(nextMinAsNumber);\n  const isNextMaxValid = isMaxReset || isFinite(nextMaxAsNumber);\n\n  if (!isNextMinValid || !isNextMaxValid) {\n    throw Error(\"You can't provide non finite values to the range connector.\");\n  }\n\n  if (nextMinAsNumber < currentMinRange) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (nextMaxAsNumber > currentMaxRange) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  const id = getId(props);\n  const resetPage = true;\n  const nextValue = {\n    [id]: {\n      min: nextValueForRefinement(\n        props.min !== undefined,\n        isMinReset,\n        currentMinRange,\n        nextMinAsNumber\n      ),\n      max: nextValueForRefinement(\n        props.max !== undefined,\n        isMaxReset,\n        currentMaxRange,\n        nextMaxAsNumber\n      ),\n    },\n  };\n\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRange',\n  $$type: 'ais.range',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    defaultRefinement: PropTypes.shape({\n      min: PropTypes.number,\n      max: PropTypes.number,\n    }),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    precision: PropTypes.number,\n    header: PropTypes.node,\n    footer: PropTypes.node,\n  },\n\n  defaultProps: {\n    precision: 0,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, precision, min: minBound, max: maxBound } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const hasFacet = results && results.getFacetByName(attribute);\n    const stats = hasFacet ? results.getFacetStats(attribute) || {} : {};\n    const facetValues = hasFacet ? results.getFacetValues(attribute) : [];\n\n    const count = facetValues.map((v) => ({\n      value: v.name,\n      count: v.count,\n    }));\n\n    const { min: rangeMin, max: rangeMax } = getCurrentRange(\n      { min: minBound, max: maxBound },\n      stats,\n      precision\n    );\n\n    // The searchState is not always in sync with the helper state. For example\n    // when we set boundaries on the first render the searchState don't have\n    // the correct refinement. If this behavior change in the upcoming version\n    // we could store the range inside the searchState instead of rely on `this`.\n    this._currentRange = {\n      min: rangeMin,\n      max: rangeMax,\n    };\n\n    const currentRefinement = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    return {\n      min: rangeMin,\n      max: rangeMax,\n      canRefine: count.length > 0,\n      currentRefinement: getCurrentRefinementWithRange(\n        currentRefinement,\n        this._currentRange\n      ),\n      count,\n      precision,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, this._currentRange, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(params, props, searchState) {\n    const { attribute } = props;\n    const { min, max } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    params = params.addDisjunctiveFacet(attribute);\n\n    if (min !== undefined) {\n      params = params.addNumericRefinement(attribute, '>=', min);\n    }\n\n    if (max !== undefined) {\n      params = params.addNumericRefinement(attribute, '<=', max);\n    }\n\n    return params;\n  },\n\n  getMetadata(props, searchState) {\n    const { min: minRange, max: maxRange } = this._currentRange;\n    const { min: minValue, max: maxValue } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    const items = [];\n    const hasMin = minValue !== undefined;\n    const hasMax = maxValue !== undefined;\n    const shouldDisplayMinLabel = hasMin && minValue !== minRange;\n    const shouldDisplayMaxLabel = hasMax && maxValue !== maxRange;\n\n    if (shouldDisplayMinLabel || shouldDisplayMaxLabel) {\n      const fragments = [\n        hasMin ? `${minValue} <= ` : '',\n        props.attribute,\n        hasMax ? ` <= ${maxValue}` : '',\n      ];\n\n      items.push({\n        label: fragments.join(''),\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, {}, this._currentRange, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n        currentRefinement: getCurrentRefinementWithRange(\n          { min: minValue, max: maxValue },\n          { min: minRange, max: maxRange }\n        ),\n      });\n    }\n\n    return {\n      id: getId(props),\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nconst namespace = 'refinementList';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    []\n  );\n\n  if (typeof currentRefinement !== 'string') {\n    return currentRefinement;\n  }\n\n  if (currentRefinement) {\n    return [currentRefinement];\n  }\n\n  return [];\n}\n\nfunction getValue(value, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  const isAnewValue = currentRefinement.indexOf(value) === -1;\n  const nextRefinement = isAnewValue\n    ? currentRefinement.concat([value]) // cannot use .push(), it mutates\n    : currentRefinement.filter((selectedValue) => selectedValue !== value); // cannot use .splice(), it mutates\n  return nextRefinement;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  // Setting the value to an empty string ensures that it is persisted in\n  // the URL as an empty value.\n  // This is necessary in the case where `defaultRefinement` contains one\n  // item and we try to deselect it. `nextSelected` would be an empty array,\n  // which would not be persisted to the URL.\n  // {foo: ['bar']} => \"foo[0]=bar\"\n  // {foo: []} => \"\"\n  const nextValue = { [id]: nextRefinement.length > 0 ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n/**\n * connectRefinementList connector provides the logic to build a widget that will\n * give the user the ability to choose multiple values for a specific facet.\n * @name connectRefinementList\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [searchable=false] - allow search inside values\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of displayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string[]} defaultRefinement - the values of the items selected by default. The searchState of this widget takes the form of a list of `string`s, which correspond to the values of all selected refinements. However, when there are no refinements selected, the value of the searchState is an empty string.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the RefinementList can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n * @providedPropType {boolean} canRefine - a boolean that says whether you can refine\n */\n\nconst sortBy = ['isRefined', 'count:desc', 'name:asc'];\nexport default createConnector({\n  displayName: 'AlgoliaRefinementList',\n  $$type: 'ais.refinementList',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    operator: PropTypes.oneOf(['and', 'or']),\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n    searchable: PropTypes.bool,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    operator: 'or',\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    metadata,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine,\n        isFromSearch,\n        searchable,\n      };\n    }\n\n    const items = isFromSearch\n      ? searchForFacetValuesResults[attribute].map((v) => ({\n          label: v.value,\n          value: getValue(v.escapedValue, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          _highlightResult: { label: { value: v.highlighted } },\n          count: v.count,\n          isRefined: v.isRefined,\n        }))\n      : results\n          .getFacetValues(attribute, { sortBy, facetOrdering })\n          .map((v) => ({\n            label: v.name,\n            value: getValue(v.escapedValue, props, searchState, {\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            }),\n            count: v.count,\n            isRefined: v.isRefined,\n          }));\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, operator } = props;\n\n    const addKey = operator === 'and' ? 'addFacet' : 'addDisjunctiveFacet';\n    const addRefinementKey = `${addKey}Refinement`;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters[addKey](attribute);\n\n    return getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    }).reduce(\n      (res, val) => res[addRefinementKey](attribute, val),\n      searchParameters\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    return {\n      id,\n      index: getIndexId(context),\n      items:\n        getCurrentRefinement(props, searchState, context).length > 0\n          ? [\n              {\n                attribute: props.attribute,\n                label: `${props.attribute}: `,\n                currentRefinement: getCurrentRefinement(\n                  props,\n                  searchState,\n                  context\n                ),\n                value: (nextState) => refine(props, nextState, [], context),\n                items: getCurrentRefinement(props, searchState, context).map(\n                  (item) => ({\n                    label: unescapeFacetValue(`${item}`),\n                    value: (nextState) => {\n                      const nextSelectedItems = getCurrentRefinement(\n                        props,\n                        nextState,\n                        context\n                      ).filter((other) => other !== item);\n                      return refine(\n                        props,\n                        searchState,\n                        nextSelectedItems,\n                        context\n                      );\n                    },\n                  })\n                ),\n              },\n            ]\n          : [],\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  hasMultipleIndices,\n  getIndexId,\n} from '../core/indexUtils';\nimport { shallowEqual, omit } from '../core/utils';\n\n/**\n * connectScrollTo connector provides the logic to build a widget that will\n * let the page scroll to a certain point.\n * @name connectScrollTo\n * @kind connector\n * @propType {string} [scrollOn=\"page\"] - Widget searchState key on which to listen for changes, default to the pagination widget.\n * @providedPropType {any} value - the current refinement applied to the widget listened by scrollTo\n * @providedPropType {boolean} hasNotChanged - indicates whether the refinement came from the scrollOn argument (for instance page by default)\n */\nexport default createConnector({\n  displayName: 'AlgoliaScrollTo',\n  $$type: 'ais.scrollTo',\n\n  propTypes: {\n    scrollOn: PropTypes.string,\n  },\n\n  defaultProps: {\n    scrollOn: 'page',\n  },\n\n  getProvidedProps(props, searchState) {\n    const id = props.scrollOn;\n    const value = getCurrentRefinementValue(\n      props,\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      id,\n      null\n    );\n\n    if (!this._prevSearchState) {\n      this._prevSearchState = {};\n    }\n\n    // Get the subpart of the state that interest us\n    if (\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    ) {\n      searchState = searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : {};\n    }\n\n    // if there is a change in the app that has been triggered by another element\n    // than \"props.scrollOn (id) or the Configure widget, we need to keep track of\n    // the search state to know if there's a change in the app that was not triggered\n    // by the props.scrollOn (id) or the Configure widget. This is useful when\n    // using ScrollTo in combination of Pagination. As pagination can be change\n    // by every widget, we want to scroll only if it cames from the pagination\n    // widget itself. We also remove the configure key from the search state to\n    // do this comparison because for now configure values are not present in the\n    // search state before a first refinement has been made and will false the results.\n    // See: https://github.com/algolia/react-instantsearch/issues/164\n    const cleanedSearchState = omit(searchState, ['configure', id]);\n\n    const hasNotChanged = shallowEqual(\n      this._prevSearchState,\n      cleanedSearchState\n    );\n\n    this._prevSearchState = cleanedSearchState;\n\n    return { value, hasNotChanged };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  $$type: 'ais.searchBox',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'relevancyStrictness';\n}\n\nfunction getCurrentRefinement(\n  props: ConnectedProps<any>,\n  searchState,\n  context\n) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id\n  );\n\n  return currentRefinement;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRelevantSort',\n  $$type: 'ais.relevantSort',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        isVirtualReplica: false,\n        isRelevantSorted: false,\n      };\n    }\n\n    return {\n      isVirtualReplica: results.appliedRelevancyStrictness !== undefined,\n      isRelevantSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameter(\n      'relevancyStrictness',\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const nextValue = {\n      [getId()]: nextRefinement,\n    };\n    const resetPage = true;\n\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return null;\n}\n\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  $$type: 'ais.sortBy',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * The `connectStateResults` connector provides a way to access the `searchState` and the `searchResults`\n * of InstantSearch.\n * For instance this connector allows you to create results/noResults or query/noQuery pages.\n * @name connectStateResults\n * @kind connector\n * @providedPropType {object} searchState - The search state of the instant search component. <br/><br/> See: [Search state structure](https://community.algolia.com/react-instantsearch/guide/Search_state.html)\n * @providedPropType {object} searchResults - The search results. <br/><br/> In case of multiple indices: if used under `<Index>`, results will be those of the corresponding index otherwise it'll be those of the root index  See: [Search results structure](https://community.algolia.com/algoliasearch-helper-js/reference.html#searchresults)\n * @providedPropType {object} allSearchResults - In case of multiple indices you can retrieve all the results\n * @providedPropType {string} error - If the search failed, the error will be logged here.\n * @providedPropType {boolean} searching - If there is a search in progress.\n * @providedPropType {boolean} isSearchStalled - Flag that indicates if React InstantSearch has detected that searches are stalled.\n * @providedPropType {boolean} searchingForFacetValues - If there is a search in a list in progress.\n * @providedPropType {object} props - component props.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectStateResults } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const Content = connectStateResults(({ searchState, searchResults }) => {\n *   const hasResults = searchResults && searchResults.nbHits !== 0;\n *\n *    return (\n *      <div>\n *        <div hidden={!hasResults}>\n *          <Hits />\n *        </div>\n *        <div hidden={hasResults}>\n *          <div>No results has been found for {searchState.query}</div>\n *        </div>\n *      </div>\n *    );\n * });\n *\n * const App = () => (\n *   <InstantSearch\n *      searchClient={searchClient}\n *      indexName=\"instant_search\"\n *    >\n *      <SearchBox />\n *      <Content />\n *    </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaStateResults',\n  $$type: 'ais.stateResults',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    return {\n      searchState,\n      searchResults: results,\n      allSearchResults: searchResults.results,\n      searching: searchResults.searching,\n      isSearchStalled: searchResults.isSearchStalled,\n      error: searchResults.error,\n      searchingForFacetValues: searchResults.searchingForFacetValues,\n      props,\n    };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * connectStats connector provides the logic to build a widget that will\n *  displays algolia search statistics (hits number and processing time).\n * @name connectStats\n * @kind connector\n * @providedPropType {number} nbHits - number of hits returned by Algolia.\n * @providedPropType {number} nbSortedHits - number of sorted hits returned by Algolia.\n * @providedPropType {number} processingTimeMS - the time in ms took by Algolia to search for results.\n */\nexport default createConnector({\n  displayName: 'AlgoliaStats',\n  $$type: 'ais.stats',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    return {\n      areHitsSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0 &&\n        results.nbHits !== results.nbSortedHits,\n      nbHits: results.nbHits,\n      nbSortedHits: results.nbSortedHits,\n      processingTimeMS: results.processingTimeMS,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport { find } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  getResults,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'toggle';\n\nconst falsyStrings = ['0', 'false', 'null', 'undefined'];\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    false\n  );\n\n  if (falsyStrings.indexOf(currentRefinement) !== -1) {\n    return false;\n  }\n\n  return Boolean(currentRefinement);\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : false };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectToggleRefinement connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggleRefinement\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attribute - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attribute`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n * @providedPropType {object} count - an object that contains the count for `checked` and `unchecked` state\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n */\nexport default createConnector({\n  displayName: 'AlgoliaToggle',\n  $$type: 'ais.toggle',\n\n  propTypes: {\n    label: PropTypes.string.isRequired,\n    attribute: PropTypes.string.isRequired,\n    value: PropTypes.any.isRequired,\n    filter: PropTypes.func,\n    defaultRefinement: PropTypes.bool,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, value } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const allFacetValues =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetValues(attribute)\n        : null;\n\n    const facetValue =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? find(allFacetValues, (item) => item.name === value.toString())\n        : null;\n\n    const facetValueCount = facetValue && facetValue.count;\n    const allFacetValuesCount =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? allFacetValues.reduce((acc, item) => acc + item.count, 0)\n        : null;\n\n    const canRefine = currentRefinement\n      ? allFacetValuesCount !== null && allFacetValuesCount > 0\n      : facetValueCount !== null && facetValueCount > 0;\n\n    const count = {\n      checked: allFacetValuesCount,\n      unchecked: facetValueCount,\n    };\n\n    return {\n      currentRefinement,\n      canRefine,\n      count,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, value, filter } = props;\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    let nextSearchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (checked) {\n      nextSearchParameters = nextSearchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        value\n      );\n\n      if (filter) {\n        nextSearchParameters = filter(nextSearchParameters);\n      }\n    }\n\n    return nextSearchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, false, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\ntype Results = { index: string };\ntype Hit = { objectID: string; __position: number; __queryID: string };\n\ntype InsightsClient = (\n  method: InsightsClientMethod,\n  payload: InsightsClientPayload\n) => void;\n\ntype InsightsClientMethod =\n  | 'clickedObjectIDsAfterSearch'\n  | 'convertedObjectIDsAfterSearch';\n\ntype InsightsClientPayload = {\n  index: string;\n  queryID: string;\n  eventName: string;\n  objectIDs: string[];\n  positions?: number[];\n};\n\nfunction inferPayload({\n  method,\n  results,\n  currentHit,\n}: {\n  method: InsightsClientMethod;\n  results: Results;\n  currentHit: Hit;\n}): Omit<InsightsClientPayload, 'eventName'> {\n  const { index } = results;\n  const queryID = currentHit.__queryID;\n  const objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(`Could not infer \\`queryID\\`. Ensure \\`clickAnalytics: true\\` was added with the Configure widget.\nSee: https://alg.li/VpPpLt`);\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch': {\n      const positions = [currentHit.__position];\n      return { index, queryID, objectIDs, positions };\n    }\n\n    case 'convertedObjectIDsAfterSearch':\n      return { index, queryID, objectIDs };\n\n    default:\n      throw new Error(\n        `Unsupported method \"${method}\" passed to the insights function. The supported methods are: \"clickedObjectIDsAfterSearch\", \"convertedObjectIDsAfterSearch\".`\n      );\n  }\n}\n\nconst wrapInsightsClient =\n  (aa: InsightsClient, results: Results, currentHit: Hit) =>\n  (method: InsightsClientMethod, payload: Partial<InsightsClientPayload>) => {\n    if (typeof aa !== 'function') {\n      throw new TypeError(`Expected insightsClient to be a Function`);\n    }\n    const inferredPayload = inferPayload({ method, results, currentHit });\n    aa(method, { ...inferredPayload, ...payload } as any);\n  };\n\nexport default (insightsClient: InsightsClient) =>\n  createConnector({\n    displayName: 'AlgoliaInsights',\n    $$type: 'ais.insights',\n\n    getProvidedProps(props, _, searchResults) {\n      const results: Results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      });\n\n      const insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return { insights };\n    },\n  });\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getAdditionalId() {\n  return 'additionalVoiceParameters';\n}\n\nfunction getCurrentRefinementQuery(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getCurrentRefinementAdditional(props, searchState, context) {\n  const id = getAdditionalId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return {};\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const voiceParams = getAdditionalId();\n  const queryLanguages = props.language\n    ? { queryLanguages: [props.language.split('-')[0]] }\n    : {};\n  const additionalQueryParameters =\n    typeof props.additionalQueryParameters === 'function'\n      ? {\n          ignorePlurals: true,\n          removeStopWords: true,\n          optionalWords: nextRefinement,\n          ...props.additionalQueryParameters({ query: nextRefinement }),\n        }\n      : {};\n  const nextValue = {\n    [id]: nextRefinement,\n    [voiceParams]: {\n      ...queryLanguages,\n      ...additionalQueryParameters,\n    },\n  };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  const interimState = cleanUpValue(searchState, context, getId());\n  return cleanUpValue(interimState, context, getAdditionalId());\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaVoiceSearch',\n  $$type: 'ais.voiceSearch',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinementQuery(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const query = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const additionalParams = getCurrentRefinementAdditional(\n      props,\n      searchState,\n      {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }\n    );\n\n    return searchParameters\n      .setQuery(query)\n      .setQueryParameters(additionalParams);\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId();\n    const currentRefinement = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","// Core\nexport { default as createConnector } from './core/createConnector';\nexport {\n  instantSearchContext,\n  InstantSearchConsumer,\n  InstantSearchProvider,\n} from './core/context';\n\n// Utils\nexport { HIGHLIGHT_TAGS } from './core/highlight';\nexport { default as version } from './core/version';\nexport { default as translatable } from './core/translatable';\n\n// Widgets\nexport { default as Configure } from './widgets/Configure';\nexport { default as ExperimentalConfigureRelatedItems } from './widgets/ConfigureRelatedItems';\n\nimport { default as DynamicWidgets } from './widgets/DynamicWidgets';\n/** @deprecated use DynamicWidgets */\nconst ExperimentalDynamicWidgets = DynamicWidgets;\nexport { ExperimentalDynamicWidgets, DynamicWidgets };\n\nexport { default as QueryRuleContext } from './widgets/QueryRuleContext';\nexport { default as Index } from './widgets/Index';\nexport { default as InstantSearch } from './widgets/InstantSearch';\n\n// Connectors\nexport { default as connectAutoComplete } from './connectors/connectAutoComplete';\nexport { default as connectBreadcrumb } from './connectors/connectBreadcrumb';\nexport { default as connectConfigure } from './connectors/connectConfigure';\nexport { default as EXPERIMENTAL_connectConfigureRelatedItems } from './connectors/connectConfigureRelatedItems';\nexport { default as connectCurrentRefinements } from './connectors/connectCurrentRefinements';\n\nimport { default as connectDynamicWidgets } from './connectors/connectDynamicWidgets';\n/** @deprecated use connectDynamicWidgets */\nconst EXPERIMENTAL_connectDynamicWidgets = connectDynamicWidgets;\nexport { connectDynamicWidgets, EXPERIMENTAL_connectDynamicWidgets };\n\nexport { default as connectGeoSearch } from './connectors/connectGeoSearch';\nexport { default as connectHierarchicalMenu } from './connectors/connectHierarchicalMenu';\nexport { default as connectHighlight } from './connectors/connectHighlight';\nexport { default as connectHits } from './connectors/connectHits';\nexport { default as connectHitsPerPage } from './connectors/connectHitsPerPage';\nexport { default as connectInfiniteHits } from './connectors/connectInfiniteHits';\nexport { default as connectMenu } from './connectors/connectMenu';\nexport { default as connectNumericMenu } from './connectors/connectNumericMenu';\nexport { default as connectPagination } from './connectors/connectPagination';\nexport { default as connectPoweredBy } from './connectors/connectPoweredBy';\nexport { default as connectQueryRules } from './connectors/connectQueryRules';\nexport { default as connectRange } from './connectors/connectRange';\nexport { default as connectRefinementList } from './connectors/connectRefinementList';\nexport { default as connectScrollTo } from './connectors/connectScrollTo';\nexport { default as connectSearchBox } from './connectors/connectSearchBox';\nexport { default as connectRelevantSort } from './connectors/connectRelevantSort';\nexport { default as connectSortBy } from './connectors/connectSortBy';\nexport { default as connectStateResults } from './connectors/connectStateResults';\nexport { default as connectStats } from './connectors/connectStats';\nexport { default as connectToggleRefinement } from './connectors/connectToggleRefinement';\nexport { default as connectHitInsights } from './connectors/connectHitInsights';\nexport { default as connectVoiceSearch } from './connectors/connectVoiceSearch';\n\n// Types\nexport * from './types';\n","import React, { Component } from 'react';\n\nconst withKeysPropType = (keys) => (props, propName, componentName) => {\n  const prop = props[propName];\n  if (prop) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(prop)) {\n      if (keys.indexOf(key) === -1) {\n        return new Error(\n          `Unknown \\`${propName}\\` key \\`${key}\\`. Check the render method ` +\n            `of \\`${componentName}\\`.`\n        );\n      }\n    }\n  }\n  return undefined;\n};\n\nexport default function translatable(defaultTranslations) {\n  return (Composed) => {\n    class Translatable extends Component {\n      translate = (key, ...params) => {\n        const { translations } = this.props;\n\n        const translation =\n          translations && translations.hasOwnProperty(key)\n            ? translations[key]\n            : defaultTranslations[key];\n\n        if (typeof translation === 'function') {\n          return translation(...params);\n        }\n\n        return translation;\n      };\n\n      render() {\n        return <Composed translate={this.translate} {...this.props} />;\n      }\n    }\n\n    const name = Composed.displayName || Composed.name || 'UnknownComponent';\n\n    Translatable.displayName = `Translatable(${name})`;\n\n    Translatable.propTypes = {\n      translations: withKeysPropType(Object.keys(defaultTranslations)),\n    };\n\n    return Translatable;\n  };\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","value","_typeof","obj","Symbol","iterator","_possibleConstructorReturn","assertThisInitialized","_getPrototypeOf","getPrototypeOf","_defineProperty","hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","a","b","equal","it","Array","isArray","size","entries","next","done","has","get","isView","RegExp","flags","valueOf","toString","$$typeof","error","message","match","console","warn","shallowEqual","objA","objB","keysA","keysB","hasOwn","getDisplayName","Component","displayName","name","resolved","Promise","resolve","defer","f","then","removeEmptyKey","forEach","objectHasKeys","addAbsolutePositions","hits","hitsPerPage","page","map","hit","index","__position","addQueryID","queryID","__queryID","find","array","comparator","object","omit","getPropertyByPath","path","replace","split","reduce","current","undefined","unescapeFacetValue","instantSearchContext","createContext","onInternalStateUpdate","createHrefForState","onSearchForFacetValues","onSearchStateChange","onSearchParameters","store","widgetsManager","mainTargetedIndex","InstantSearchConsumer","Consumer","InstantSearchProvider","Provider","IndexConsumer","IndexProvider","createConnectorWithContext","connectorDesc","Composed","additionalWidgetProperties","Connector","Error","isWidget","getSearchParameters","getMetadata","transitionState","providedProps","_this","getProvidedProps","args","contextValue","refine","getState","widgets","searchForFacetValues","bind","ais","multiIndexContext","indexContextValue","unsubscribe","subscribe","_this2","isUnmounting","setState","unregisterWidget","registerWidget","nextProps","nextState","shouldComponentUpdate","state","propsEqual","prevProps","isEqual","update","cleanUp","results","resultsFacetValues","searching","searchingForFacetValues","isSearchStalled","metadata","searchResults","searchParameters","nextWidgetsState","prevWidgetsState","refineProps","createURL","searchForFacetValuesProps","searchForItems","React","$$type","$$widgetType","defaultProps","createConnectorWithoutContext","HIGHLIGHT_TAGS","highlightPreTag","highlightPostTag","parseHighlightedAttribute","preTag","postTag","highlightedValue","splitByPreTag","firstValue","shift","elements","isHighlighted","push","splitByPostTag","getIndexId","context","hasMultipleIndices","targetedIndex","getResults","indexId","refineValue","searchState","nextRefinement","resetPage","namespace","indices","getNamespaceAndAttributeName","id","parts","attributeName","getCurrentRefinementValue","defaultValue","multiIndex","defaultRefinement","cleanUpValue","Boolean","attribute","indexSearchState","cleanUpValueWithMultiIndex","cleanUpValueWithSingleIndex","createConnector","children","items","setQueryParameters","prevSearchState","nextSearchState","propKeys","nonPresentKeys","_props","filter","prop","subState","configureState","acc","item","connectConfigure","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","arrayLikeToArray","n","slice","from","test","_toConsumableArray","arrayWithoutHoles","iter","iterableToArray","unsupportedIterableToArray","nonIterableSpread","isObjectOrArrayOrFunction","_merge","sourceVal","targetVal","l","reduceRight","arr1","valToNumber","v","parseFloat","userToken","lib","addRefinement","refinementList","isRefined","valueAsString","facetRefinement","concat","mod","defaultsPure","removeRefinement","clearRefinement","toggleRefinement","refinementType","hasChanged","newRefinementList","memo","values","facetList","refinementValue","containsRefinements","refinementValueAsString","isEqualNumericRefinement","every","el","SearchParameters","newParameters","params","_parseNumbers","isValidUserToken","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","paramName","isKeyKnown","PARAMETERS","isValueDefined","partialState","numbers","k","parsedValue","isNaN","insideBoundingBox","geoRect","operators","operator","parsedValues","vPrime","merge","make","facet","rootPath","currentRefinement","getHierarchicalRefinement","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","numericFilters","patch","_clearNumericRefinements","RefinementList","clearTags","setIndex","setQuery","newQuery","query","setPage","newPage","setFacets","setDisjunctiveFacets","setHitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","isNumericRefined","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","paramValue","op","val","getNumericRefinements","getNumericRefinement","newNumericRefinements","operatorList","outValues","addFacet","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","lastIndexOf","addHierarchicalFacetRefinement","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","searchedValue","isAttributeValueDefined","currentValue","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","intersection","getRefinedHierarchicalFacets","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","parameter","nextWithNumbers","previousPlainObject","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","part","trim","JSON","stringify","compareAscending","other","valIsDefined","valIsNull","othIsDefined","othIsNull","collection","iteratees","orders","result","criteria","iteratee","sort","res","defaults","defaultInstructions","out","sortInstruction","matchingDefault","defaultInstruction","String","hierarchicalFacetResult","hierarchicalFacetIndex","hierarchicalSeparator","hierarchicalRootPath","hierarchicalShowParentLevel","hierarchicalFacetRefinement","prepareHierarchicalFacetSortBy","rootExhaustive","facetResult","exhaustive","generateTreeFn","hierarchicalTree","currentHierarchicalLevel","parent","level","data","subtree","picked","facetValue","tuple","parentPath","orderBy","facetCount","escapedValue","escapeFacetValue","count","fv","getIndices","attributes","idx","assignFacetStats","dest","facetStats","stats","SearchResults","options","mainSubResponse","_rawResults","processingTimeMS","sum","facetsIndices","disjunctiveFacetsIndices","nextDisjunctiveResult","mainFacets","facetKey","hierarchicalAttributeName","facetValueObject","facetIndex","idxAttributeName","findIndex","exhaustiveFacetsCount","position","isFacetDisjunctive","isFacetConjunctive","facets_stats","compact","disjunctiveFacet","dfacet","facetResults","attributeIndex","dataFromMainRequest","refinedFacet","defaultData","root","excludes","generateHierarchicalTree","_state","getFacetStatsIfAvailable","getRefinement","type","resultsFacets","getFacetByName","predicate","DEFAULT_SORT","getFacetValues","opts","facetValues","isExcluded","extractNormalizedFacetValues","facetOrdering","recSort","sortFn","node","names","childNode","sortedChildren","renderingContent","orderedFacets","remainingFacets","reverseOrder","order","ordering","sortRemainingBy","sortViaFacetOrdering","formatSort","getFacetStats","getRefinements","facetDeclaration","rootFacet","intermediateFacet","newFacet","numericValue","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","emit","er","handler","listeners","err","on","addListener","listener","m","newListener","warned","trace","once","fired","g","removeListener","list","splice","removeAllListeners","listenerCount","evlistener","emitter","ctor","superCtor","DerivedHelper","mainHelper","fn","main","lastResults","detach","detachDerivedHelper","getModifiedState","sortObject","localeCompare","curr","requestBuilder","_getQueries","queries","indexName","_getHitsSearchParams","_getDisjunctiveFacetSearchParams","filtersMap","segment","join","facetFilters","_getHitsHierarchicalFacetsAttributes","_getFacetFilters","_getNumericFilters","_getTagFilters","additionalParams","hierarchicalRootLevel","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","vs","orFilters","attributeToRefine","attributesIndex","allAttributes","hierarchicalRefinement","newAttributes","rootLevel","parentLevel","getSearchForFacetQuery","maxFacetHits","stateForSearchForFacetValues","searchForFacetSearchParameters","facetQuery","require$$0","AlgoliaSearchHelper","client","addAlgoliaAgent","setClient","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","setCurrentPage","_change","isPageReset","getCurrentPage","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","searchOnce","cb","tempState","content","_originalResponse","e","catch","findAnswers","derivedHelper","derivedState","attributesForPrediction","nbHits","errorMessage","initIndex","queryLanguages","userState","clientHasSFFV","clientHasInitIndex","isDisjunctive","algoliaQuery","searchForFacetValuesPromise","response","facetHits","q","addDisjunctiveRefine","addRefine","addFacetExclusion","addExclude","addTag","removeDisjunctiveRefine","removeRefine","removeFacetExclusion","removeExclude","removeTag","toggleFacetExclusion","toggleExclude","toggleRefine","toggleTag","nextPage","previousPage","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","isDisjunctiveRefined","hasTag","hasTagRefinements","getIndex","getPage","getTags","r","states","mainQueries","queriesCount","helper","derivedQueries","derivedStateQueries","queryId","_dispatchAlgoliaResponse","_dispatchAlgoliaError","s","specificResults","formattedResponse","containsRefinement","_hasDisjunctiveRefinements","disjunctiveRefinements","event","clearCache","newClient","getClient","derive","pos","hasPendingRequests","algoliasearchHelper","version","createOptionalFilter","attributeValue","attributeScore","getSearchParametersFromProps","optionalFilters","matchingPatterns","attributePattern","score","attributeSubValue","transformSearchParameters","sumOrFiltersScores","objectID","x","_prevSearchState","searchParametersKeys","_searchParameters","global","window","setTimeout","clearTimeout","performance","now","mozNow","msNow","oNow","webkitNow","for","c","d","h","w","y","z","u","A","module","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","ReactPropTypes","isRequired","bigint","bool","func","number","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$2","ConfigureRelatedItems","propTypes","connectConfigureRelatedItems","transformItems","maxValuesPerFacet","_searchState","attributesToRender","facetOrder","Math","max","getAttribute","Children","only","connectDynamicWidgets","fallbackComponent","Fallback","child","set","Fragment","widgetKey","widgetState","rangeKey","getWidgetRefinements","transformRuleContexts","ruleContexts","trackedFilters","_1","canRefine","userData","transformedItems","newRuleContexts","facetRefinements","trackedFacetValues","getTrackedFacetValues","includes","initialRuleContexts","nextRuleContexts","connectQueryRules","getIndexContext","Index","indexContext","addAlgoliaAgents","searchClient","ReactVersion","isMultiIndexContext","widget","isTargetedIndexEqualIndex","isIndexWidget","isIndexWidgetEqualIndex","sortIndexWidgetsFirst","firstWidget","secondWidget","isFirstWidgetIndex","isSecondWidgetIndex","serializeQueryParameters","format","encodeURIComponent","encode","createInstantSearchManager","initialState","resultsState","stalledSearchDelay","stalledSearchTimer","handleSearchSuccess","handleSearchError","searchCounter","skip","initialSearchParameters","onWidgetsUpdate","scheduled","scheduleUpdate","getWidgets","createWidgetsManager","transporter","_cacheHydrated","_useCache","baseMethod","requests","methodArgs","requestsWithSerializedParams","request","responsesCache","method","rawResults","cache","hydrateSearchClientWithMultiIndexRequest","hydrateSearchClientWithSingleIndexRequest","hydrateSearchClient","datum","nestedItem","_internalIndexId","hydrateResultsState","sharedParameters","mainParameters","targetedIndexEqualMainIndex","subIndexEqualMainIndex","derivedIndices","targetedIndexNotEqualMainIndex","subIndexNotEqualMainIndex","derivedParameters","isDerivedHelpersEmpty","nextIsSearchStalled","getWidgetsIds","meta","maxFacetHitsWithinRange","min","onExternalStateUpdate","updateClient","updateIndex","newIndex","skipSearch","injectMetadata","payloadContainer","document","createElement","refNode","querySelector","internalProps","widgetsPayload","payload","_connectorDesc","ua","userAgent","_ua","appendChild","isControlled","InstantSearch","instantSearchManager","onWidgetsInternalStateUpdate","prevIsControlled","refresh","navigator","getKnownKeys","widgetsCollector","prevState","nextIsControlled","previousSearchState","getCurrentRefinement","getId","some","transformValue","label","clearsQuery","clear","currentRefinementToString","northEast","lat","lng","southWest","latLngRegExp","stringToPosition","pattern","nextValue","currentRefinementFromSearchState","currentRefinementFromSearchParameters","currentPositionFromSearchState","propsWithoutDefaultRefinement","aroundLatLng","configureAroundLatLng","getCurrentPosition","currentPositionFromSearchParameters","_","_geoloc","isRefinedWithMap","showMore","limit","showMoreLimit","itemsLimit","truncate","rootAttribute","highlight","highlightProperty","highlightObject","parseAlgoliaHit","parseInt","getStateWithoutPage","hasPrevious","hasMore","refinePrevious","refineNext","cachedHits","cachedState","nbPages","_cache","read","write","hitsWithPositionsAndQueryID","firstReceivedPage","Number","lastReceivedPage","getValue","getLimit","defaultSortBy","searchable","searchForFacetValuesResults","isFromSearch","_highlightResult","highlighted","_slicedToArray","arrayWithHoles","_i","_s","_e","_arr","_n","_d","iterableToArrayLimit","nonIterableRest","stringifyItem","start","end","range","noRefinement","NEGATIVE_INFINITY","POSITIVE_INFINITY","refinedItem","startStr","endStr","parseItem","hostname","url","currentRange","isFloatPrecision","precision","nextMin","nextMax","hasMinBound","hasMaxBound","hasMinRefinment","hasMaxRefinment","getCurrentRefinementWithRange","nextValueForRefinement","hasBound","isReset","currentMinRange","currentMaxRange","isMinReset","isMaxReset","nextMinAsNumber","nextMaxAsNumber","isNextMinValid","isFinite","isNextMaxValid","header","footer","boundaries","pow","minBound","maxBound","hasFacet","floor","ceil","rangeMin","rangeMax","_currentRange","minRange","maxRange","minValue","maxValue","hasMin","hasMax","fragments","selectedValue","addKey","addRefinementKey","nextSelectedItems","scrollOn","cleanedSearchState","hasNotChanged","isVirtualReplica","appliedRelevancyStrictness","isRelevantSorted","selectedIndex","allSearchResults","areHitsSorted","nbSortedHits","falsyStrings","allFacetValues","facetValueCount","allFacetValuesCount","checked","unchecked","nextSearchParameters","wrapInsightsClient","aa","currentHit","inferredPayload","objectIDs","positions","inferPayload","getCurrentRefinementQuery","language","additionalQueryParameters","ignorePlurals","removeStopWords","optionalWords","ExperimentalDynamicWidgets","DynamicWidgets","EXPERIMENTAL_connectDynamicWidgets","inferredIndexId","insightsClient","insights","defaultTranslations","Translatable","translations","translation","translate"],"mappings":"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"}