{"version":3,"file":"ReactInstantSearchCore.min.js","sources":["../../../../node_modules/@babel/runtime/helpers/esm/extends.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../../../../node_modules/@babel/runtime/helpers/esm/inherits.js","../../../../node_modules/@babel/runtime/helpers/esm/typeof.js","../../../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/react-fast-compare/index.js","../../src/core/utils.ts","../../src/core/context.ts","../../src/core/createConnector.tsx","../../src/core/highlight.js","../../src/core/version.js","../../src/core/indexUtils.js","../../src/connectors/connectConfigure.js","../../src/widgets/Configure.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../../node_modules/algoliasearch-helper/src/functions/merge.js","../../../../node_modules/algoliasearch-helper/src/functions/defaultsPure.js","../../../../node_modules/algoliasearch-helper/src/functions/intersection.js","../../../../node_modules/algoliasearch-helper/src/functions/find.js","../../../../node_modules/algoliasearch-helper/src/functions/valToNumber.js","../../../../node_modules/algoliasearch-helper/src/functions/omit.js","../../../../node_modules/algoliasearch-helper/src/functions/objectHasKeys.js","../../../../node_modules/algoliasearch-helper/src/utils/isValidUserToken.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/index.js","../../../../node_modules/algoliasearch-helper/src/functions/orderBy.js","../../../../node_modules/algoliasearch-helper/src/functions/compact.js","../../../../node_modules/algoliasearch-helper/src/functions/findIndex.js","../../../../node_modules/algoliasearch-helper/src/functions/formatSort.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/index.js","../../../../node_modules/@algolia/events/events.js","../../../../node_modules/algoliasearch-helper/src/functions/inherits.js","../../../../node_modules/algoliasearch-helper/src/DerivedHelper/index.js","../../../../node_modules/algoliasearch-helper/src/requestBuilder.js","../../../../node_modules/algoliasearch-helper/src/version.js","../../../../node_modules/algoliasearch-helper/src/algoliasearch.helper.js","../../../../node_modules/algoliasearch-helper/index.js","../../src/connectors/connectConfigureRelatedItems.ts","../../../../node_modules/rollup-plugin-node-globals/src/global.js","../../../../node_modules/process-es6/browser.js","../../../../node_modules/react-is/cjs/react-is.production.min.js","../../../../node_modules/react-is/index.js","../../node_modules/prop-types/factoryWithThrowingShims.js","../../node_modules/prop-types/index.js","../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../src/widgets/ConfigureRelatedItems.tsx","../../src/connectors/connectDynamicWidgets.ts","../../src/widgets/DynamicWidgets.tsx","../../src/connectors/connectQueryRules.ts","../../src/widgets/QueryRuleContext.ts","../../src/widgets/Index.tsx","../../src/core/createInstantSearchManager.js","../../src/core/createWidgetsManager.ts","../../src/core/createStore.ts","../../src/core/metadata.ts","../../src/widgets/InstantSearch.tsx","../../src/connectors/connectAutoComplete.js","../../src/connectors/connectBreadcrumb.js","../../src/connectors/connectCurrentRefinements.js","../../src/connectors/connectGeoSearch.js","../../src/connectors/connectHierarchicalMenu.js","../../src/connectors/connectHighlight.js","../../src/connectors/connectHits.js","../../src/connectors/connectHitsPerPage.js","../../src/connectors/connectInfiniteHits.js","../../src/connectors/connectMenu.js","../../../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/connectors/connectNumericMenu.js","../../src/connectors/connectPagination.js","../../src/connectors/connectPoweredBy.js","../../src/connectors/connectRange.js","../../src/connectors/connectRefinementList.js","../../src/connectors/connectScrollTo.js","../../src/connectors/connectSearchBox.js","../../src/connectors/connectRelevantSort.ts","../../src/connectors/connectSortBy.js","../../src/connectors/connectStateResults.js","../../src/connectors/connectStats.ts","../../src/connectors/connectToggleRefinement.js","../../src/connectors/connectHitInsights.ts","../../src/connectors/connectVoiceSearch.js","../../src/index.ts","../../src/core/translatable.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function';\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      if (keys[i] === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","// From https://github.com/reactjs/react-redux/blob/master/src/utils/shallowEqual.js\nexport const shallowEqual = (objA, objB) => {\n  if (objA === objB) {\n    return true;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  const hasOwn = Object.prototype.hasOwnProperty;\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const getDisplayName = (Component) =>\n  Component.displayName || Component.name || 'UnknownComponent';\n\nconst resolved = Promise.resolve();\nexport const defer = (f) => {\n  resolved.then(f);\n};\n\nconst isPlainObject = (value: unknown): value is object =>\n  typeof value === 'object' && value !== null && !Array.isArray(value);\n\nexport const removeEmptyKey = (obj: object) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    if (!objectHasKeys(value)) {\n      delete obj[key];\n    } else {\n      removeEmptyKey(value);\n    }\n  });\n\n  return obj;\n};\n\nexport const removeEmptyArraysFromObject = (obj: object) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (Array.isArray(value) && value.length === 0) {\n      delete obj[key];\n    }\n  });\n\n  return obj;\n};\n\nexport function addAbsolutePositions(hits, hitsPerPage, page) {\n  return hits.map((hit, index) => ({\n    ...hit,\n    __position: hitsPerPage * page + index + 1,\n  }));\n}\n\nexport function addQueryID(hits, queryID) {\n  if (!queryID) {\n    return hits;\n  }\n  return hits.map((hit) => ({\n    ...hit,\n    __queryID: queryID,\n  }));\n}\n\nexport function find<TItem = any>(\n  array: TItem[],\n  comparator: (item: TItem) => boolean\n): TItem | undefined {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n  return undefined;\n}\n\nexport function objectHasKeys(object: object | undefined) {\n  return object && Object.keys(object).length > 0;\n}\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nexport function omit(source: { [key: string]: any }, excluded: string[]) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n  const target = {};\n  const sourceKeys = Object.keys(source);\n  for (let i = 0; i < sourceKeys.length; i++) {\n    const key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * Retrieve the value at a path of the object:\n *\n * @example\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   'test.this.function[0].now.everyone'\n * ); // true\n *\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   ['test', 'this', 'function', 0, 'now', 'everyone']\n * ); // true\n *\n * @param object Source object to query\n * @param path either an array of properties, or a string form of the properties, separated by .\n */\nexport const getPropertyByPath = (object: object, path: string[] | string) =>\n  (Array.isArray(path)\n    ? path\n    : path.replace(/\\[(\\d+)]/g, '.$1').split('.')\n  ).reduce((current, key) => (current ? current[key] : undefined), object);\n\nexport function getObjectType(object: unknown): string {\n  return Object.prototype.toString.call(object).slice(8, -1);\n}\n","import { createContext } from 'react';\nimport type { Store } from '../core/createStore';\nimport type InstantSearch from '../widgets/InstantSearch';\n\nexport type InstantSearchContext = {\n  onInternalStateUpdate: InstantSearch['onWidgetsInternalStateUpdate'];\n  createHrefForState: InstantSearch['createHrefForState'];\n  onSearchForFacetValues: InstantSearch['onSearchForFacetValues'];\n  onSearchStateChange: InstantSearch['onSearchStateChange'];\n  onSearchParameters: InstantSearch['onSearchParameters'];\n  store: Store;\n  widgetsManager: any;\n  mainTargetedIndex: string;\n};\n\nexport const instantSearchContext = createContext<InstantSearchContext>({\n  onInternalStateUpdate: () => undefined,\n  createHrefForState: () => '#',\n  onSearchForFacetValues: () => undefined,\n  onSearchStateChange: () => undefined,\n  onSearchParameters: () => undefined,\n  store: {} as Store,\n  widgetsManager: {},\n  mainTargetedIndex: '',\n});\n\nexport const {\n  Consumer: InstantSearchConsumer,\n  Provider: InstantSearchProvider,\n} = instantSearchContext;\n\nexport type IndexContext =\n  | {\n      targetedIndex: string;\n    }\n  | undefined;\n\nexport const { Consumer: IndexConsumer, Provider: IndexProvider } =\n  createContext<IndexContext>(undefined);\n","import type { ReactType } from 'react';\nimport React, { Component } from 'react';\nimport isEqual from 'react-fast-compare';\nimport { shallowEqual, getDisplayName, removeEmptyKey } from './utils';\nimport type { InstantSearchContext, IndexContext } from './context';\nimport { InstantSearchConsumer, IndexConsumer } from './context';\n\nexport type ConnectorDescription = {\n  displayName: string;\n  /**\n   * a function to filter the local state\n   */\n  refine?: (...args: any[]) => any;\n  /**\n   * function transforming the local state to a SearchParameters\n   */\n  getSearchParameters?: (...args: any[]) => any;\n  /**\n   * metadata of the widget (for current refinements)\n   */\n  getMetadata?: (...args: any[]) => any;\n  /**\n   * hook after the state has changed\n   */\n  transitionState?: (...args: any[]) => any;\n  /**\n   * transform the state into props passed to the wrapped component.\n   * Receives (props, widgetStates, searchState, metadata) and returns the local state.\n   */\n  getProvidedProps: (...args: any[]) => any;\n  /**\n   * Receives props and return the id that will be used to identify the widget\n   */\n  getId?: (...args: any[]) => string;\n  /**\n   * hook when the widget will unmount. Receives (props, searchState) and return a cleaned state.\n   */\n  cleanUp?: (...args: any[]) => any;\n  searchForFacetValues?: (...args: any[]) => any;\n  shouldComponentUpdate?: (...args: any[]) => boolean;\n  /**\n   * PropTypes forwarded to the wrapped component.\n   */\n  propTypes?: {}; // I can't find a definition for a propTypes object\n  defaultProps?: {};\n};\n\ntype ConnectorProps = {\n  contextValue: InstantSearchContext;\n  indexContextValue?: IndexContext;\n};\n\nexport type ConnectedProps<TWidgetProps> = TWidgetProps & ConnectorProps;\n\ntype ConnectorState = {\n  providedProps: {};\n};\n\n/**\n * Connectors are the HOC used to transform React components\n * into InstantSearch widgets.\n * In order to simplify the construction of such connectors\n * `createConnector` takes a description and transform it into\n * a connector.\n * @param {ConnectorDescription} connectorDesc the description of the connector\n * @return {Connector} a function that wraps a component into\n * an instantsearch connected one.\n */\nexport function createConnectorWithoutContext(\n  connectorDesc: ConnectorDescription\n) {\n  if (!connectorDesc.displayName) {\n    throw new Error(\n      '`createConnector` requires you to provide a `displayName` property.'\n    );\n  }\n\n  const isWidget =\n    typeof connectorDesc.getSearchParameters === 'function' ||\n    typeof connectorDesc.getMetadata === 'function' ||\n    typeof connectorDesc.transitionState === 'function';\n\n  return (Composed: ReactType) => {\n    class Connector extends Component<ConnectorProps, ConnectorState> {\n      static displayName = `${connectorDesc.displayName}(${getDisplayName(\n        Composed\n      )})`;\n      static propTypes = connectorDesc.propTypes;\n      static defaultProps = connectorDesc.defaultProps;\n      static _connectorDesc = connectorDesc;\n\n      unsubscribe?: () => void;\n      unregisterWidget?: () => void;\n\n      isUnmounting = false;\n\n      state: ConnectorState = {\n        providedProps: this.getProvidedProps(this.props),\n      };\n\n      constructor(props: ConnectorProps) {\n        super(props);\n\n        if (connectorDesc.getSearchParameters) {\n          this.props.contextValue.onSearchParameters(\n            connectorDesc.getSearchParameters.bind(this),\n            {\n              ais: this.props.contextValue,\n              multiIndexContext: this.props.indexContextValue,\n            },\n            this.props,\n            connectorDesc.getMetadata && connectorDesc.getMetadata.bind(this),\n            connectorDesc.displayName\n          );\n        }\n      }\n\n      componentDidMount() {\n        this.unsubscribe = this.props.contextValue.store.subscribe(() => {\n          if (!this.isUnmounting) {\n            this.setState({\n              providedProps: this.getProvidedProps(this.props),\n            });\n          }\n        });\n\n        if (isWidget) {\n          this.unregisterWidget =\n            this.props.contextValue.widgetsManager.registerWidget(this);\n        }\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        if (typeof connectorDesc.shouldComponentUpdate === 'function') {\n          return connectorDesc.shouldComponentUpdate.call(\n            this,\n            this.props,\n            nextProps,\n            this.state,\n            nextState\n          );\n        }\n\n        const propsEqual = shallowEqual(this.props, nextProps);\n\n        if (\n          this.state.providedProps === null ||\n          nextState.providedProps === null\n        ) {\n          if (this.state.providedProps === nextState.providedProps) {\n            return !propsEqual;\n          }\n          return true;\n        }\n\n        return (\n          !propsEqual ||\n          !shallowEqual(this.state.providedProps, nextState.providedProps)\n        );\n      }\n\n      componentDidUpdate(prevProps) {\n        if (!isEqual(prevProps, this.props)) {\n          this.setState({\n            providedProps: this.getProvidedProps(this.props),\n          });\n\n          if (isWidget) {\n            this.props.contextValue.widgetsManager.update();\n\n            if (typeof connectorDesc.transitionState === 'function') {\n              this.props.contextValue.onSearchStateChange(\n                connectorDesc.transitionState.call(\n                  this,\n                  this.props,\n                  this.props.contextValue.store.getState().widgets,\n                  this.props.contextValue.store.getState().widgets\n                )\n              );\n            }\n          }\n        }\n      }\n\n      componentWillUnmount() {\n        this.isUnmounting = true;\n\n        if (this.unsubscribe) {\n          this.unsubscribe();\n        }\n\n        if (this.unregisterWidget) {\n          this.unregisterWidget();\n\n          if (typeof connectorDesc.cleanUp === 'function') {\n            const nextState = connectorDesc.cleanUp.call(\n              this,\n              this.props,\n              this.props.contextValue.store.getState().widgets\n            );\n\n            this.props.contextValue.store.setState({\n              ...this.props.contextValue.store.getState(),\n              widgets: nextState,\n            });\n\n            this.props.contextValue.onSearchStateChange(\n              removeEmptyKey(nextState)\n            );\n          }\n        }\n      }\n\n      getProvidedProps(props) {\n        const {\n          widgets,\n          results,\n          resultsFacetValues,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          metadata,\n          error,\n        } = this.props.contextValue.store.getState();\n\n        const searchResults = {\n          results,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          error,\n        };\n\n        return connectorDesc.getProvidedProps.call(\n          this,\n          props,\n          widgets,\n          searchResults,\n          metadata,\n          // @MAJOR: move this attribute on the `searchResults` it doesn't\n          // makes sense to have it into a separate argument. The search\n          // flags are on the object why not the results?\n          resultsFacetValues\n        );\n      }\n\n      getSearchParameters(searchParameters) {\n        if (typeof connectorDesc.getSearchParameters === 'function') {\n          return connectorDesc.getSearchParameters.call(\n            this,\n            searchParameters,\n            this.props,\n            this.props.contextValue.store.getState().widgets\n          );\n        }\n\n        return null;\n      }\n\n      getMetadata(nextWidgetsState) {\n        if (typeof connectorDesc.getMetadata === 'function') {\n          return connectorDesc.getMetadata.call(\n            this,\n            this.props,\n            nextWidgetsState\n          );\n        }\n\n        return {};\n      }\n\n      transitionState(prevWidgetsState, nextWidgetsState) {\n        if (typeof connectorDesc.transitionState === 'function') {\n          return connectorDesc.transitionState.call(\n            this,\n            this.props,\n            prevWidgetsState,\n            nextWidgetsState\n          );\n        }\n\n        return nextWidgetsState;\n      }\n\n      refine = (...args) => {\n        this.props.contextValue.onInternalStateUpdate(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      createURL = (...args) =>\n        this.props.contextValue.createHrefForState(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n\n      searchForFacetValues = (...args) => {\n        this.props.contextValue.onSearchForFacetValues(\n          // searchForFacetValues will always be defined here because the prop is only given conditionally\n          connectorDesc.searchForFacetValues!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      render() {\n        const { contextValue, ...props } = this.props;\n        const { providedProps } = this.state;\n\n        if (providedProps === null) {\n          return null;\n        }\n\n        const refineProps =\n          typeof connectorDesc.refine === 'function'\n            ? { refine: this.refine, createURL: this.createURL }\n            : {};\n\n        const searchForFacetValuesProps =\n          typeof connectorDesc.searchForFacetValues === 'function'\n            ? { searchForItems: this.searchForFacetValues }\n            : {};\n\n        return (\n          <Composed\n            {...props}\n            {...providedProps}\n            {...refineProps}\n            {...searchForFacetValuesProps}\n          />\n        );\n      }\n    }\n\n    return Connector;\n  };\n}\n\nconst createConnectorWithContext =\n  (connectorDesc: ConnectorDescription) => (Composed: ReactType) => {\n    const Connector = createConnectorWithoutContext(connectorDesc)(Composed);\n\n    const ConnectorWrapper: React.FC<any> = (props) => (\n      <InstantSearchConsumer>\n        {(contextValue) => (\n          <IndexConsumer>\n            {(indexContextValue) => (\n              <Connector\n                contextValue={contextValue}\n                indexContextValue={indexContextValue}\n                {...props}\n              />\n            )}\n          </IndexConsumer>\n        )}\n      </InstantSearchConsumer>\n    );\n\n    return ConnectorWrapper;\n  };\n\nexport default createConnectorWithContext;\n","import { getPropertyByPath } from './utils';\n\nexport const HIGHLIGHT_TAGS = {\n  highlightPreTag: `<ais-highlight-0000000000>`,\n  highlightPostTag: `</ais-highlight-0000000000>`,\n};\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseHighlightedAttribute({ preTag, postTag, highlightedValue = '' }) {\n  const splitByPreTag = highlightedValue.split(preTag);\n  const firstValue = splitByPreTag.shift();\n  const elements =\n    firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    let isHighlighted = true;\n    splitByPreTag.forEach((split) => {\n      elements.push({ value: split, isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach((split) => {\n      const splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true,\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false,\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nexport function parseAlgoliaHit({\n  preTag = '<em>',\n  postTag = '</em>',\n  highlightProperty,\n  attribute,\n  hit,\n}) {\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  const highlightObject =\n    getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map((item) =>\n      parseHighlightedAttribute({\n        preTag,\n        postTag,\n        highlightedValue: item.value,\n      })\n    );\n  }\n\n  return parseHighlightedAttribute({\n    preTag,\n    postTag,\n    highlightedValue: highlightObject.value,\n  });\n}\n","export default '6.22.0';\n","import { omit } from './utils';\n\nexport function getIndexId(context) {\n  return hasMultipleIndices(context)\n    ? context.multiIndexContext.targetedIndex\n    : context.ais.mainTargetedIndex;\n}\n\n/**\n * @returns {import('algoliasearch-helper').SearchResults} results\n */\nexport function getResults(searchResults, context) {\n  if (searchResults.results) {\n    if (searchResults.results.hits) {\n      return searchResults.results;\n    }\n\n    const indexId = getIndexId(context);\n    if (searchResults.results[indexId]) {\n      return searchResults.results[indexId];\n    }\n  }\n\n  return null;\n}\n\nexport function hasMultipleIndices(context) {\n  return context && context.multiIndexContext;\n}\n\nexport function refineValue(\n  searchState,\n  nextRefinement,\n  context,\n  resetPage,\n  namespace\n) {\n  if (hasMultipleIndices(context)) {\n    const indexId = getIndexId(context);\n    return namespace\n      ? refineMultiIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          indexId,\n          resetPage,\n          namespace\n        )\n      : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);\n  } else {\n    // When we have a multi index page with shared widgets we should also\n    // reset their page to 1 if the resetPage is provided. Otherwise the\n    // indices will always be reset\n    // see: https://github.com/algolia/react-instantsearch/issues/310\n    // see: https://github.com/algolia/react-instantsearch/issues/637\n    if (searchState.indices && resetPage) {\n      Object.keys(searchState.indices).forEach((targetedIndex) => {\n        searchState = refineValue(\n          searchState,\n          { page: 1 },\n          { multiIndexContext: { targetedIndex } },\n          true,\n          namespace\n        );\n      });\n    }\n    return namespace\n      ? refineSingleIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          resetPage,\n          namespace\n        )\n      : refineSingleIndex(searchState, nextRefinement, resetPage);\n  }\n}\n\nfunction refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            ...nextRefinement,\n            ...page,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            ...nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndex(searchState, nextRefinement, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return { ...searchState, ...nextRefinement, ...page };\n}\n\nfunction refineMultiIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  indexId,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            [namespace]: {\n              ...searchState.indices[indexId][namespace],\n              ...nextRefinement,\n            },\n            page: 1,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            [namespace]: nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return {\n    ...searchState,\n    [namespace]: { ...searchState[namespace], ...nextRefinement },\n    ...page,\n  };\n}\n\nfunction getNamespaceAndAttributeName(id) {\n  const parts = id.match(/^([^.]*)\\.(.*)/);\n  const namespace = parts && parts[1];\n  const attributeName = parts && parts[2];\n\n  return { namespace, attributeName };\n}\n\nfunction hasRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      searchState.indices[indexId][namespace] &&\n      Object.hasOwnProperty.call(\n        searchState.indices[indexId][namespace],\n        attributeName\n      )\n    );\n  }\n\n  if (multiIndex) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      Object.hasOwnProperty.call(searchState.indices[indexId], id)\n    );\n  }\n\n  if (namespace) {\n    return (\n      searchState[namespace] &&\n      Object.hasOwnProperty.call(searchState[namespace], attributeName)\n    );\n  }\n\n  return Object.hasOwnProperty.call(searchState, id);\n}\n\nfunction getRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return searchState.indices[indexId][namespace][attributeName];\n  }\n  if (multiIndex) {\n    return searchState.indices[indexId][id];\n  }\n  if (namespace) {\n    return searchState[namespace][attributeName];\n  }\n\n  return searchState[id];\n}\n\nexport function getCurrentRefinementValue(\n  props,\n  searchState,\n  context,\n  id,\n  defaultValue\n) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n  const multiIndex = hasMultipleIndices(context);\n  const args = {\n    multiIndex,\n    indexId,\n    namespace,\n    attributeName,\n    id,\n    searchState,\n  };\n  const hasRefinementsValue = hasRefinements(args);\n\n  if (hasRefinementsValue) {\n    return getRefinements(args);\n  }\n\n  if (props.defaultRefinement) {\n    return props.defaultRefinement;\n  }\n\n  return defaultValue;\n}\n\nexport function cleanUpValue(searchState, context, id) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n\n  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {\n    return cleanUpValueWithMultiIndex({\n      attribute: attributeName,\n      searchState,\n      indexId,\n      id,\n      namespace,\n    });\n  }\n\n  return cleanUpValueWithSingleIndex({\n    attribute: attributeName,\n    searchState,\n    id,\n    namespace,\n  });\n}\n\nfunction cleanUpValueWithSingleIndex({\n  searchState,\n  id,\n  namespace,\n  attribute,\n}) {\n  if (namespace) {\n    return {\n      ...searchState,\n      [namespace]: omit(searchState[namespace], [attribute]),\n    };\n  }\n\n  return omit(searchState, [id]);\n}\n\nfunction cleanUpValueWithMultiIndex({\n  searchState,\n  indexId,\n  id,\n  namespace,\n  attribute,\n}) {\n  const indexSearchState = searchState.indices[indexId];\n\n  if (namespace && indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: {\n          ...indexSearchState,\n          [namespace]: omit(indexSearchState[namespace], [attribute]),\n        },\n      },\n    };\n  }\n\n  if (indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: omit(indexSearchState, [id]),\n      },\n    };\n  }\n\n  return searchState;\n}\n","import { omit } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'configure';\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigure',\n  getProvidedProps() {\n    return {};\n  },\n  getSearchParameters(searchParameters, props) {\n    const { children, contextValue, indexContextValue, ...items } = props;\n    return searchParameters.setQueryParameters(items);\n  },\n  transitionState(props, prevSearchState, nextSearchState) {\n    const id = getId();\n    const { children, contextValue, indexContextValue, ...items } = props;\n    const propKeys = Object.keys(props);\n    const nonPresentKeys = this._props\n      ? Object.keys(this._props).filter((prop) => propKeys.indexOf(prop) === -1)\n      : [];\n    this._props = props;\n    const nextValue = {\n      [id]: { ...omit(nextSearchState[id], nonPresentKeys), ...items },\n    };\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n  cleanUp(props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = configureKeys.reduce((acc, item) => {\n      if (!props[item]) {\n        acc[item] = subState[id][item];\n      }\n      return acc;\n    }, {});\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import connectConfigure from '../connectors/connectConfigure';\n\n/**\n * Configure is a widget that lets you provide raw search parameters\n * to the Algolia API.\n *\n * Any of the props added to this widget will be forwarded to Algolia. For more information\n * on the different parameters that can be set, have a look at the\n * [reference](https://www.algolia.com/doc/api-client/javascript/search#search-parameters).\n *\n * This widget can be used either with react-dom and react-native. It will not render anything\n * on screen, only configure some parameters.\n *\n * Read more in the [Search parameters](guide/Search_parameters.html) guide.\n * @name Configure\n * @kind widget\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Configure, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\n\nexport default connectConfigure(function Configure() {\n  return null;\n});\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__'\n    ) {\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\n\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n","'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function(acc, source) {\n    Object.keys(Object(source)).forEach(function(key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n","'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function(value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n","'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n};\n","'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error('The value should be a number, a parsable string or an array of those.');\n}\n\nmodule.exports = valToNumber;\n","'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n","'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n","'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n","'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function(el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function(currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  var self = this;\n  Object.keys(params).forEach(function(paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function(partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity'\n  ];\n\n  numberKeys.forEach(function(k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function(value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function(v) {\n          if (Array.isArray(v)) {\n            return v.map(function(vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function(facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function(currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n      'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n      'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n      ' is probably an error, if this is really what you want, you have to first' +\n      ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      )\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function(attribute, operator, v) {\n    var value = valToNumber(v);\n\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function(facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function(facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function(attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function(value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function(facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function(attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n\n        operators = operators || {};\n        Object.keys(operators).forEach(function(operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function(value) {\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n\n        memo[key] = operatorList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function(t) {\n        return t !== tag;\n      })\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet +\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 && (\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0] === value ||\n      // remove a parent refinement of the current refinement:\n      //  - refinement was 'beer > IPA > Flying dog'\n      //  - call is toggleRefine('beer > IPA')\n      //  - refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0\n    );\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function(facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function(facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function(facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function(facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function(facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function(facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function(facet) { return facet.name; }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    );\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function() {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function(f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements'\n  ],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    var self = this;\n    Object.keys(this).forEach(function(paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(\n      function(previous, key) {\n        var isPreviousValueDefined = previous[key] !== undefined;\n        var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n        if (isPreviousValueDefined && !isNextValueDefined) {\n          return omit(previous, [key]);\n        }\n\n        if (isNextValueDefined) {\n          previous[key] = nextWithNumbers[key];\n        }\n\n        return previous;\n      },\n      previousPlainObject\n    );\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function() {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function(hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function(hierarchicalFacetName) {\n    return find(\n      this.hierarchicalFacets,\n      function(f) {\n        return f.name === hierarchicalFacetName;\n      }\n    );\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function(facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function(part) {\n      return part.trim();\n    });\n  },\n\n  toString: function() {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n","'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function(value, index) {\n    return {\n      criteria: iteratees.map(function(iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function(res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n","'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n","'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n","'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function(sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(defaultInstructions, function(\n        defaultInstruction\n      ) {\n        return defaultInstruction[0] === sortInstruction[0];\n      });\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n","'use strict';\n\nmodule.exports = generateTrees;\n\nvar orderBy = require('../functions/orderBy');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator = state._getHierarchicalFacetSeparator(\n      hierarchicalFacet\n    );\n    var hierarchicalRootPath = state._getHierarchicalRootPath(\n      hierarchicalFacet\n    );\n    var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(\n      hierarchicalFacet\n    );\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      exhaustive: rootExhaustive,\n      data: null\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function(subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function(facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function(tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function(tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            currentRefinement,\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null\n  };\n}\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar orderBy = require('../functions/orderBy');\nvar compact = require('../functions/compact');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * @param {string[]} attributes\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function(val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets\n * @param {string} hierarchicalAttributeName\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(hierarchicalFacets, function facetKeyMatchesAttribute(\n    hierarchicalFacet\n  ) {\n    var facetNames = hierarchicalFacet.attributes || [];\n    return facetNames.indexOf(hierarchicalAttributeName) > -1;\n  });\n}\n\n/*eslint-disable */\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\n/*eslint-enable */\nfunction SearchResults(state, results) {\n  var mainSubResponse = results[0];\n\n  this._rawResults = results;\n\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function(key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   *  - `value` : the value of the facet highlighted (html)\n   *  - `matchLevel`: full, partial or none depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @member {number}\n   */\n  this.processingTimeMS = results.reduce(function(sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n    return [];\n  });\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function(facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function(disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge(\n          {},\n          self.hierarchicalFacets[position][attributeIndex].data,\n          facetResults\n        );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (!self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(refinementValue) > -1) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some root level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n      return;\n    }\n\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets\n      ? result.facets\n      : {};\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n      var position = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n        return f.attribute === dfacet;\n      });\n\n      // previous refinements and no results so not able to find it\n      if (attributeIndex === -1) {\n        return;\n      }\n\n      // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n      // then the disjunctive values will be `beers` (count: 100),\n      // but we do not want to display\n      //   | beers (100)\n      //     > IPA (5)\n      // We want\n      //   | beers (5)\n      //     > IPA (5)\n      var defaultData = {};\n\n      if (currentRefinement.length > 0) {\n        var root = currentRefinement[0].split(separator)[0];\n        defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n      }\n\n      self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n        defaultData,\n        facetResults,\n        self.hierarchicalFacets[position][attributeIndex].data\n      );\n    });\n\n    nextDisjunctiveResult++;\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function(facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainSubResponse.facets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount\n    };\n    excludes.forEach(function(facetValue) {\n      self.facets[position] = self.facets[position] || {name: facetName};\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function(name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate);\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function(name) {\n      return {\n        name: name,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, name),\n        isExcluded: results._state.isExcludeRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function(name) {\n      return {\n        name: name,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    return find(results.hierarchicalFacets, predicate);\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function(childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({data: sortedChildren}, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array}\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n\n  var order = facetOrdering.order || [];\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function(acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function(item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    if (reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function(facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [['path', 'name'], ['asc', 'asc']];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering=}\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function(attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy)\n  });\n\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(function(data, facetName) {\n    if (options.facetOrdering) {\n      var facetOrdering = getFacetOrdering(results, facetName);\n      if (Boolean(facetOrdering)) {\n        return sortViaFacetOrdering(data, facetOrdering);\n      }\n    }\n\n    if (Array.isArray(options.sortBy)) {\n      var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n      return orderBy(data, order[0], order[1]);\n    } else if (typeof options.sortBy === 'function') {\n      return vanillaSortFn(options.sortBy, data);\n    }\n    throw new Error(\n      'options.sortBy is optional but if defined it must be ' +\n        'either an array of string (predicates) or a sorting function'\n    );\n  }, facetValues, attributes);\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function(attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function(facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function() {\n  var state = this._state;\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n    state.facetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n    state.facetsExcludes[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'exclude', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'disjunctive', attributeName, name, results.disjunctiveFacets));\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n    });\n  });\n\n\n  Object.keys(state.numericRefinements).forEach(function(attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function(operator) {\n      operators[operator].forEach(function(value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function(name) {\n    res.push({type: 'tag', attributeName: '_tags', name: name});\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {*} state\n * @param {*} type\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function(f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\n/**\n * @param {*} state\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function(facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function(intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet && find(intermediateFacet.data, function(f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\nmodule.exports = SearchResults;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nmodule.exports = inherits;\n","'use strict';\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n */\nfunction DerivedHelper(mainHelper, fn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.lastResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function() {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function(parameters) {\n  return this.fn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n","'use strict';\n\nvar merge = require('./functions/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // maybe more to get the root level of hierarchical facets when activated\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    );\n  }\n};\n\nmodule.exports = requestBuilder;\n","'use strict';\n\nmodule.exports = '3.7.0';\n","'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search({onlyWithDerivedHelpers: false});\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n  this._search({onlyWithDerivedHelpers: true});\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n /**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n */\nAlgoliaSearchHelper.prototype.findAnswers = function(options) {\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n      ])\n    }\n  );\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  if (\n    !clientHasSFFV &&\n    typeof this.client.initIndex !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n\n  var searchForFacetValuesPromise = clientHasSFFV\n    ? this.client.searchForFacetValues([{indexName: state.index, params: algoliaQuery}])\n    : this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits.forEach(function(f) {\n      f.isRefined = isDisjunctive\n        ? state.isDisjunctiveFacetRefined(facet, f.value)\n        : state.isFacetRefined(facet, f.value);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    disjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function(operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function(options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n","'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\n\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @return {AlgoliaSearchHelper}\n */\nfunction algoliasearchHelper(client, index, opts) {\n  return new AlgoliaSearchHelper(client, index, opts);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version.js');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\nmodule.exports = algoliasearchHelper;\n","import type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  omit,\n  getObjectType,\n  getPropertyByPath,\n  removeEmptyKey,\n  removeEmptyArraysFromObject,\n} from '../core/utils';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n} from '../core/indexUtils';\n\ntype Hit = any;\n\nexport type MatchingPatterns = {\n  [attribute: string]: {\n    /**\n     * The score of the optional filter.\n     *\n     * @see https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/in-depth/optional-filters/\n     */\n    score: number;\n  };\n};\n\ninterface ConfigureRelatedItemsProps {\n  /**\n   * The reference hit to extract the filters from.\n   */\n  hit: Hit;\n  /**\n   * The schema to create the optional filters.\n   * Each key represents an attribute from the hit.\n   */\n  matchingPatterns: MatchingPatterns;\n  /**\n   * Function to transform the generated search parameters.\n   */\n  transformSearchParameters?(\n    searchParameters: SearchParameters\n  ): PlainSearchParameters;\n}\n\nfunction createOptionalFilter({\n  attributeName,\n  attributeValue,\n  attributeScore,\n}) {\n  return `${attributeName}:${attributeValue}<score=${attributeScore || 1}>`;\n}\n\nconst defaultProps: Partial<ConfigureRelatedItemsProps> = {\n  transformSearchParameters: (x) => ({ ...x }),\n};\n\nfunction getId(): string {\n  // We store the search state of this widget in `configure`.\n  return 'configure';\n}\n\ntype InternalConfigureRelatedItemsProps = ConfigureRelatedItemsProps &\n  Required<typeof defaultProps>;\n\nfunction getSearchParametersFromProps(\n  props: ConnectedProps<InternalConfigureRelatedItemsProps>\n): PlainSearchParameters {\n  const optionalFilters = Object.keys(props.matchingPatterns).reduce<\n    Array<string | string[]>\n  >((acc, attributeName) => {\n    const attributePattern = props.matchingPatterns[attributeName];\n    const attributeValue = getPropertyByPath(props.hit, attributeName);\n    const attributeScore = attributePattern.score;\n\n    if (Array.isArray(attributeValue)) {\n      return [\n        ...acc,\n        attributeValue.map((attributeSubValue) => {\n          return createOptionalFilter({\n            attributeName,\n            attributeValue: attributeSubValue,\n            attributeScore,\n          });\n        }),\n      ];\n    }\n\n    if (typeof attributeValue === 'string') {\n      return [\n        ...acc,\n        createOptionalFilter({\n          attributeName,\n          attributeValue,\n          attributeScore,\n        }),\n      ];\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The \\`matchingPatterns\\` option returned a value of type ${getObjectType(\n          attributeValue\n        )} for the \"${attributeName}\" key. This value was not sent to Algolia because \\`optionalFilters\\` only supports strings and array of strings.\n\nYou can remove the \"${attributeName}\" key from the \\`matchingPatterns\\` option.\n\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/`\n      );\n    }\n\n    return acc;\n  }, []);\n\n  return props.transformSearchParameters(\n    new algoliasearchHelper.SearchParameters({\n      // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type\n      // `sumOrFiltersScores`.\n      // See https://github.com/algolia/algoliasearch-helper-js/pull/753\n      sumOrFiltersScores: true,\n      facetFilters: [`objectID:-${props.hit.objectID}`],\n      optionalFilters,\n    })\n  );\n}\n\ninterface ConnectorState {\n  _searchParameters: PlainSearchParameters;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigureRelatedItems',\n\n  defaultProps,\n\n  getProvidedProps() {\n    return {};\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<InternalConfigureRelatedItemsProps>\n  ) {\n    return searchParameters.setQueryParameters(\n      getSearchParametersFromProps(props)\n    );\n  },\n\n  transitionState(\n    this: ConnectorState,\n    props,\n    _prevSearchState,\n    nextSearchState\n  ) {\n    const id = getId();\n    // We need to transform the exhaustive search parameters back to clean\n    // search parameters without the empty default keys so we don't pollute the\n    // `configure` search state.\n    const searchParameters = removeEmptyArraysFromObject(\n      removeEmptyKey(getSearchParametersFromProps(props))\n    );\n\n    const searchParametersKeys = Object.keys(searchParameters);\n    const nonPresentKeys = this._searchParameters\n      ? Object.keys(this._searchParameters).filter(\n          (prop) => searchParametersKeys.indexOf(prop) === -1\n        )\n      : [];\n    this._searchParameters = searchParameters;\n    const nextValue = {\n      [id]: {\n        ...omit(nextSearchState[id], nonPresentKeys),\n        ...searchParameters,\n      },\n    };\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(this: ConnectorState, props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = configureKeys.reduce((acc, item) => {\n      if (!this._searchParameters[item]) {\n        acc[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {});\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nexport function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nexport var title = 'browser';\nexport var platform = 'browser';\nexport var browser = true;\nexport var env = {};\nexport var argv = [];\nexport var version = ''; // empty string to avoid regexp issues\nexport var versions = {};\nexport var release = {};\nexport var config = {};\n\nfunction noop() {}\n\nexport var on = noop;\nexport var addListener = noop;\nexport var once = noop;\nexport var off = noop;\nexport var removeListener = noop;\nexport var removeAllListeners = noop;\nexport var emit = noop;\n\nexport function binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nexport function cwd () { return '/' }\nexport function chdir (dir) {\n    throw new Error('process.chdir is not supported');\n};\nexport function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nexport function hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nexport function uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nexport default {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import connectConfigureRelatedItems from '../connectors/connectConfigureRelatedItems';\nimport PropTypes from 'prop-types';\n\nfunction ConfigureRelatedItems() {\n  return null;\n}\n\nConfigureRelatedItems.propTypes = {\n  hit: PropTypes.object.isRequired,\n  matchingPatterns: PropTypes.object.isRequired,\n  transformSearchParameters: PropTypes.func,\n};\n\nexport default connectConfigureRelatedItems(ConfigureRelatedItems);\n","import type { SearchParameters } from 'algoliasearch-helper';\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\nconst MAX_WILDCARD_FACETS = 20;\n\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n\n  defaultProps: {\n    transformItems: (items) => items,\n    maxValuesPerFacet: 20,\n  },\n\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number,\n  },\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (\n      props.facets &&\n      !(\n        Array.isArray(props.facets) &&\n        props.facets.length <= 1 &&\n        (props.facets[0] === '*' || props.facets[0] === undefined)\n      )\n    ) {\n      throw new Error(\n        `The \\`facets\\` prop only accepts [] or [\"*\"], you passed ${JSON.stringify(\n          props.facets\n        )}`\n      );\n    }\n\n    if (!results) {\n      return { attributesToRender: [] };\n    }\n\n    const facetOrder =\n      (results.renderingContent &&\n        results.renderingContent.facetOrdering &&\n        results.renderingContent.facetOrdering.facets &&\n        results.renderingContent.facetOrdering.facets.order) ||\n      [];\n\n    const attributesToRender = props.transformItems(facetOrder, { results });\n\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `More than ${MAX_WILDCARD_FACETS} facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \"facets\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.`\n      );\n    }\n\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The maxValuesPerFacet set by dynamic widgets (${props.maxValuesPerFacet}) is smaller than one of the limits set by a widget (${results._state.maxValuesPerFacet}). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.`\n      );\n    }\n\n    return {\n      attributesToRender,\n    };\n  },\n\n  getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(\n      (acc: SearchParameters, curr: string) => acc.addFacet(curr),\n      searchParameters.setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          props.maxValuesPerFacet || 0,\n          searchParameters.maxValuesPerFacet || 0\n        ),\n      })\n    );\n  },\n});\n","import type { ReactChild, ComponentType, ReactNode } from 'react';\nimport React, { Fragment } from 'react';\nimport { getDisplayName } from '../core/utils';\nimport connectDynamicWidgets from '../connectors/connectDynamicWidgets';\n\nfunction getAttribute(component: ReactChild): string | undefined {\n  if (typeof component !== 'object') {\n    return undefined;\n  }\n\n  if (component.props.attribute) {\n    return component.props.attribute;\n  }\n  if (Array.isArray(component.props.attributes)) {\n    return component.props.attributes[0];\n  }\n  if (component.props.children) {\n    return getAttribute(React.Children.only(component.props.children));\n  }\n\n  return undefined;\n}\n\ntype DynamicWidgetsProps = {\n  children: ReactNode;\n  attributesToRender: string[];\n  fallbackComponent?: ComponentType<{ attribute: string }>;\n};\n\nfunction DynamicWidgets({\n  children,\n  attributesToRender,\n  fallbackComponent: Fallback = () => null,\n}: DynamicWidgetsProps) {\n  const widgets: Map<string, ReactChild> = new Map();\n\n  React.Children.forEach(children, (child) => {\n    const attribute = getAttribute(child);\n    if (!attribute) {\n      throw new Error(\n        `Could not find \"attribute\" prop for ${getDisplayName(child)}.`\n      );\n    }\n    widgets.set(attribute, child);\n  });\n\n  // on initial render this will be empty, but React InstantSearch keeps\n  // search state for unmounted components in place, so routing works.\n  return (\n    <>\n      {attributesToRender.map((attribute) => (\n        <Fragment key={attribute}>\n          {widgets.get(attribute) || <Fallback attribute={attribute} />}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default connectDynamicWidgets(DynamicWidgets);\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\ntype SearchState = any;\n\ntype SearchParameters = any;\n\nexport type CustomUserData = {\n  [key: string]: any;\n};\n\ntype TrackedFilterRefinement = string | number | boolean;\n\nexport type QueryRulesProps<TItem = CustomUserData> = {\n  trackedFilters: {\n    [facetName: string]: (\n      facetValues: TrackedFilterRefinement[]\n    ) => TrackedFilterRefinement[];\n  };\n  transformRuleContexts: (ruleContexts: string[]) => string[];\n  transformItems: (items: TItem[]) => TItem[];\n};\n\n// A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\nfunction escapeRuleContext(ruleName: string): string {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(\n  attribute: string,\n  widgetKey: string,\n  searchState: SearchState\n): TrackedFilterRefinement[] {\n  const widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(\n        (rangeKey) => widgetState[attribute][rangeKey]\n      );\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(\n  attribute: string,\n  searchState: SearchState = {}\n): TrackedFilterRefinement[] {\n  const refinements = Object.keys(searchState)\n    .filter(\n      (widgetKey) =>\n        searchState[widgetKey] !== undefined &&\n        searchState[widgetKey][attribute] !== undefined\n    )\n    .map((widgetKey) => getWidgetRefinements(attribute, widgetKey, searchState))\n    .reduce((acc, current) => acc.concat(current), []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters({\n  searchState,\n  trackedFilters,\n}: {\n  searchState: SearchState;\n  trackedFilters: QueryRulesProps['trackedFilters'];\n}) {\n  const ruleContexts = Object.keys(trackedFilters).reduce<string[]>(\n    (facets, facetName) => {\n      const facetRefinements: TrackedFilterRefinement[] = getRefinements(\n        facetName,\n        searchState\n      );\n\n      const getTrackedFacetValues = trackedFilters[facetName];\n      const trackedFacetValues = getTrackedFacetValues(facetRefinements);\n\n      return [\n        ...facets,\n        ...facetRefinements\n          .filter((facetRefinement) =>\n            trackedFacetValues.includes(facetRefinement)\n          )\n          .map((facetValue) =>\n            escapeRuleContext(`ais-${facetName}-${facetValue}`)\n          ),\n      ];\n    },\n    []\n  );\n\n  return ruleContexts;\n}\n\nconst defaultProps: QueryRulesProps = {\n  transformItems: (items) => items,\n  transformRuleContexts: (ruleContexts) => ruleContexts,\n  trackedFilters: {},\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n\n  defaultProps,\n\n  getProvidedProps(\n    props: ConnectedProps<QueryRulesProps>,\n    _1: any,\n    searchResults: any\n  ) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const { userData = [] } = results;\n    const { transformItems } = props;\n    const transformedItems = transformItems(userData);\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<QueryRulesProps>,\n    searchState: SearchState\n  ) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    const indexSearchState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : searchState;\n\n    const newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters,\n    });\n\n    const initialRuleContexts = searchParameters.ruleContexts || [];\n    const nextRuleContexts = [...initialRuleContexts, ...newRuleContexts];\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The maximum number of \\`ruleContexts\\` is 10. They have been sliced to that limit.\nConsider using \\`transformRuleContexts\\` to minimize the number of rules sent to Algolia.`\n        );\n      }\n    }\n\n    const ruleContexts = props\n      .transformRuleContexts(nextRuleContexts)\n      .slice(0, 10);\n\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  },\n});\n","import connectQueryRules from '../connectors/connectQueryRules';\n\nexport default connectQueryRules(function QueryRuleContext() {\n  return null;\n});\n","import React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchConsumer, IndexProvider } from '../core/context';\n\nfunction getIndexContext(props: Props): IndexContext {\n  return {\n    targetedIndex: props.indexId,\n  };\n}\n\ntype Props = {\n  indexName: string;\n  indexId: string;\n};\n\ntype InnerProps = Props & { contextValue: InstantSearchContext };\n\ntype State = {\n  indexContext: IndexContext;\n};\n\n/**\n * The component that allows you to apply widgets to a dedicated index. It's\n * useful if you want to build an interface that targets multiple indices.\n *\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Index, SearchBox, Hits, Configure } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <SearchBox />\n *     <Index indexName=\"instant_search\">\n *       <Hits />\n *     </Index>\n *     <Index indexName=\"bestbuy\">\n *       <Hits />\n *     </Index>\n *   </InstantSearch>\n * );\n */\nclass Index extends Component<InnerProps, State> {\n  static propTypes = {\n    indexName: PropTypes.string.isRequired,\n    indexId: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static displayName = 'AlgoliaIndex';\n\n  static getDerivedStateFromProps(props: InnerProps) {\n    return {\n      indexContext: getIndexContext(props),\n    };\n  }\n\n  state = {\n    indexContext: getIndexContext(this.props),\n  };\n\n  unregisterWidget?: () => void;\n\n  constructor(props: InnerProps) {\n    super(props);\n\n    this.props.contextValue.onSearchParameters(\n      this.getSearchParameters.bind(this),\n      {\n        ais: this.props.contextValue,\n        multiIndexContext: this.state.indexContext,\n      },\n      this.props,\n      undefined,\n      Index.displayName\n    );\n  }\n\n  componentDidMount() {\n    this.unregisterWidget =\n      this.props.contextValue.widgetsManager.registerWidget(this);\n  }\n\n  componentDidUpdate(prevProps: InnerProps) {\n    if (this.props.indexName !== prevProps.indexName) {\n      this.props.contextValue.widgetsManager.update();\n    }\n  }\n\n  componentWillUnmount() {\n    if (typeof this.unregisterWidget === 'function') {\n      this.unregisterWidget();\n    }\n  }\n\n  getSearchParameters(searchParameters, props: InnerProps) {\n    return searchParameters.setIndex(\n      this.props ? this.props.indexName : props.indexName\n    );\n  }\n\n  render() {\n    const childrenCount = Children.count(this.props.children);\n    if (childrenCount === 0) {\n      return null;\n    }\n    return (\n      <IndexProvider value={this.state.indexContext}>\n        {this.props.children}\n      </IndexProvider>\n    );\n  }\n}\n\ntype IndexWrapperProps = {\n  indexName: string;\n  indexId?: string;\n};\n\nconst IndexWrapper: React.FC<IndexWrapperProps> = (props) => {\n  const inferredIndexId = props.indexName;\n  return (\n    <InstantSearchConsumer>\n      {(contextValue) => (\n        <Index\n          contextValue={contextValue}\n          indexId={inferredIndexId}\n          {...props}\n        />\n      )}\n    </InstantSearchConsumer>\n  );\n};\n\nIndexWrapper.propTypes = {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string,\n};\n\nexport const IndexComponentWithoutContext = Index;\nexport default IndexWrapper;\n","import algoliasearchHelper from 'algoliasearch-helper';\nimport createWidgetsManager from './createWidgetsManager';\nimport createStore from './createStore';\nimport { HIGHLIGHT_TAGS } from './highlight';\nimport { hasMultipleIndices } from './indexUtils';\nimport { version as ReactVersion } from 'react';\nimport version from './version';\n\nfunction addAlgoliaAgents(searchClient) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent(`react (${ReactVersion})`);\n    searchClient.addAlgoliaAgent(`react-instantsearch (${version})`);\n  }\n}\n\nconst isMultiIndexContext = (widget) =>\n  hasMultipleIndices({\n    ais: widget.props.contextValue,\n    multiIndexContext: widget.props.indexContextValue,\n  });\nconst isTargetedIndexEqualIndex = (widget, indexId) =>\n  widget.props.indexContextValue.targetedIndex === indexId;\n\n// Relying on the `indexId` is a bit brittle to detect the `Index` widget.\n// Since it's a class we could rely on `instanceof` or similar. We never\n// had an issue though. Works for now.\nconst isIndexWidget = (widget) => Boolean(widget.props.indexId);\nconst isIndexWidgetEqualIndex = (widget, indexId) =>\n  widget.props.indexId === indexId;\n\nconst sortIndexWidgetsFirst = (firstWidget, secondWidget) => {\n  const isFirstWidgetIndex = isIndexWidget(firstWidget);\n  const isSecondWidgetIndex = isIndexWidget(secondWidget);\n\n  if (isFirstWidgetIndex && !isSecondWidgetIndex) {\n    return -1;\n  }\n  if (!isFirstWidgetIndex && isSecondWidgetIndex) {\n    return 1;\n  }\n  return 0;\n};\n\n// This function is copied from the algoliasearch v4 API Client. If modified,\n// consider updating it also in `serializeQueryParameters` from `@algolia/transporter`.\nfunction serializeQueryParameters(parameters) {\n  const isObjectOrArray = (value) =>\n    Object.prototype.toString.call(value) === '[object Object]' ||\n    Object.prototype.toString.call(value) === '[object Array]';\n\n  const encode = (format, ...args) => {\n    let i = 0;\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\n  };\n\n  return Object.keys(parameters)\n    .map((key) =>\n      encode(\n        '%s=%s',\n        key,\n        isObjectOrArray(parameters[key])\n          ? JSON.stringify(parameters[key])\n          : parameters[key]\n      )\n    )\n    .join('&');\n}\n\n/**\n * Creates a new instance of the InstantSearchManager which controls the widgets and\n * trigger the search when the widgets are updated.\n * @param {string} indexName - the main index name\n * @param {object} initialState - initial widget state\n * @param {object} SearchParameters - optional additional parameters to send to the algolia API\n * @param {number} stalledSearchDelay - time (in ms) after the search is stalled\n * @return {InstantSearchManager} a new instance of InstantSearchManager\n */\nexport default function createInstantSearchManager({\n  indexName,\n  initialState = {},\n  searchClient,\n  resultsState,\n  stalledSearchDelay,\n}) {\n  const helper = algoliasearchHelper(searchClient, indexName, {\n    ...HIGHLIGHT_TAGS,\n  });\n\n  addAlgoliaAgents(searchClient);\n\n  helper\n    .on('search', handleNewSearch)\n    .on('result', handleSearchSuccess({ indexId: indexName }))\n    .on('error', handleSearchError);\n\n  let skip = false;\n  let stalledSearchTimer = null;\n  let initialSearchParameters = helper.state;\n\n  const widgetsManager = createWidgetsManager(onWidgetsUpdate);\n\n  hydrateSearchClient(searchClient, resultsState);\n\n  const store = createStore({\n    widgets: initialState,\n    metadata: hydrateMetadata(resultsState),\n    results: hydrateResultsState(resultsState),\n    error: null,\n    searching: false,\n    isSearchStalled: true,\n    searchingForFacetValues: false,\n  });\n\n  function skipSearch() {\n    skip = true;\n  }\n\n  function updateClient(client) {\n    addAlgoliaAgents(client);\n    helper.setClient(client);\n    search();\n  }\n\n  function clearCache() {\n    helper.clearCache();\n    search();\n  }\n\n  function getMetadata(state) {\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getMetadata))\n      .map((widget) => widget.getMetadata(state));\n  }\n\n  function getSearchParameters() {\n    const sharedParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter(\n        (widget) => !isMultiIndexContext(widget) && !isIndexWidget(widget)\n      )\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        initialSearchParameters\n      );\n\n    const mainParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexEqualMainIndex =\n          isIndexWidget(widget) && isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexEqualMainIndex || subIndexEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      );\n\n    const derivedIndices = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexNotEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          !isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexNotEqualMainIndex =\n          isIndexWidget(widget) && !isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexNotEqualMainIndex || subIndexNotEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce((indices, widget) => {\n        const indexId = isMultiIndexContext(widget)\n          ? widget.props.indexContextValue.targetedIndex\n          : widget.props.indexId;\n\n        const widgets = indices[indexId] || [];\n\n        return {\n          ...indices,\n          [indexId]: widgets.concat(widget),\n        };\n      }, {});\n\n    const derivedParameters = Object.keys(derivedIndices).map((indexId) => ({\n      parameters: derivedIndices[indexId].reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      ),\n      indexId,\n    }));\n\n    return {\n      mainParameters,\n      derivedParameters,\n    };\n  }\n\n  function search() {\n    if (!skip) {\n      const { mainParameters, derivedParameters } = getSearchParameters(\n        helper.state\n      );\n\n      // We have to call `slice` because the method `detach` on the derived\n      // helpers mutates the value `derivedHelpers`. The `forEach` loop does\n      // not iterate on each value and we're not able to correctly clear the\n      // previous derived helpers (memory leak + useless requests).\n      helper.derivedHelpers.slice().forEach((derivedHelper) => {\n        // Since we detach the derived helpers on **every** new search they\n        // won't receive intermediate results in case of a stalled search.\n        // Only the last result is dispatched by the derived helper because\n        // they are not detached yet:\n        //\n        // - a -> main helper receives results\n        // - ap -> main helper receives results\n        // - app -> main helper + derived helpers receive results\n        //\n        // The quick fix is to avoid to detach them on search but only once they\n        // received the results. But it means that in case of a stalled search\n        // all the derived helpers not detached yet register a new search inside\n        // the helper. The number grows fast in case of a bad network and it's\n        // not deterministic.\n        derivedHelper.detach();\n      });\n\n      derivedParameters.forEach(({ indexId, parameters }) => {\n        const derivedHelper = helper.derive(() => parameters);\n\n        derivedHelper\n          .on('result', handleSearchSuccess({ indexId }))\n          .on('error', handleSearchError);\n      });\n\n      helper.setState(mainParameters);\n\n      helper.search();\n    }\n  }\n\n  function handleSearchSuccess({ indexId }) {\n    return (event) => {\n      const state = store.getState();\n      const isDerivedHelpersEmpty = !helper.derivedHelpers.length;\n\n      let results = state.results ? state.results : {};\n\n      // Switching from mono index to multi index and vice versa must reset the\n      // results to an empty object, otherwise we keep reference of stalled and\n      // unused results.\n      results = !isDerivedHelpersEmpty && results.getFacetByName ? {} : results;\n\n      if (!isDerivedHelpersEmpty) {\n        results = { ...results, [indexId]: event.results };\n      } else {\n        results = event.results;\n      }\n\n      const currentState = store.getState();\n      let nextIsSearchStalled = currentState.isSearchStalled;\n      if (!helper.hasPendingRequests()) {\n        clearTimeout(stalledSearchTimer);\n        stalledSearchTimer = null;\n        nextIsSearchStalled = false;\n      }\n\n      const { resultsFacetValues, ...partialState } = currentState;\n\n      store.setState({\n        ...partialState,\n        results,\n        isSearchStalled: nextIsSearchStalled,\n        searching: false,\n        error: null,\n      });\n    };\n  }\n\n  function handleSearchError({ error }) {\n    const currentState = store.getState();\n\n    let nextIsSearchStalled = currentState.isSearchStalled;\n    if (!helper.hasPendingRequests()) {\n      clearTimeout(stalledSearchTimer);\n      nextIsSearchStalled = false;\n    }\n\n    const { resultsFacetValues, ...partialState } = currentState;\n\n    store.setState({\n      ...partialState,\n      isSearchStalled: nextIsSearchStalled,\n      error,\n      searching: false,\n    });\n  }\n\n  function handleNewSearch() {\n    if (!stalledSearchTimer) {\n      stalledSearchTimer = setTimeout(() => {\n        const { resultsFacetValues, ...partialState } = store.getState();\n\n        store.setState({\n          ...partialState,\n          isSearchStalled: true,\n        });\n      }, stalledSearchDelay);\n    }\n  }\n\n  function hydrateSearchClient(client, results) {\n    if (!results) {\n      return;\n    }\n\n    // Disable cache hydration on:\n    // - Algoliasearch API Client < v4 with cache disabled\n    // - Third party clients (detected by the `addAlgoliaAgent` function missing)\n\n    if (\n      (!client.transporter || client._cacheHydrated) &&\n      (!client._useCache || typeof client.addAlgoliaAgent !== 'function')\n    ) {\n      return;\n    }\n\n    // Algoliasearch API Client >= v4\n    // To hydrate the client we need to populate the cache with the data from\n    // the server (done in `hydrateSearchClientWithMultiIndexRequest` or\n    // `hydrateSearchClientWithSingleIndexRequest`). But since there is no way\n    // for us to compute the key the same way as `algoliasearch-client` we need\n    // to populate it on a custom key and override the `search` method to\n    // search on it first.\n    if (client.transporter && !client._cacheHydrated) {\n      client._cacheHydrated = true;\n\n      const baseMethod = client.search;\n      client.search = (requests, ...methodArgs) => {\n        const requestsWithSerializedParams = requests.map((request) => ({\n          ...request,\n          params: serializeQueryParameters(request.params),\n        }));\n\n        return client.transporter.responsesCache.get(\n          {\n            method: 'search',\n            args: [requestsWithSerializedParams, ...methodArgs],\n          },\n          () => {\n            return baseMethod(requests, ...methodArgs);\n          }\n        );\n      };\n    }\n\n    if (Array.isArray(results.results)) {\n      hydrateSearchClientWithMultiIndexRequest(client, results.results);\n      return;\n    }\n\n    hydrateSearchClientWithSingleIndexRequest(client, results);\n  }\n\n  function hydrateSearchClientWithMultiIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.reduce(\n              (acc, result) =>\n                acc.concat(\n                  result.rawResults.map((request) => ({\n                    indexName: request.index,\n                    params: request.params,\n                  }))\n                ),\n              []\n            ),\n          ],\n        },\n        {\n          results: results.reduce(\n            (acc, result) => acc.concat(result.rawResults),\n            []\n          ),\n        }\n      );\n      return;\n    }\n\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.reduce(\n        (acc, result) =>\n          acc.concat(\n            result.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            }))\n          ),\n        []\n      ),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.reduce(\n          (acc, result) => acc.concat(result.rawResults),\n          []\n        ),\n      }),\n    };\n  }\n\n  function hydrateSearchClientWithSingleIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            })),\n          ],\n        },\n        {\n          results: results.rawResults,\n        }\n      );\n      return;\n    }\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.rawResults.map((request) => ({\n        indexName: request.index,\n        params: request.params,\n      })),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.rawResults,\n      }),\n    };\n  }\n\n  function hydrateResultsState(results) {\n    if (!results) {\n      return null;\n    }\n\n    if (Array.isArray(results.results)) {\n      return results.results.reduce(\n        (acc, result) => ({\n          ...acc,\n          [result._internalIndexId]: new algoliasearchHelper.SearchResults(\n            new algoliasearchHelper.SearchParameters(result.state),\n            result.rawResults\n          ),\n        }),\n        {}\n      );\n    }\n\n    return new algoliasearchHelper.SearchResults(\n      new algoliasearchHelper.SearchParameters(results.state),\n      results.rawResults\n    );\n  }\n\n  // Called whenever a widget has been rendered with new props.\n  function onWidgetsUpdate() {\n    const metadata = getMetadata(store.getState().widgets);\n\n    store.setState({\n      ...store.getState(),\n      metadata,\n      searching: true,\n    });\n\n    // Since the `getSearchParameters` method of widgets also depends on props,\n    // the result search parameters might have changed.\n    search();\n  }\n\n  function transitionState(nextSearchState) {\n    const searchState = store.getState().widgets;\n\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.transitionState))\n      .reduce(\n        (res, widget) => widget.transitionState(searchState, res),\n        nextSearchState\n      );\n  }\n\n  function onExternalStateUpdate(nextSearchState) {\n    const metadata = getMetadata(nextSearchState);\n\n    store.setState({\n      ...store.getState(),\n      widgets: nextSearchState,\n      metadata,\n      searching: true,\n    });\n\n    search();\n  }\n\n  function onSearchForFacetValues({ facetName, query, maxFacetHits = 10 }) {\n    // The values 1, 100 are the min / max values that the engine accepts.\n    // see: https://www.algolia.com/doc/api-reference/api-parameters/maxFacetHits\n    const maxFacetHitsWithinRange = Math.max(1, Math.min(maxFacetHits, 100));\n\n    store.setState({\n      ...store.getState(),\n      searchingForFacetValues: true,\n    });\n\n    helper\n      .searchForFacetValues(facetName, query, maxFacetHitsWithinRange)\n      .then(\n        (content) => {\n          store.setState({\n            ...store.getState(),\n            error: null,\n            searchingForFacetValues: false,\n            resultsFacetValues: {\n              ...store.getState().resultsFacetValues,\n              [facetName]: content.facetHits,\n              query,\n            },\n          });\n        },\n        (error) => {\n          store.setState({\n            ...store.getState(),\n            searchingForFacetValues: false,\n            error,\n          });\n        }\n      )\n      .catch((error) => {\n        // Since setState is synchronous, any error that occurs in the render of a\n        // component will be swallowed by this promise.\n        // This is a trick to make the error show up correctly in the console.\n        // See http://stackoverflow.com/a/30741722/969302\n        setTimeout(() => {\n          throw error;\n        });\n      });\n  }\n\n  function updateIndex(newIndex) {\n    initialSearchParameters = initialSearchParameters.setIndex(newIndex);\n    // No need to trigger a new search here as the widgets will also update and trigger it if needed.\n  }\n\n  function getWidgetsIds() {\n    return store\n      .getState()\n      .metadata.reduce(\n        (res, meta) =>\n          typeof meta.id !== 'undefined' ? res.concat(meta.id) : res,\n        []\n      );\n  }\n\n  return {\n    store,\n    widgetsManager,\n    getWidgetsIds,\n    getSearchParameters,\n    onSearchForFacetValues,\n    onExternalStateUpdate,\n    transitionState,\n    updateClient,\n    updateIndex,\n    clearCache,\n    skipSearch,\n  };\n}\n\nfunction hydrateMetadata(resultsState) {\n  if (!resultsState) {\n    return [];\n  }\n\n  // add a value noop, which gets replaced once the widgets are mounted\n  return resultsState.metadata.map((datum) => ({\n    value: () => ({}),\n    ...datum,\n    items:\n      datum.items &&\n      datum.items.map((item) => ({\n        value: () => ({}),\n        ...item,\n        items:\n          item.items &&\n          item.items.map((nestedItem) => ({\n            value: () => ({}),\n            ...nestedItem,\n          })),\n      })),\n  }));\n}\n","import type { Component } from 'react';\nimport type { ConnectorDescription } from './createConnector';\nimport { defer } from './utils';\n\nexport type Widget = Component & {\n  constructor: {\n    displayName?: string;\n    _connectorDesc?: ConnectorDescription;\n  };\n};\n\nexport type WidgetsManager = ReturnType<typeof createWidgetsManager>;\n\nexport default function createWidgetsManager(onWidgetsUpdate: () => void) {\n  const widgets: Widget[] = [];\n  // Is an update scheduled?\n  let scheduled = false;\n\n  // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n    scheduled = true;\n    defer(() => {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n\n  return {\n    registerWidget(widget: Widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets() {\n      return widgets;\n    },\n  };\n}\n","type SearchState = any;\ntype ResultsState = any;\ntype ResultsFacetsValues = any;\ntype Listener = () => void;\ntype State = {\n  widgets: SearchState;\n  metadata: any[];\n  results: ResultsState | null;\n  resultsFacetValues: ResultsFacetsValues | null;\n  error: Error | null;\n  searching: boolean;\n  isSearchStalled: boolean;\n  searchingForFacetValues: boolean;\n};\nexport default function createStore(initialState: State) {\n  let state = initialState;\n  const listeners: Listener[] = [];\n  return {\n    getState() {\n      return state;\n    },\n    setState(nextState: State) {\n      state = nextState;\n      listeners.forEach((listener) => listener());\n    },\n    subscribe(listener: Listener) {\n      listeners.push(listener);\n      return function unsubscribe() {\n        listeners.splice(listeners.indexOf(listener), 1);\n      };\n    },\n  };\n}\n\nexport type Store = ReturnType<typeof createStore>;\n","import type { SearchClient } from '../widgets/InstantSearch';\nimport type { Widget } from './createWidgetsManager';\n\nexport function isMetadataEnabled() {\n  return (\n    typeof window === 'object' &&\n    typeof window.navigator === 'object' &&\n    typeof window.navigator.userAgent === 'string' &&\n    window.navigator.userAgent.includes('Algolia Crawler') &&\n    typeof window.document === 'object'\n  );\n}\n\nexport function getMetadataPayload(\n  widgets: Widget[],\n  searchClient: SearchClient\n) {\n  const internalProps = ['contextValue', 'indexContextValue'];\n\n  const widgetsPayload = widgets.map(({ props, constructor }) => {\n    const { defaultProps = {}, displayName = constructor.displayName } =\n      constructor._connectorDesc || {};\n\n    return {\n      displayName,\n      params: Object.keys(props).filter(\n        (prop) =>\n          !internalProps.includes(prop) &&\n          defaultProps[prop] !== props[prop] &&\n          props[prop] !== undefined\n      ),\n    };\n  });\n\n  const client = searchClient as Record<string, any>;\n  const ua =\n    client.transporter && client.transporter.userAgent\n      ? client.transporter.userAgent.value\n      : client._ua;\n\n  return {\n    ua,\n    widgets: widgetsPayload,\n  };\n}\n\nexport function injectMetadata(widgets: Widget[], searchClient: SearchClient) {\n  const payloadContainer = document.createElement('meta');\n  const refNode = document.querySelector('head')!;\n  payloadContainer.name = 'algolia:metadata';\n\n  const payload = getMetadataPayload(widgets, searchClient);\n\n  payloadContainer.content = JSON.stringify(payload);\n  refNode.appendChild(payloadContainer);\n}\n","import React, { Component, Children } from 'react';\nimport isEqual from 'react-fast-compare';\nimport PropTypes from 'prop-types';\nimport createInstantSearchManager from '../core/createInstantSearchManager';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchProvider } from '../core/context';\nimport type { Store } from '../core/createStore';\nimport type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport type { MultiResponse } from '../types/algoliasearch';\nimport type { ConnectorDescription } from '../core/createConnector';\nimport type { WidgetsManager } from '../core/createWidgetsManager';\nimport { isMetadataEnabled, injectMetadata } from '../core/metadata';\n\ntype ResultsState = {\n  metadata: never[];\n  state: PlainSearchParameters;\n  rawResults: MultiResponse;\n};\n\n// @TODO: move to createInstantSearchManager when it's TS\ntype InstantSearchManager = {\n  store: Store;\n  widgetsManager: WidgetsManager;\n  getWidgetsIds(): any;\n  getSearchParameters(...args: any[]): {\n    mainParameters: SearchParameters;\n    derivedParameters: SearchParameters;\n  };\n  onSearchForFacetValues(...args: any[]): any;\n  onExternalStateUpdate(...args: any[]): any;\n  transitionState: any;\n  updateClient: any;\n  updateIndex: any;\n  clearCache(): void;\n  skipSearch(...args: any[]): any;\n};\n\nexport type SearchClient = {\n  search: (requests: Array<{}>) => Promise<{}>;\n  searchForFacetValues: (requests: Array<{}>) => Promise<{}>;\n};\n\ntype SearchState = any;\n\ntype Props = {\n  refresh: boolean;\n  indexName: string;\n  searchClient: SearchClient;\n  createURL?: (searchState: SearchState, knownKeys: any) => string;\n  onSearchStateChange?: (searchState: SearchState) => void;\n  searchState?: SearchState;\n  onSearchParameters?: (\n    getSearchParameters: ConnectorDescription['getSearchParameters'],\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext },\n    props: object,\n    searchState: SearchState\n  ) => void;\n  widgetsCollector?: (args: {\n    getSearchParameters: ConnectorDescription['getSearchParameters'];\n    getMetadata: ConnectorDescription['getMetadata'];\n    searchState: SearchState;\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext };\n    props: object;\n    displayName: string;\n  }) => void;\n  stalledSearchDelay?: number;\n  resultsState?: ResultsState | { [indexId: string]: ResultsState };\n};\n\ntype State = {\n  isControlled: boolean;\n  instantSearchManager: InstantSearchManager;\n  contextValue: InstantSearchContext;\n};\n\nfunction isControlled(props: Props) {\n  return Boolean(props.searchState);\n}\n\n/**\n * @description\n * `<InstantSearch>` is the root component of all React InstantSearch implementations.\n * It provides all the connected components (aka widgets) a means to interact\n * with the searchState.\n * @kind widget\n * @name <InstantSearch>\n * @requirements You will need to have an Algolia account to be able to use this widget.\n * [Create one now](https://www.algolia.com/users/sign_up).\n * @propType {string} indexName - Main index in which to search.\n * @propType {boolean} [refresh=false] - Flag to activate when the cache needs to be cleared so that the front-end is updated when a change occurs in the index.\n * @propType {object} [searchClient] - Provide a custom search client.\n * @propType {func} [onSearchStateChange] - Function to be called everytime a new search is done. Useful for [URL Routing](guide/Routing.html).\n * @propType {object} [searchState] - Object to inject some search state. Switches the InstantSearch component in controlled mode. Useful for [URL Routing](guide/Routing.html).\n * @propType {func} [createURL] - Function to call when creating links, useful for [URL Routing](guide/Routing.html).\n * @propType {SearchResults|SearchResults[]} [resultsState] - Use this to inject the results that will be used at first rendering. Those results are found by using the `findResultsState` function. Useful for [Server Side Rendering](guide/Server-side_rendering.html).\n * @propType {number} [stalledSearchDelay=200] - The amount of time before considering that the search takes too much time. The time is expressed in milliseconds.\n * @propType {{ Root: string|function, props: object }} [root] - Use this to customize the root element. Default value: `{ Root: 'div' }`\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\nclass InstantSearch extends Component<Props, State> {\n  static defaultProps = {\n    stalledSearchDelay: 200,\n    refresh: false,\n  };\n\n  static propTypes = {\n    // @TODO: These props are currently constant.\n    indexName: PropTypes.string.isRequired,\n\n    searchClient: PropTypes.shape({\n      search: PropTypes.func.isRequired,\n      searchForFacetValues: PropTypes.func,\n      addAlgoliaAgent: PropTypes.func,\n      clearCache: PropTypes.func,\n    }).isRequired,\n\n    createURL: PropTypes.func,\n\n    refresh: PropTypes.bool,\n\n    searchState: PropTypes.object,\n    onSearchStateChange: PropTypes.func,\n\n    onSearchParameters: PropTypes.func,\n    widgetsCollector: PropTypes.func,\n    resultsState: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n    children: PropTypes.node,\n    stalledSearchDelay: PropTypes.number,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): Partial<State> {\n    const nextIsControlled = isControlled(nextProps);\n    const previousSearchState =\n      prevState.instantSearchManager.store.getState().widgets;\n    const nextSearchState = nextProps.searchState;\n\n    if (nextIsControlled && !isEqual(previousSearchState, nextSearchState)) {\n      prevState.instantSearchManager.onExternalStateUpdate(\n        nextProps.searchState\n      );\n    }\n\n    return {\n      isControlled: nextIsControlled,\n      contextValue: {\n        ...prevState.contextValue,\n        mainTargetedIndex: nextProps.indexName,\n      },\n    };\n  }\n\n  isUnmounting: boolean = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    const instantSearchManager = createInstantSearchManager({\n      indexName: this.props.indexName,\n      searchClient: this.props.searchClient,\n      initialState: this.props.searchState || {},\n      resultsState: this.props.resultsState,\n      stalledSearchDelay: this.props.stalledSearchDelay,\n    });\n\n    const contextValue = {\n      store: instantSearchManager.store,\n      widgetsManager: instantSearchManager.widgetsManager,\n      mainTargetedIndex: this.props.indexName,\n      onInternalStateUpdate: this.onWidgetsInternalStateUpdate.bind(this),\n      createHrefForState: this.createHrefForState.bind(this),\n      onSearchForFacetValues: this.onSearchForFacetValues.bind(this),\n      onSearchStateChange: this.onSearchStateChange.bind(this),\n      onSearchParameters: this.onSearchParameters.bind(this),\n    };\n\n    this.state = {\n      isControlled: isControlled(this.props),\n      instantSearchManager,\n      contextValue,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevIsControlled = isControlled(prevProps);\n\n    if (prevIsControlled && !this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being controlled to uncontrolled\"\n      );\n    }\n\n    if (!prevIsControlled && this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being uncontrolled to controlled\"\n      );\n    }\n\n    if (this.props.refresh !== prevProps.refresh && this.props.refresh) {\n      this.state.instantSearchManager.clearCache();\n    }\n\n    if (prevProps.indexName !== this.props.indexName) {\n      this.state.instantSearchManager.updateIndex(this.props.indexName);\n    }\n\n    if (prevProps.searchClient !== this.props.searchClient) {\n      this.state.instantSearchManager.updateClient(this.props.searchClient);\n    }\n  }\n\n  componentDidMount() {\n    if (isMetadataEnabled()) {\n      injectMetadata(\n        this.state.instantSearchManager.widgetsManager.getWidgets(),\n        this.props.searchClient\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true;\n    this.state.instantSearchManager.skipSearch();\n  }\n\n  createHrefForState(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n    return this.state.isControlled && this.props.createURL\n      ? this.props.createURL(searchState, this.getKnownKeys())\n      : '#';\n  }\n\n  onWidgetsInternalStateUpdate(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n\n    this.onSearchStateChange(searchState);\n\n    if (!this.state.isControlled) {\n      this.state.instantSearchManager.onExternalStateUpdate(searchState);\n    }\n  }\n\n  onSearchStateChange(searchState) {\n    if (this.props.onSearchStateChange && !this.isUnmounting) {\n      this.props.onSearchStateChange(searchState);\n    }\n  }\n\n  onSearchParameters(\n    getSearchParameters: ConnectorDescription['getMetadata'],\n    context: {\n      ais: InstantSearchContext;\n      multiIndexContext: IndexContext;\n    },\n    props: object,\n    getMetadata: ConnectorDescription['getMetadata'],\n    displayName: string\n  ) {\n    if (this.props.onSearchParameters) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.onSearchParameters(\n        getSearchParameters,\n        context,\n        props,\n        searchState\n      );\n    }\n    if (this.props.widgetsCollector) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.widgetsCollector({\n        getSearchParameters,\n        getMetadata,\n        context,\n        props,\n        searchState,\n        displayName,\n      });\n    }\n  }\n\n  onSearchForFacetValues(searchState) {\n    this.state.instantSearchManager.onSearchForFacetValues(searchState);\n  }\n\n  getKnownKeys() {\n    return this.state.instantSearchManager.getWidgetsIds();\n  }\n\n  render() {\n    if (Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <InstantSearchProvider value={this.state.contextValue}>\n        {this.props.children}\n      </InstantSearchProvider>\n    );\n  }\n}\n\nexport default InstantSearch;\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\nimport { addQueryID, addAbsolutePositions } from '../core/utils';\n\nconst getId = () => 'query';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (\n      searchResults.results.hits &&\n      Array.isArray(searchResults.results.hits)\n    ) {\n      return addAbsolutePositions(\n        addQueryID(searchResults.results.hits, searchResults.results.queryID),\n        searchResults.results.hitsPerPage,\n        searchResults.results.page\n      );\n    } else {\n      return Object.keys(searchResults.results).reduce(\n        (hits, index) => [\n          ...hits,\n          {\n            index,\n            hits: addAbsolutePositions(\n              addQueryID(\n                searchResults.results[index].hits,\n                searchResults.results[index].queryID\n              ),\n              searchResults.results[index].hitsPerPage,\n              searchResults.results[index].page\n            ),\n          },\n        ],\n        []\n      );\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  /**\n   * AutoComplete needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { refineValue, getResults } from '../core/indexUtils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction transformValue(values) {\n  return values.reduce((acc, item) => {\n    if (item.isRefined) {\n      acc.push({\n        label: item.name,\n        // If dealing with a nested \"items\", \"value\" is equal to the previous value concatenated with the current label\n        // If dealing with the first level, \"value\" is equal to the current label\n        value: item.path,\n      });\n      // Create a variable in order to keep the same acc for the recursion, otherwise \"reduce\" returns a new one\n      if (item.data) {\n        acc = acc.concat(transformValue(item.data, acc));\n      }\n    }\n    return acc;\n  }, []);\n}\n\n/**\n * The breadcrumb component is s a type of secondary navigation scheme that\n * reveals the user’s location in a website or web application.\n *\n * @name connectBreadcrumb\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a Breadcrumb of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Breadcrumb can display.\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaBreadcrumb',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const id = getId(props);\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const values = results.getFacetValues(id);\n\n    const items = values.data ? transformValue(values.data) : [];\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      canRefine: transformedItems.length > 0,\n      items: transformedItems,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\n\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attribute: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attribute` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\nexport default createConnector({\n  displayName: 'AlgoliaCurrentRefinements',\n\n  propTypes: {\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults, metadata) {\n    const items = metadata.reduce((res, meta) => {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (\n            props.clearsQuery &&\n            meta.id === 'query' &&\n            meta.items[0].currentRefinement === ''\n          ) {\n            return res;\n          }\n          return res.concat(\n            meta.items.map((item) => ({\n              ...item,\n              id: meta.id,\n              index: meta.index,\n            }))\n          );\n        }\n      }\n      return res;\n    }, []);\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    const refinementsToClear =\n      items instanceof Array ? items.map((item) => item.value) : [items];\n    return refinementsToClear.reduce((res, clear) => clear(res), searchState);\n  },\n});\n","import { objectHasKeys } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  getResults,\n  getCurrentRefinementValue,\n  getIndexId,\n  refineValue,\n  cleanUpValue,\n} from '../core/indexUtils';\n\n/**\n * The GeoSearch connector provides the logic to build a widget that will display the results on a map.\n * It also provides a way to search for results based on their position. The connector provides function to manage the search experience (search on map interaction).\n * @name connectGeoSearch\n * @kind connector\n * @requirements Note that the GeoSearch connector uses the [geosearch](https://www.algolia.com/doc/guides/searching/geo-search) capabilities of Algolia.\n * Your hits **must** have a `_geoloc` attribute in order to be passed to the rendering function. Currently, the feature is not compatible with multiple values in the `_geoloc` attribute\n * (e.g. a restaurant with multiple locations). In that case you can duplicate your records and use the [distinct](https://www.algolia.com/doc/guides/ranking/distinct) feature of Algolia to only retrieve unique results.\n * @propType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [defaultRefinement] - Default search state of the widget containing the bounds for the map\n * @providedPropType {function({ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } })} refine - a function to toggle the refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<object>} hits - the records that matched the search\n * @providedPropType {boolean} isRefinedWithMap - true if the current refinement is set with the map bounds\n * @providedPropType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [currentRefinement] - the refinement currently applied\n * @providedPropType {{ lat: number, lng: number }} [position] - the position of the search\n */\n\n// To control the map with an external widget the other widget\n// **must** write the value in the attribute `aroundLatLng`\nconst getBoundingBoxId = () => 'boundingBox';\nconst getAroundLatLngId = () => 'aroundLatLng';\nconst getConfigureAroundLatLngId = () => 'configure.aroundLatLng';\n\nconst currentRefinementToString = (currentRefinement) =>\n  [\n    currentRefinement.northEast.lat,\n    currentRefinement.northEast.lng,\n    currentRefinement.southWest.lat,\n    currentRefinement.southWest.lng,\n  ].join();\n\nconst stringToCurrentRefinement = (value) => {\n  const values = value.split(',');\n\n  return {\n    northEast: {\n      lat: parseFloat(values[0]),\n      lng: parseFloat(values[1]),\n    },\n    southWest: {\n      lat: parseFloat(values[2]),\n      lng: parseFloat(values[3]),\n    },\n  };\n};\n\nconst latLngRegExp = /^(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)$/;\nconst stringToPosition = (value) => {\n  const pattern = value.match(latLngRegExp);\n\n  return {\n    lat: parseFloat(pattern[1]),\n    lng: parseFloat(pattern[2]),\n  };\n};\n\nconst getCurrentRefinement = (props, searchState, context) => {\n  const refinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    getBoundingBoxId(),\n    {}\n  );\n\n  if (!objectHasKeys(refinement)) {\n    return;\n  }\n\n  // eslint-disable-next-line consistent-return\n  return {\n    northEast: {\n      lat: parseFloat(refinement.northEast.lat),\n      lng: parseFloat(refinement.northEast.lng),\n    },\n    southWest: {\n      lat: parseFloat(refinement.southWest.lat),\n      lng: parseFloat(refinement.southWest.lng),\n    },\n  };\n};\n\nconst getCurrentPosition = (props, searchState, context) => {\n  const { defaultRefinement, ...propsWithoutDefaultRefinement } = props;\n\n  const aroundLatLng = getCurrentRefinementValue(\n    propsWithoutDefaultRefinement,\n    searchState,\n    context,\n    getAroundLatLngId()\n  );\n\n  if (!aroundLatLng) {\n    // Fallback on `configure.aroundLatLng`\n    const configureAroundLatLng = getCurrentRefinementValue(\n      propsWithoutDefaultRefinement,\n      searchState,\n      context,\n      getConfigureAroundLatLngId()\n    );\n\n    return configureAroundLatLng && stringToPosition(configureAroundLatLng);\n  }\n\n  return aroundLatLng;\n};\n\nconst refine = (searchState, nextValue, context) => {\n  const resetPage = true;\n  const nextRefinement = {\n    [getBoundingBoxId()]: nextValue,\n  };\n\n  return refineValue(searchState, nextRefinement, context, resetPage);\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaGeoSearch',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n\n    const results = getResults(searchResults, context);\n\n    // We read it from both because the SearchParameters & the searchState are not always\n    // in sync. When we set the refinement the searchState is used but when we clear the refinement\n    // the SearchParameters is used. In the first case when we render, the results are not there\n    // so we can't find the value from the results. The most up to date value is the searchState.\n    // But when we clear the refinement the searchState is immediately cleared even when the items\n    // retrieved are still the one from the previous query with the bounding box. It leads to some\n    // issue with the position of the map. We should rely on 1 source of truth or at least always\n    // be sync.\n\n    const currentRefinementFromSearchState = getCurrentRefinement(\n      props,\n      searchState,\n      context\n    );\n\n    const currentRefinementFromSearchParameters =\n      (results &&\n        results._state.insideBoundingBox &&\n        stringToCurrentRefinement(results._state.insideBoundingBox)) ||\n      undefined;\n\n    const currentPositionFromSearchState = getCurrentPosition(\n      props,\n      searchState,\n      context\n    );\n\n    const currentPositionFromSearchParameters =\n      (results &&\n        results._state.aroundLatLng &&\n        stringToPosition(results._state.aroundLatLng)) ||\n      undefined;\n\n    const currentRefinement =\n      currentRefinementFromSearchState || currentRefinementFromSearchParameters;\n\n    const position =\n      currentPositionFromSearchState || currentPositionFromSearchParameters;\n\n    return {\n      hits: !results ? [] : results.hits.filter((_) => Boolean(_._geoloc)),\n      isRefinedWithMap: Boolean(currentRefinement),\n      currentRefinement,\n      position,\n    };\n  },\n\n  refine(props, searchState, nextValue) {\n    return refine(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!currentRefinement) {\n      return searchParameters;\n    }\n\n    return searchParameters.setQueryParameter(\n      'insideBoundingBox',\n      currentRefinementToString(currentRefinement)\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getBoundingBoxId()\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const items = [];\n    const id = getBoundingBoxId();\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    const index = getIndexId(context);\n    const nextRefinement = {};\n    const currentRefinement = getCurrentRefinement(props, searchState, context);\n\n    if (currentRefinement) {\n      items.push({\n        label: `${id}: ${currentRefinementToString(currentRefinement)}`,\n        value: (nextState) => refine(nextState, nextRefinement, context),\n        currentRefinement,\n      });\n    }\n\n    return {\n      id,\n      index,\n      items,\n    };\n  },\n\n  shouldComponentUpdate() {\n    return true;\n  },\n});\n","import PropTypes from 'prop-types';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(path, props, searchState, context) {\n  const { id, attributes, separator, rootPath, showParentLevel } = props;\n\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  let nextRefinement;\n\n  if (currentRefinement === null) {\n    nextRefinement = path;\n  } else {\n    const tmpSearchParameters = new algoliasearchHelper.SearchParameters({\n      hierarchicalFacets: [\n        {\n          name: id,\n          attributes,\n          separator,\n          rootPath,\n          showParentLevel,\n        },\n      ],\n    });\n\n    nextRefinement = tmpSearchParameters\n      .toggleHierarchicalFacetRefinement(id, currentRefinement)\n      .toggleHierarchicalFacetRefinement(id, path)\n      .getHierarchicalRefinement(id)[0];\n  }\n\n  return nextRefinement;\n}\n\nfunction transformValue(value, props, searchState, context) {\n  return value.map((v) => ({\n    label: v.name,\n    value: getValue(v.path, props, searchState, context),\n    count: v.count,\n    isRefined: v.isRefined,\n    items: v.data && transformValue(v.data, props, searchState, context),\n  }));\n}\n\nconst truncate = (items = [], limit = 10) =>\n  items.slice(0, limit).map((item = {}) =>\n    Array.isArray(item.items)\n      ? {\n          ...item,\n          items: truncate(item.items, limit),\n        }\n      : item\n  );\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst sortBy = ['name:asc'];\n\n/**\n * connectHierarchicalMenu connector provides the logic to build a widget that will\n * give the user the ability to explore a tree-like structure.\n * This is commonly used for multi-level categorization of products on e-commerce\n * websites. From a UX point of view, we suggest not displaying more than two levels deep.\n * @name connectHierarchicalMenu\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a hiearchical menu of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {string} [defaultRefinement] - the item value selected by default\n * @propType {boolean} [showMore=false] - Flag to activate the show more button, for toggling the number of items between limit and showMoreLimit.\n * @propType {number} [limit=10] -  The maximum number of items displayed.\n * @propType {number} [showMoreLimit=20] -  The maximum number of items displayed when the user triggers the show more. Not considered if `showMore` is false.\n * @propType {string} [separator='>'] -  Specifies the level separator used in the data.\n * @propType {string} [rootPath=null] - The path to use if the first level is not the root level.\n * @propType {boolean} [showParentLevel=true] - Flag to set if the parent level should be displayed.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the HierarchicalMenu can display. items has the same shape as parent items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHierarchicalMenu',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    separator: PropTypes.string,\n    rootPath: PropTypes.string,\n    showParentLevel: PropTypes.bool,\n    defaultRefinement: PropTypes.string,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    separator: ' > ',\n    rootPath: null,\n    showParentLevel: true,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { showMore, limit, showMoreLimit, facetOrdering } = props;\n    const id = getId(props);\n\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine: false,\n      };\n    }\n    const itemsLimit = showMore ? showMoreLimit : limit;\n    const value = results.getFacetValues(id, { sortBy, facetOrdering });\n    const items = value.data\n      ? transformValue(value.data, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        })\n      : [];\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n    return {\n      items: truncate(transformedItems, itemsLimit),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const {\n      attributes,\n      separator,\n      rootPath,\n      showParentLevel,\n      showMore,\n      limit,\n      showMoreLimit,\n      contextValue,\n    } = props;\n\n    const id = getId(props);\n    const itemsLimit = showMore ? showMoreLimit : limit;\n\n    searchParameters = searchParameters\n      .addHierarchicalFacet({\n        name: id,\n        attributes,\n        separator,\n        rootPath,\n        showParentLevel,\n      })\n      .setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          searchParameters.maxValuesPerFacet || 0,\n          itemsLimit\n        ),\n      });\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.toggleHierarchicalFacetRefinement(\n        id,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const rootAttribute = props.attributes[0];\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = !currentRefinement\n      ? []\n      : [\n          {\n            label: `${rootAttribute}: ${currentRefinement}`,\n            attribute: rootAttribute,\n            value: (nextState) =>\n              refine(props, nextState, '', {\n                ais: props.contextValue,\n                multiIndexContext: props.indexContextValue,\n              }),\n            currentRefinement,\n          },\n        ];\n\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { HIGHLIGHT_TAGS, parseAlgoliaHit } from '../core/highlight';\n\nconst highlight = ({\n  attribute,\n  hit,\n  highlightProperty,\n  preTag = HIGHLIGHT_TAGS.highlightPreTag,\n  postTag = HIGHLIGHT_TAGS.highlightPostTag,\n}) =>\n  parseAlgoliaHit({\n    attribute,\n    highlightProperty,\n    hit,\n    preTag,\n    postTag,\n  });\n\n/**\n * connectHighlight connector provides the logic to create an highlighter\n * component that will retrieve, parse and render an highlighted attribute\n * from an Algolia hit.\n * @name connectHighlight\n * @kind connector\n * @category connector\n * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectHighlight } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const CustomHighlight = connectHighlight(\n *   ({ highlight, attribute, hit, highlightProperty }) => {\n *     const highlights = highlight({\n *       highlightProperty: '_highlightResult',\n *       attribute,\n *       hit\n *     });\n *\n *     return highlights.map(part => part.isHighlighted ? (\n *       <mark>{part.value}</mark>\n *     ) : (\n *       <span>{part.value}</span>\n *     ));\n *   }\n * );\n *\n * const Hit = ({ hit }) => (\n *   <p>\n *     <CustomHighlight attribute=\"name\" hit={hit} />\n *   </p>\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox defaultRefinement=\"pho\" />\n *     <Hits hitComponent={Hit} />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHighlighter',\n\n  propTypes: {},\n\n  getProvidedProps() {\n    return { highlight };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (!results) {\n      return { hits: [] };\n    }\n    const hitsWithPositions = addAbsolutePositions(\n      results.hits,\n      results.hitsPerPage,\n      results.page\n    );\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n    return { hits: hitsWithPositionsAndQueryID };\n  },\n\n  /**\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters(searchParameters) {\n    return searchParameters;\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHitsPerPage',\n\n  propTypes: {\n    defaultRefinement: PropTypes.number.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.number.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import isEqual from 'react-fast-compare';\n\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  refineValue,\n  getResults,\n} from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction getStateWithoutPage(state) {\n  const { page, ...rest } = state || {};\n  return rest;\n}\n\nfunction getInMemoryCache() {\n  let cachedHits = undefined;\n  let cachedState = undefined;\n  return {\n    read({ state }) {\n      return isEqual(cachedState, getStateWithoutPage(state))\n        ? cachedHits\n        : null;\n    },\n    write({ state, hits }) {\n      cachedState = getStateWithoutPage(state);\n      cachedHits = hits;\n    },\n  };\n}\n\nfunction extractHitsFromCachedHits(cachedHits) {\n  return Object.keys(cachedHits)\n    .map(Number)\n    .sort((a, b) => a - b)\n    .reduce((acc, page) => {\n      return acc.concat(cachedHits[page]);\n    }, []);\n}\n\n/**\n * InfiniteHits connector provides the logic to create connected\n * components that will render an continuous list of results retrieved from\n * Algolia. This connector provides a function to load more results.\n * @name connectInfiniteHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {boolean} hasMore - indicates if there are more pages to load\n * @providedPropType {function} refine - call to load more results\n */\nexport default createConnector({\n  displayName: 'AlgoliaInfiniteHits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        hits: [],\n        hasPrevious: false,\n        hasMore: false,\n        refine: () => {},\n        refinePrevious: () => {},\n        refineNext: () => {},\n      };\n    }\n\n    const { page, hits, hitsPerPage, nbPages, _state: state } = results;\n\n    this._cache = props.cache ? props.cache : this._cache || getInMemoryCache();\n    const cachedHits = this._cache.read({ state }) || {};\n\n    const hitsWithPositions = addAbsolutePositions(hits, hitsPerPage, page);\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n\n    cachedHits[page] = hitsWithPositionsAndQueryID;\n    this._cache.write({ state, hits: cachedHits });\n\n    /*\n      Math.min() and Math.max() returns Infinity or -Infinity when no argument is given.\n      But there is always something in this point because of `cachedHits[page]`.\n    */\n    const firstReceivedPage = Math.min(...Object.keys(cachedHits).map(Number));\n    const lastReceivedPage = Math.max(...Object.keys(cachedHits).map(Number));\n\n    const hasPrevious = firstReceivedPage > 0;\n    const lastPageIndex = nbPages - 1;\n    const hasMore = lastReceivedPage < lastPageIndex;\n    const refinePrevious = (event) => this.refine(event, firstReceivedPage - 1);\n    const refineNext = (event) => this.refine(event, lastReceivedPage + 1);\n\n    return {\n      hits: extractHitsFromCachedHits(cachedHits),\n      hasPrevious,\n      hasMore,\n      refinePrevious,\n      refineNext,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameters({\n      page:\n        getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }) - 1,\n    });\n  },\n\n  refine(props, searchState, event, index) {\n    const id = getId();\n    const nextValue = { [id]: index + 1 };\n    const resetPage = false;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getIndexId,\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nconst namespace = 'menu';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(name, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  return name === currentRefinement ? '' : name;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst defaultSortBy = ['count:desc', 'name:asc'];\n\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of diplayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [searchable=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaMenu',\n\n  propTypes: {\n    attribute: PropTypes.string.isRequired,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.string,\n    transformItems: PropTypes.func,\n    searchable: PropTypes.bool,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    meta,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        isFromSearch,\n        searchable,\n        canRefine,\n      };\n    }\n\n    let items;\n    if (isFromSearch) {\n      items = searchForFacetValuesResults[attribute].map((v) => ({\n        label: v.value,\n        value: getValue(v.value, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        _highlightResult: { label: { value: v.highlighted } },\n        count: v.count,\n        isRefined: v.isRefined,\n      }));\n    } else {\n      items = results\n        .getFacetValues(attribute, {\n          sortBy: searchable ? undefined : defaultSortBy,\n          facetOrdering,\n        })\n        .map((v) => ({\n          label: v.name,\n          value: getValue(v.name, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          count: v.count,\n          isRefined: v.isRefined,\n        }));\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${props.attribute}: ${currentRefinement}`,\n                attribute: props.attribute,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { find } from '../core/utils';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction stringifyItem(item) {\n  if (typeof item.start === 'undefined' && typeof item.end === 'undefined') {\n    return '';\n  }\n  const start = typeof item.start !== 'undefined' ? item.start : '';\n  const end = typeof item.end !== 'undefined' ? item.end : '';\n  return `${start}:${end}`;\n}\n\nfunction parseItem(value) {\n  if (value.length === 0) {\n    return { start: null, end: null };\n  }\n  const [startStr, endStr] = value.split(':');\n  return {\n    start: startStr.length > 0 ? parseFloat(startStr) : null,\n    end: endStr.length > 0 ? parseFloat(endStr) : null,\n  };\n}\n\nconst namespace = 'multiRange';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    '',\n    (currentRefinement) => {\n      if (currentRefinement === '') {\n        return '';\n      }\n      return currentRefinement;\n    }\n  );\n}\n\nfunction isRefinementsRangeIncludesInsideItemRange(stats, start, end) {\n  return (\n    (stats.min > start && stats.min < end) ||\n    (stats.max > start && stats.max < end)\n  );\n}\n\nfunction isItemRangeIncludedInsideRefinementsRange(stats, start, end) {\n  return (\n    (start > stats.min && start < stats.max) ||\n    (end > stats.min && end < stats.max)\n  );\n}\n\nfunction itemHasRefinement(attribute, results, value) {\n  const stats = results.getFacetByName(attribute)\n    ? results.getFacetStats(attribute)\n    : null;\n  const range = value.split(':');\n  const start =\n    Number(range[0]) === 0 || value === ''\n      ? Number.NEGATIVE_INFINITY\n      : Number(range[0]);\n  const end =\n    Number(range[1]) === 0 || value === ''\n      ? Number.POSITIVE_INFINITY\n      : Number(range[1]);\n  return !(\n    Boolean(stats) &&\n    (isRefinementsRangeIncludesInsideItemRange(stats, start, end) ||\n      isItemRangeIncludedInsideRefinementsRange(stats, start, end))\n  );\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const nextValue = { [getId(props, searchState)]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectNumericMenu connector provides the logic to build a widget that will\n * give the user the ability to select a range value for a numeric attribute.\n * Ranges are defined statically.\n * @name connectNumericMenu\n * @requirements The attribute passed to the `attribute` prop must be holding numerical values.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the records\n * @propType {{label: string, start: number, end: number}[]} items - List of options. With a text label, and upper and lower bounds.\n * @propType {string} [defaultRefinement] - the value of the item selected by default, follow the shape of a `string` with a pattern of `'{start}:{end}'`.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied.  follow the shape of a `string` with a pattern of `'{start}:{end}'` which corresponds to the current selected item. For instance, when the selected item is `{start: 10, end: 20}`, the searchState of the widget is `'10:20'`. When `start` isn't defined, the searchState of the widget is `':{end}'`, and the same way around when `end` isn't defined. However, when neither `start` nor `end` are defined, the searchState is an empty string.\n * @providedPropType {array.<{isRefined: boolean, label: string, value: string, isRefined: boolean, noRefinement: boolean}>} items - the list of ranges the NumericMenu can display.\n */\nexport default createConnector({\n  displayName: 'AlgoliaNumericMenu',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.node,\n        start: PropTypes.number,\n        end: PropTypes.number,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const attribute = props.attribute;\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = props.items.map((item) => {\n      const value = stringifyItem(item);\n      return {\n        label: item.label,\n        value,\n        isRefined: value === currentRefinement,\n        noRefinement: results\n          ? itemHasRefinement(getId(props), results, value)\n          : false,\n      };\n    });\n\n    const stats =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetStats(attribute)\n        : null;\n    const refinedItem = find(items, (item) => item.isRefined === true);\n    if (!items.some((item) => item.value === '')) {\n      items.push({\n        value: '',\n        isRefined: refinedItem === undefined,\n        noRefinement: !stats,\n        label: 'All',\n      });\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      currentRefinement,\n      canRefine:\n        transformedItems.length > 0 &&\n        transformedItems.some((item) => item.noRefinement === false),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n    const { start, end } = parseItem(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (typeof start === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '>=',\n        start\n      );\n    }\n    if (typeof end === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '<=',\n        end\n      );\n    }\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const value = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (value !== '') {\n      const { label } = find(\n        props.items,\n        (item) => stringifyItem(item) === value\n      );\n      items.push({\n        label: `${props.attribute}: ${label}`,\n        attribute: props.attribute,\n        currentRefinement: label,\n        value: (nextState) =>\n          refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction refine(props, searchState, nextPage, context) {\n  const id = getId();\n  const nextValue = { [id]: nextPage };\n  const resetPage = false;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\n/**\n * connectPagination connector provides the logic to build a widget that will\n * let the user displays hits corresponding to a certain page.\n * @name connectPagination\n * @kind connector\n * @propType {boolean} [showFirst=true] - Display the first page link.\n * @propType {boolean} [showLast=false] - Display the last page link.\n * @propType {boolean} [showPrevious=true] - Display the previous page link.\n * @propType {boolean} [showNext=true] - Display the next page link.\n * @propType {number} [padding=3] - How many page links to display around the current page.\n * @propType {number} [totalPages=Infinity] - Maximum number of pages to display.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {number} nbPages - the total of existing pages\n * @providedPropType {number} currentRefinement - the page refinement currently applied\n */\nexport default createConnector({\n  displayName: 'AlgoliaPagination',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    const nbPages = results.nbPages;\n    return {\n      nbPages,\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: nbPages > 1,\n    };\n  },\n\n  refine(props, searchState, nextPage) {\n    return refine(props, searchState, nextPage, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) - 1\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\n\n/**\n * connectPoweredBy connector provides the logic to build a widget that\n * will display a link to algolia.\n * @name connectPoweredBy\n * @kind connector\n * @providedPropType {string} url - the url to redirect to algolia\n */\nexport default createConnector({\n  displayName: 'AlgoliaPoweredBy',\n\n  getProvidedProps() {\n    const hostname =\n      typeof window === 'undefined' || typeof window.location === 'undefined'\n        ? ''\n        : window.location.hostname;\n\n    const url =\n      'https://www.algolia.com/?' +\n      'utm_source=react-instantsearch&' +\n      'utm_medium=website&' +\n      `utm_content=${hostname}&` +\n      'utm_campaign=poweredby';\n\n    return {\n      url,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\n/**\n * connectRange connector provides the logic to create connected\n * components that will give the ability for a user to refine results using\n * a numeric range.\n * @name connectRange\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in “attributes for faceting”\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * The values inside the attribute must be JavaScript numbers (not strings).\n * @propType {string} attribute - Name of the attribute for faceting\n * @propType {{min?: number, max?: number}} [defaultRefinement] - Default searchState of the widget containing the start and the end of the range.\n * @propType {number} [min] - Minimum value. When this isn't set, the minimum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [max] - Maximum value. When this isn't set, the maximum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [precision=0] - Number of digits after decimal point to use.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {number} min - the minimum value available.\n * @providedPropType {number} max - the maximum value available.\n * @providedPropType {number} precision - Number of digits after decimal point to use.\n */\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'range';\n\nfunction getCurrentRange(boundaries, stats, precision) {\n  const pow = Math.pow(10, precision);\n\n  let min;\n  if (typeof boundaries.min === 'number' && isFinite(boundaries.min)) {\n    min = boundaries.min;\n  } else if (typeof stats.min === 'number' && isFinite(stats.min)) {\n    min = stats.min;\n  } else {\n    min = undefined;\n  }\n\n  let max;\n  if (typeof boundaries.max === 'number' && isFinite(boundaries.max)) {\n    max = boundaries.max;\n  } else if (typeof stats.max === 'number' && isFinite(stats.max)) {\n    max = stats.max;\n  } else {\n    max = undefined;\n  }\n\n  return {\n    min: min !== undefined ? Math.floor(min * pow) / pow : min,\n    max: max !== undefined ? Math.ceil(max * pow) / pow : max,\n  };\n}\n\nfunction getCurrentRefinement(props, searchState, currentRange, context) {\n  const { min, max } = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    {}\n  );\n\n  const isFloatPrecision = Boolean(props.precision);\n\n  let nextMin = min;\n  if (typeof nextMin === 'string') {\n    nextMin = isFloatPrecision ? parseFloat(nextMin) : parseInt(nextMin, 10);\n  }\n\n  let nextMax = max;\n  if (typeof nextMax === 'string') {\n    nextMax = isFloatPrecision ? parseFloat(nextMax) : parseInt(nextMax, 10);\n  }\n\n  const refinement = {\n    min: nextMin,\n    max: nextMax,\n  };\n\n  const hasMinBound = props.min !== undefined;\n  const hasMaxBound = props.max !== undefined;\n\n  const hasMinRefinment = refinement.min !== undefined;\n  const hasMaxRefinment = refinement.max !== undefined;\n\n  if (hasMinBound && hasMinRefinment && refinement.min < currentRange.min) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (hasMaxBound && hasMaxRefinment && refinement.max > currentRange.max) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  if (hasMinBound && !hasMinRefinment) {\n    refinement.min = currentRange.min;\n  }\n\n  if (hasMaxBound && !hasMaxRefinment) {\n    refinement.max = currentRange.max;\n  }\n\n  return refinement;\n}\n\nfunction getCurrentRefinementWithRange(refinement, range) {\n  return {\n    min: refinement.min !== undefined ? refinement.min : range.min,\n    max: refinement.max !== undefined ? refinement.max : range.max,\n  };\n}\n\nfunction nextValueForRefinement(hasBound, isReset, range, value) {\n  let next;\n  if (!hasBound && range === value) {\n    next = undefined;\n  } else if (hasBound && isReset) {\n    next = range;\n  } else {\n    next = value;\n  }\n\n  return next;\n}\n\nfunction refine(props, searchState, nextRefinement, currentRange, context) {\n  const { min: nextMin, max: nextMax } = nextRefinement;\n  const { min: currentMinRange, max: currentMaxRange } = currentRange;\n\n  const isMinReset = nextMin === undefined || nextMin === '';\n  const isMaxReset = nextMax === undefined || nextMax === '';\n\n  const nextMinAsNumber = !isMinReset ? parseFloat(nextMin) : undefined;\n  const nextMaxAsNumber = !isMaxReset ? parseFloat(nextMax) : undefined;\n\n  const isNextMinValid = isMinReset || isFinite(nextMinAsNumber);\n  const isNextMaxValid = isMaxReset || isFinite(nextMaxAsNumber);\n\n  if (!isNextMinValid || !isNextMaxValid) {\n    throw Error(\"You can't provide non finite values to the range connector.\");\n  }\n\n  if (nextMinAsNumber < currentMinRange) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (nextMaxAsNumber > currentMaxRange) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  const id = getId(props);\n  const resetPage = true;\n  const nextValue = {\n    [id]: {\n      min: nextValueForRefinement(\n        props.min !== undefined,\n        isMinReset,\n        currentMinRange,\n        nextMinAsNumber\n      ),\n      max: nextValueForRefinement(\n        props.max !== undefined,\n        isMaxReset,\n        currentMaxRange,\n        nextMaxAsNumber\n      ),\n    },\n  };\n\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRange',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    defaultRefinement: PropTypes.shape({\n      min: PropTypes.number,\n      max: PropTypes.number,\n    }),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    precision: PropTypes.number,\n    header: PropTypes.node,\n    footer: PropTypes.node,\n  },\n\n  defaultProps: {\n    precision: 0,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, precision, min: minBound, max: maxBound } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const hasFacet = results && results.getFacetByName(attribute);\n    const stats = hasFacet ? results.getFacetStats(attribute) || {} : {};\n    const facetValues = hasFacet ? results.getFacetValues(attribute) : [];\n\n    const count = facetValues.map((v) => ({\n      value: v.name,\n      count: v.count,\n    }));\n\n    const { min: rangeMin, max: rangeMax } = getCurrentRange(\n      { min: minBound, max: maxBound },\n      stats,\n      precision\n    );\n\n    // The searchState is not always in sync with the helper state. For example\n    // when we set boundaries on the first render the searchState don't have\n    // the correct refinement. If this behavior change in the upcoming version\n    // we could store the range inside the searchState instead of rely on `this`.\n    this._currentRange = {\n      min: rangeMin,\n      max: rangeMax,\n    };\n\n    const currentRefinement = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    return {\n      min: rangeMin,\n      max: rangeMax,\n      canRefine: count.length > 0,\n      currentRefinement: getCurrentRefinementWithRange(\n        currentRefinement,\n        this._currentRange\n      ),\n      count,\n      precision,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, this._currentRange, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(params, props, searchState) {\n    const { attribute } = props;\n    const { min, max } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    params = params.addDisjunctiveFacet(attribute);\n\n    if (min !== undefined) {\n      params = params.addNumericRefinement(attribute, '>=', min);\n    }\n\n    if (max !== undefined) {\n      params = params.addNumericRefinement(attribute, '<=', max);\n    }\n\n    return params;\n  },\n\n  getMetadata(props, searchState) {\n    const { min: minRange, max: maxRange } = this._currentRange;\n    const { min: minValue, max: maxValue } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    const items = [];\n    const hasMin = minValue !== undefined;\n    const hasMax = maxValue !== undefined;\n    const shouldDisplayMinLabel = hasMin && minValue !== minRange;\n    const shouldDisplayMaxLabel = hasMax && maxValue !== maxRange;\n\n    if (shouldDisplayMinLabel || shouldDisplayMaxLabel) {\n      const fragments = [\n        hasMin ? `${minValue} <= ` : '',\n        props.attribute,\n        hasMax ? ` <= ${maxValue}` : '',\n      ];\n\n      items.push({\n        label: fragments.join(''),\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, {}, this._currentRange, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n        currentRefinement: getCurrentRefinementWithRange(\n          { min: minValue, max: maxValue },\n          { min: minRange, max: maxRange }\n        ),\n      });\n    }\n\n    return {\n      id: getId(props),\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nconst namespace = 'refinementList';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    []\n  );\n\n  if (typeof currentRefinement !== 'string') {\n    return currentRefinement;\n  }\n\n  if (currentRefinement) {\n    return [currentRefinement];\n  }\n\n  return [];\n}\n\nfunction getValue(name, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  const isAnewValue = currentRefinement.indexOf(name) === -1;\n  const nextRefinement = isAnewValue\n    ? currentRefinement.concat([name]) // cannot use .push(), it mutates\n    : currentRefinement.filter((selectedValue) => selectedValue !== name); // cannot use .splice(), it mutates\n  return nextRefinement;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  // Setting the value to an empty string ensures that it is persisted in\n  // the URL as an empty value.\n  // This is necessary in the case where `defaultRefinement` contains one\n  // item and we try to deselect it. `nextSelected` would be an empty array,\n  // which would not be persisted to the URL.\n  // {foo: ['bar']} => \"foo[0]=bar\"\n  // {foo: []} => \"\"\n  const nextValue = { [id]: nextRefinement.length > 0 ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n/**\n * connectRefinementList connector provides the logic to build a widget that will\n * give the user the ability to choose multiple values for a specific facet.\n * @name connectRefinementList\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [searchable=false] - allow search inside values\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of displayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string[]} defaultRefinement - the values of the items selected by default. The searchState of this widget takes the form of a list of `string`s, which correspond to the values of all selected refinements. However, when there are no refinements selected, the value of the searchState is an empty string.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the RefinementList can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n * @providedPropType {boolean} canRefine - a boolean that says whether you can refine\n */\n\nconst sortBy = ['isRefined', 'count:desc', 'name:asc'];\nexport default createConnector({\n  displayName: 'AlgoliaRefinementList',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    operator: PropTypes.oneOf(['and', 'or']),\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n    searchable: PropTypes.bool,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    operator: 'or',\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    metadata,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine,\n        isFromSearch,\n        searchable,\n      };\n    }\n\n    const items = isFromSearch\n      ? searchForFacetValuesResults[attribute].map((v) => ({\n          label: v.value,\n          value: getValue(v.value, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          _highlightResult: { label: { value: v.highlighted } },\n          count: v.count,\n          isRefined: v.isRefined,\n        }))\n      : results\n          .getFacetValues(attribute, { sortBy, facetOrdering })\n          .map((v) => ({\n            label: v.name,\n            value: getValue(v.name, props, searchState, {\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            }),\n            count: v.count,\n            isRefined: v.isRefined,\n          }));\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, operator } = props;\n\n    const addKey = operator === 'and' ? 'addFacet' : 'addDisjunctiveFacet';\n    const addRefinementKey = `${addKey}Refinement`;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters[addKey](attribute);\n\n    return getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    }).reduce(\n      (res, val) => res[addRefinementKey](attribute, val),\n      searchParameters\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    return {\n      id,\n      index: getIndexId(context),\n      items:\n        getCurrentRefinement(props, searchState, context).length > 0\n          ? [\n              {\n                attribute: props.attribute,\n                label: `${props.attribute}: `,\n                currentRefinement: getCurrentRefinement(\n                  props,\n                  searchState,\n                  context\n                ),\n                value: (nextState) => refine(props, nextState, [], context),\n                items: getCurrentRefinement(props, searchState, context).map(\n                  (item) => ({\n                    label: `${item}`,\n                    value: (nextState) => {\n                      const nextSelectedItems = getCurrentRefinement(\n                        props,\n                        nextState,\n                        context\n                      ).filter((other) => other !== item);\n                      return refine(\n                        props,\n                        searchState,\n                        nextSelectedItems,\n                        context\n                      );\n                    },\n                  })\n                ),\n              },\n            ]\n          : [],\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  hasMultipleIndices,\n  getIndexId,\n} from '../core/indexUtils';\nimport { shallowEqual, omit } from '../core/utils';\n\n/**\n * connectScrollTo connector provides the logic to build a widget that will\n * let the page scroll to a certain point.\n * @name connectScrollTo\n * @kind connector\n * @propType {string} [scrollOn=\"page\"] - Widget searchState key on which to listen for changes, default to the pagination widget.\n * @providedPropType {any} value - the current refinement applied to the widget listened by scrollTo\n * @providedPropType {boolean} hasNotChanged - indicates whether the refinement came from the scrollOn argument (for instance page by default)\n */\nexport default createConnector({\n  displayName: 'AlgoliaScrollTo',\n\n  propTypes: {\n    scrollOn: PropTypes.string,\n  },\n\n  defaultProps: {\n    scrollOn: 'page',\n  },\n\n  getProvidedProps(props, searchState) {\n    const id = props.scrollOn;\n    const value = getCurrentRefinementValue(\n      props,\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      id,\n      null\n    );\n\n    if (!this._prevSearchState) {\n      this._prevSearchState = {};\n    }\n\n    // Get the subpart of the state that interest us\n    if (\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    ) {\n      searchState = searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : {};\n    }\n\n    // if there is a change in the app that has been triggered by another element\n    // than \"props.scrollOn (id) or the Configure widget, we need to keep track of\n    // the search state to know if there's a change in the app that was not triggered\n    // by the props.scrollOn (id) or the Configure widget. This is useful when\n    // using ScrollTo in combination of Pagination. As pagination can be change\n    // by every widget, we want to scroll only if it cames from the pagination\n    // widget itself. We also remove the configure key from the search state to\n    // do this comparison because for now configure values are not present in the\n    // search state before a first refinement has been made and will false the results.\n    // See: https://github.com/algolia/react-instantsearch/issues/164\n    const cleanedSearchState = omit(searchState, ['configure', id]);\n\n    const hasNotChanged = shallowEqual(\n      this._prevSearchState,\n      cleanedSearchState\n    );\n\n    this._prevSearchState = cleanedSearchState;\n\n    return { value, hasNotChanged };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'relevancyStrictness';\n}\n\nfunction getCurrentRefinement(\n  props: ConnectedProps<any>,\n  searchState,\n  context\n) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id\n  );\n\n  return currentRefinement;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRelevantSort',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        isVirtualReplica: false,\n        isRelevantSorted: false,\n      };\n    }\n\n    return {\n      isVirtualReplica: results.appliedRelevancyStrictness !== undefined,\n      isRelevantSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameter(\n      'relevancyStrictness',\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const nextValue = {\n      [getId()]: nextRefinement,\n    };\n    const resetPage = true;\n\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return null;\n}\n\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * The `connectStateResults` connector provides a way to access the `searchState` and the `searchResults`\n * of InstantSearch.\n * For instance this connector allows you to create results/noResults or query/noQuery pages.\n * @name connectStateResults\n * @kind connector\n * @providedPropType {object} searchState - The search state of the instant search component. <br/><br/> See: [Search state structure](https://community.algolia.com/react-instantsearch/guide/Search_state.html)\n * @providedPropType {object} searchResults - The search results. <br/><br/> In case of multiple indices: if used under `<Index>`, results will be those of the corresponding index otherwise it'll be those of the root index  See: [Search results structure](https://community.algolia.com/algoliasearch-helper-js/reference.html#searchresults)\n * @providedPropType {object} allSearchResults - In case of multiple indices you can retrieve all the results\n * @providedPropType {string} error - If the search failed, the error will be logged here.\n * @providedPropType {boolean} searching - If there is a search in progress.\n * @providedPropType {boolean} isSearchStalled - Flag that indicates if React InstantSearch has detected that searches are stalled.\n * @providedPropType {boolean} searchingForFacetValues - If there is a search in a list in progress.\n * @providedPropType {object} props - component props.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectStateResults } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const Content = connectStateResults(({ searchState, searchResults }) => {\n *   const hasResults = searchResults && searchResults.nbHits !== 0;\n *\n *    return (\n *      <div>\n *        <div hidden={!hasResults}>\n *          <Hits />\n *        </div>\n *        <div hidden={hasResults}>\n *          <div>No results has been found for {searchState.query}</div>\n *        </div>\n *      </div>\n *    );\n * });\n *\n * const App = () => (\n *   <InstantSearch\n *      searchClient={searchClient}\n *      indexName=\"instant_search\"\n *    >\n *      <SearchBox />\n *      <Content />\n *    </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaStateResults',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    return {\n      searchState,\n      searchResults: results,\n      allSearchResults: searchResults.results,\n      searching: searchResults.searching,\n      isSearchStalled: searchResults.isSearchStalled,\n      error: searchResults.error,\n      searchingForFacetValues: searchResults.searchingForFacetValues,\n      props,\n    };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * connectStats connector provides the logic to build a widget that will\n *  displays algolia search statistics (hits number and processing time).\n * @name connectStats\n * @kind connector\n * @providedPropType {number} nbHits - number of hits returned by Algolia.\n * @providedPropType {number} nbSortedHits - number of sorted hits returned by Algolia.\n * @providedPropType {number} processingTimeMS - the time in ms took by Algolia to search for results.\n */\nexport default createConnector({\n  displayName: 'AlgoliaStats',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    return {\n      areHitsSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0 &&\n        results.nbHits !== results.nbSortedHits,\n      nbHits: results.nbHits,\n      nbSortedHits: results.nbSortedHits,\n      processingTimeMS: results.processingTimeMS,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport { find } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  getResults,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'toggle';\n\nconst falsyStrings = ['0', 'false', 'null', 'undefined'];\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    false\n  );\n\n  if (falsyStrings.indexOf(currentRefinement) !== -1) {\n    return false;\n  }\n\n  return Boolean(currentRefinement);\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : false };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectToggleRefinement connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggleRefinement\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attribute - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attribute`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n * @providedPropType {object} count - an object that contains the count for `checked` and `unchecked` state\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n */\nexport default createConnector({\n  displayName: 'AlgoliaToggle',\n\n  propTypes: {\n    label: PropTypes.string.isRequired,\n    attribute: PropTypes.string.isRequired,\n    value: PropTypes.any.isRequired,\n    filter: PropTypes.func,\n    defaultRefinement: PropTypes.bool,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, value } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const allFacetValues =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetValues(attribute)\n        : null;\n\n    const facetValue =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? find(allFacetValues, (item) => item.name === value.toString())\n        : null;\n\n    const facetValueCount = facetValue && facetValue.count;\n    const allFacetValuesCount =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? allFacetValues.reduce((acc, item) => acc + item.count, 0)\n        : null;\n\n    const canRefine = currentRefinement\n      ? allFacetValuesCount !== null && allFacetValuesCount > 0\n      : facetValueCount !== null && facetValueCount > 0;\n\n    const count = {\n      checked: allFacetValuesCount,\n      unchecked: facetValueCount,\n    };\n\n    return {\n      currentRefinement,\n      canRefine,\n      count,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, value, filter } = props;\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    let nextSearchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (checked) {\n      nextSearchParameters = nextSearchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        value\n      );\n\n      if (filter) {\n        nextSearchParameters = filter(nextSearchParameters);\n      }\n    }\n\n    return nextSearchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, false, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\ntype Results = { index: string };\ntype Hit = { objectID: string; __position: number; __queryID: string };\n\ntype InsightsClient = (\n  method: InsightsClientMethod,\n  payload: InsightsClientPayload\n) => void;\n\ntype InsightsClientMethod =\n  | 'clickedObjectIDsAfterSearch'\n  | 'convertedObjectIDsAfterSearch';\n\ntype InsightsClientPayload = {\n  index: string;\n  queryID: string;\n  eventName: string;\n  objectIDs: string[];\n  positions?: number[];\n};\n\nfunction inferPayload({\n  method,\n  results,\n  currentHit,\n}: {\n  method: InsightsClientMethod;\n  results: Results;\n  currentHit: Hit;\n}): Omit<InsightsClientPayload, 'eventName'> {\n  const { index } = results;\n  const queryID = currentHit.__queryID;\n  const objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(`Could not infer \\`queryID\\`. Ensure \\`clickAnalytics: true\\` was added with the Configure widget.\nSee: https://alg.li/VpPpLt`);\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch': {\n      const positions = [currentHit.__position];\n      return { index, queryID, objectIDs, positions };\n    }\n\n    case 'convertedObjectIDsAfterSearch':\n      return { index, queryID, objectIDs };\n\n    default:\n      throw new Error(\n        `Unsupported method \"${method}\" passed to the insights function. The supported methods are: \"clickedObjectIDsAfterSearch\", \"convertedObjectIDsAfterSearch\".`\n      );\n  }\n}\n\nconst wrapInsightsClient =\n  (aa: InsightsClient, results: Results, currentHit: Hit) =>\n  (method: InsightsClientMethod, payload: Partial<InsightsClientPayload>) => {\n    if (typeof aa !== 'function') {\n      throw new TypeError(`Expected insightsClient to be a Function`);\n    }\n    const inferredPayload = inferPayload({ method, results, currentHit });\n    aa(method, { ...inferredPayload, ...payload } as any);\n  };\n\nexport default (insightsClient: InsightsClient) =>\n  createConnector({\n    displayName: 'AlgoliaInsights',\n\n    getProvidedProps(props, _, searchResults) {\n      const results: Results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      });\n\n      const insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return { insights };\n    },\n  });\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getAdditionalId() {\n  return 'additionalVoiceParameters';\n}\n\nfunction getCurrentRefinementQuery(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getCurrentRefinementAdditional(props, searchState, context) {\n  const id = getAdditionalId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return {};\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const voiceParams = getAdditionalId();\n  const queryLanguages = props.language\n    ? { queryLanguages: [props.language.split('-')[0]] }\n    : {};\n  const additionalQueryParameters =\n    typeof props.additionalQueryParameters === 'function'\n      ? {\n          ignorePlurals: true,\n          removeStopWords: true,\n          optionalWords: nextRefinement,\n          ...props.additionalQueryParameters({ query: nextRefinement }),\n        }\n      : {};\n  const nextValue = {\n    [id]: nextRefinement,\n    [voiceParams]: {\n      ...queryLanguages,\n      ...additionalQueryParameters,\n    },\n  };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  const interimState = cleanUpValue(searchState, context, getId());\n  return cleanUpValue(interimState, context, getAdditionalId());\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaVoiceSearch',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinementQuery(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const query = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const additionalParams = getCurrentRefinementAdditional(\n      props,\n      searchState,\n      {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }\n    );\n\n    return searchParameters\n      .setQuery(query)\n      .setQueryParameters(additionalParams);\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId();\n    const currentRefinement = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","// Core\nexport { default as createConnector } from './core/createConnector';\nexport {\n  instantSearchContext,\n  InstantSearchConsumer,\n  InstantSearchProvider,\n} from './core/context';\n\n// Utils\nexport { HIGHLIGHT_TAGS } from './core/highlight';\nexport { default as version } from './core/version';\nexport { default as translatable } from './core/translatable';\n\n// Widgets\nexport { default as Configure } from './widgets/Configure';\nexport { default as ExperimentalConfigureRelatedItems } from './widgets/ConfigureRelatedItems';\n\nimport { default as DynamicWidgets } from './widgets/DynamicWidgets';\n/** @deprecated use DynamicWidgets */\nconst ExperimentalDynamicWidgets = DynamicWidgets;\nexport { ExperimentalDynamicWidgets, DynamicWidgets };\n\nexport { default as QueryRuleContext } from './widgets/QueryRuleContext';\nexport { default as Index } from './widgets/Index';\nexport { default as InstantSearch } from './widgets/InstantSearch';\n\n// Connectors\nexport { default as connectAutoComplete } from './connectors/connectAutoComplete';\nexport { default as connectBreadcrumb } from './connectors/connectBreadcrumb';\nexport { default as connectConfigure } from './connectors/connectConfigure';\nexport { default as EXPERIMENTAL_connectConfigureRelatedItems } from './connectors/connectConfigureRelatedItems';\nexport { default as connectCurrentRefinements } from './connectors/connectCurrentRefinements';\n\nimport { default as connectDynamicWidgets } from './connectors/connectDynamicWidgets';\n/** @deprecated use connectDynamicWidgets */\nconst EXPERIMENTAL_connectDynamicWidgets = connectDynamicWidgets;\nexport { connectDynamicWidgets, EXPERIMENTAL_connectDynamicWidgets };\n\nexport { default as connectGeoSearch } from './connectors/connectGeoSearch';\nexport { default as connectHierarchicalMenu } from './connectors/connectHierarchicalMenu';\nexport { default as connectHighlight } from './connectors/connectHighlight';\nexport { default as connectHits } from './connectors/connectHits';\nexport { default as connectHitsPerPage } from './connectors/connectHitsPerPage';\nexport { default as connectInfiniteHits } from './connectors/connectInfiniteHits';\nexport { default as connectMenu } from './connectors/connectMenu';\nexport { default as connectNumericMenu } from './connectors/connectNumericMenu';\nexport { default as connectPagination } from './connectors/connectPagination';\nexport { default as connectPoweredBy } from './connectors/connectPoweredBy';\nexport { default as connectQueryRules } from './connectors/connectQueryRules';\nexport { default as connectRange } from './connectors/connectRange';\nexport { default as connectRefinementList } from './connectors/connectRefinementList';\nexport { default as connectScrollTo } from './connectors/connectScrollTo';\nexport { default as connectSearchBox } from './connectors/connectSearchBox';\nexport { default as connectRelevantSort } from './connectors/connectRelevantSort';\nexport { default as connectSortBy } from './connectors/connectSortBy';\nexport { default as connectStateResults } from './connectors/connectStateResults';\nexport { default as connectStats } from './connectors/connectStats';\nexport { default as connectToggleRefinement } from './connectors/connectToggleRefinement';\nexport { default as connectHitInsights } from './connectors/connectHitInsights';\nexport { default as connectVoiceSearch } from './connectors/connectVoiceSearch';\n\n// Types\nexport * from './types';\n","import React, { Component } from 'react';\n\nconst withKeysPropType = (keys) => (props, propName, componentName) => {\n  const prop = props[propName];\n  if (prop) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(prop)) {\n      if (keys.indexOf(key) === -1) {\n        return new Error(\n          `Unknown \\`${propName}\\` key \\`${key}\\`. Check the render method ` +\n            `of \\`${componentName}\\`.`\n        );\n      }\n    }\n  }\n  return undefined;\n};\n\nexport default function translatable(defaultTranslations) {\n  return (Composed) => {\n    class Translatable extends Component {\n      translate = (key, ...params) => {\n        const { translations } = this.props;\n\n        const translation =\n          translations && translations.hasOwnProperty(key)\n            ? translations[key]\n            : defaultTranslations[key];\n\n        if (typeof translation === 'function') {\n          return translation(...params);\n        }\n\n        return translation;\n      };\n\n      render() {\n        return <Composed translate={this.translate} {...this.props} />;\n      }\n    }\n\n    const name = Composed.displayName || Composed.name || 'UnknownComponent';\n\n    Translatable.displayName = `Translatable(${name})`;\n\n    Translatable.propTypes = {\n      translations: withKeysPropType(Object.keys(defaultTranslations)),\n    };\n\n    return Translatable;\n  };\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","value","_typeof","obj","Symbol","iterator","_possibleConstructorReturn","assertThisInitialized","_getPrototypeOf","getPrototypeOf","_defineProperty","hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","a","b","equal","it","Array","isArray","size","entries","next","done","has","get","isView","RegExp","flags","valueOf","toString","$$typeof","error","message","match","console","warn","shallowEqual","objA","objB","keysA","keysB","hasOwn","getDisplayName","Component","displayName","name","resolved","Promise","resolve","defer","f","then","removeEmptyKey","forEach","objectHasKeys","addAbsolutePositions","hits","hitsPerPage","page","map","hit","index","__position","addQueryID","queryID","__queryID","find","array","comparator","object","omit","getPropertyByPath","path","replace","split","reduce","current","undefined","instantSearchContext","createContext","onInternalStateUpdate","createHrefForState","onSearchForFacetValues","onSearchStateChange","onSearchParameters","store","widgetsManager","mainTargetedIndex","InstantSearchConsumer","Consumer","InstantSearchProvider","Provider","IndexConsumer","IndexProvider","createConnectorWithContext","connectorDesc","Composed","Connector","Error","isWidget","getSearchParameters","getMetadata","transitionState","providedProps","_this","getProvidedProps","args","contextValue","refine","getState","widgets","searchForFacetValues","bind","ais","multiIndexContext","indexContextValue","unsubscribe","subscribe","_this2","isUnmounting","setState","unregisterWidget","registerWidget","nextProps","nextState","shouldComponentUpdate","state","propsEqual","prevProps","isEqual","update","cleanUp","results","resultsFacetValues","searching","searchingForFacetValues","isSearchStalled","metadata","searchResults","searchParameters","nextWidgetsState","prevWidgetsState","refineProps","createURL","searchForFacetValuesProps","searchForItems","React","defaultProps","createConnectorWithoutContext","HIGHLIGHT_TAGS","highlightPreTag","highlightPostTag","parseHighlightedAttribute","preTag","postTag","highlightedValue","splitByPreTag","firstValue","shift","elements","isHighlighted","push","splitByPostTag","getIndexId","context","hasMultipleIndices","targetedIndex","getResults","indexId","refineValue","searchState","nextRefinement","resetPage","namespace","indices","getNamespaceAndAttributeName","id","parts","attributeName","getCurrentRefinementValue","defaultValue","multiIndex","defaultRefinement","cleanUpValue","Boolean","attribute","indexSearchState","cleanUpValueWithMultiIndex","cleanUpValueWithSingleIndex","createConnector","children","items","setQueryParameters","prevSearchState","nextSearchState","propKeys","nonPresentKeys","_props","filter","prop","subState","configureState","acc","item","connectConfigure","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","arrayLikeToArray","n","slice","from","test","_toConsumableArray","arrayWithoutHoles","iter","iterableToArray","unsupportedIterableToArray","nonIterableSpread","isObjectOrArrayOrFunction","_merge","sourceVal","targetVal","l","reduceRight","arr1","valToNumber","v","parseFloat","userToken","lib","addRefinement","refinementList","isRefined","valueAsString","facetRefinement","concat","mod","defaultsPure","removeRefinement","clearRefinement","toggleRefinement","refinementType","hasChanged","newRefinementList","memo","values","facetList","refinementValue","containsRefinements","refinementValueAsString","isEqualNumericRefinement","every","el","SearchParameters","newParameters","params","_parseNumbers","isValidUserToken","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","paramName","isKeyKnown","PARAMETERS","isValueDefined","partialState","numbers","k","parsedValue","isNaN","insideBoundingBox","geoRect","operators","operator","parsedValues","vPrime","merge","make","facet","rootPath","currentRefinement","getHierarchicalRefinement","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","numericFilters","patch","_clearNumericRefinements","RefinementList","clearTags","setIndex","setQuery","newQuery","query","setPage","newPage","setFacets","setDisjunctiveFacets","setHitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","isNumericRefined","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","paramValue","op","val","getNumericRefinements","getNumericRefinement","newNumericRefinements","operatorList","outValues","addFacet","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","lastIndexOf","addHierarchicalFacetRefinement","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","searchedValue","isAttributeValueDefined","currentValue","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","intersection","getRefinedHierarchicalFacets","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","parameter","nextWithNumbers","previousPlainObject","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","part","trim","JSON","stringify","compareAscending","other","valIsDefined","valIsNull","othIsDefined","othIsNull","collection","iteratees","orders","result","criteria","iteratee","sort","res","defaults","defaultInstructions","out","sortInstruction","matchingDefault","defaultInstruction","hierarchicalFacetResult","hierarchicalFacetIndex","hierarchicalSeparator","hierarchicalRootPath","hierarchicalShowParentLevel","hierarchicalFacetRefinement","prepareHierarchicalFacetSortBy","rootExhaustive","facetResult","exhaustive","generateTreeFn","hierarchicalTree","currentHierarchicalLevel","parent","level","data","subtree","picked","facetValue","tuple","parentPath","orderBy","facetCount","count","getIndices","attributes","idx","assignFacetStats","dest","facetStats","stats","SearchResults","mainSubResponse","_rawResults","processingTimeMS","sum","facetsIndices","disjunctiveFacetsIndices","nextDisjunctiveResult","mainFacets","facetKey","hierarchicalAttributeName","facetValueObject","facetIndex","idxAttributeName","findIndex","exhaustiveFacetsCount","position","isFacetDisjunctive","isFacetConjunctive","facets_stats","compact","disjunctiveFacet","dfacet","facetResults","attributeIndex","dataFromMainRequest","refinedFacet","defaultData","root","excludes","generateHierarchicalTree","_state","getFacetStatsIfAvailable","getRefinement","type","resultsFacets","getFacetByName","predicate","DEFAULT_SORT","getFacetValues","opts","facetValues","isExcluded","extractNormalizedFacetValues","options","facetOrdering","recSort","sortFn","node","names","childNode","sortedChildren","renderingContent","orderedFacets","remainingFacets","reverseOrder","order","ordering","sortRemainingBy","sortViaFacetOrdering","formatSort","getFacetStats","getRefinements","facetDeclaration","rootFacet","intermediateFacet","newFacet","numericValue","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","emit","er","handler","listeners","err","on","addListener","listener","m","newListener","warned","trace","once","fired","g","removeListener","list","splice","removeAllListeners","listenerCount","evlistener","emitter","ctor","superCtor","DerivedHelper","mainHelper","fn","main","lastResults","detach","detachDerivedHelper","getModifiedState","requestBuilder","_getQueries","queries","indexName","_getHitsSearchParams","_getDisjunctiveFacetSearchParams","_getHitsHierarchicalFacetsAttributes","facetFilters","_getFacetFilters","_getNumericFilters","_getTagFilters","additionalParams","hierarchicalRootLevel","attributesToRetrieve","attributesToHighlight","attributesToSnippet","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","vs","join","orFilters","attributeToRefine","attributesIndex","allAttributes","hierarchicalRefinement","newAttributes","rootLevel","parentLevel","getSearchForFacetQuery","maxFacetHits","stateForSearchForFacetValues","searchForFacetSearchParameters","facetQuery","AlgoliaSearchHelper","client","addAlgoliaAgent","setClient","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","setCurrentPage","_change","isPageReset","getCurrentPage","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","searchOnce","cb","tempState","content","_originalResponse","e","catch","findAnswers","derivedHelper","derivedState","attributesForPrediction","nbHits","errorMessage","initIndex","queryLanguages","userState","clientHasSFFV","isDisjunctive","algoliaQuery","facetHits","q","addDisjunctiveRefine","addRefine","addFacetExclusion","addExclude","addTag","removeDisjunctiveRefine","removeRefine","removeFacetExclusion","removeExclude","removeTag","toggleFacetExclusion","toggleExclude","toggleRefine","toggleTag","nextPage","previousPage","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","isDisjunctiveRefined","hasTag","hasTagRefinements","getIndex","getPage","getTags","r","states","mainQueries","queriesCount","helper","derivedQueries","derivedStateQueries","queryId","_dispatchAlgoliaResponse","_dispatchAlgoliaError","s","specificResults","formattedResponse","containsRefinement","_hasDisjunctiveRefinements","disjunctiveRefinements","event","clearCache","newClient","getClient","derive","pos","hasPendingRequests","algoliasearchHelper","version","require$$0","createOptionalFilter","attributeValue","attributeScore","getSearchParametersFromProps","optionalFilters","matchingPatterns","attributePattern","score","attributeSubValue","transformSearchParameters","sumOrFiltersScores","objectID","x","_prevSearchState","searchParametersKeys","_searchParameters","global","window","setTimeout","clearTimeout","performance","now","mozNow","msNow","oNow","webkitNow","for","c","d","h","w","y","z","u","A","module","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","ReactPropTypes","isRequired","bigint","bool","func","number","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$2","ConfigureRelatedItems","propTypes","connectConfigureRelatedItems","transformItems","maxValuesPerFacet","_searchState","attributesToRender","facetOrder","curr","Math","max","connectDynamicWidgets","fallbackComponent","Fallback","Children","child","getAttribute","component","only","set","Fragment","widgetKey","widgetState","rangeKey","getWidgetRefinements","transformRuleContexts","ruleContexts","trackedFilters","_1","canRefine","userData","transformedItems","newRuleContexts","facetRefinements","trackedFacetValues","getTrackedFacetValues","includes","initialRuleContexts","nextRuleContexts","connectQueryRules","getIndexContext","Index","indexContext","addAlgoliaAgents","searchClient","ReactVersion","isMultiIndexContext","widget","isTargetedIndexEqualIndex","isIndexWidget","isIndexWidgetEqualIndex","sortIndexWidgetsFirst","firstWidget","secondWidget","isFirstWidgetIndex","isSecondWidgetIndex","serializeQueryParameters","format","encodeURIComponent","encode","createInstantSearchManager","initialState","resultsState","stalledSearchDelay","stalledSearchTimer","handleSearchSuccess","handleSearchError","skip","initialSearchParameters","onWidgetsUpdate","scheduled","scheduleUpdate","getWidgets","createWidgetsManager","transporter","_cacheHydrated","_useCache","baseMethod","requests","methodArgs","requestsWithSerializedParams","request","responsesCache","method","rawResults","cache","hydrateSearchClientWithMultiIndexRequest","hydrateSearchClientWithSingleIndexRequest","hydrateSearchClient","datum","nestedItem","_internalIndexId","hydrateResultsState","sharedParameters","mainParameters","targetedIndexEqualMainIndex","subIndexEqualMainIndex","derivedIndices","targetedIndexNotEqualMainIndex","subIndexNotEqualMainIndex","derivedParameters","isDerivedHelpersEmpty","nextIsSearchStalled","getWidgetsIds","meta","maxFacetHitsWithinRange","min","onExternalStateUpdate","updateClient","updateIndex","newIndex","skipSearch","injectMetadata","payloadContainer","document","createElement","refNode","querySelector","internalProps","widgetsPayload","payload","_connectorDesc","ua","userAgent","_ua","appendChild","isControlled","InstantSearch","instantSearchManager","onWidgetsInternalStateUpdate","prevIsControlled","refresh","navigator","getKnownKeys","widgetsCollector","prevState","nextIsControlled","previousSearchState","getCurrentRefinement","getId","some","transformValue","label","clearsQuery","clear","currentRefinementToString","northEast","lat","lng","southWest","latLngRegExp","stringToPosition","pattern","nextValue","currentRefinementFromSearchState","currentRefinementFromSearchParameters","currentPositionFromSearchState","propsWithoutDefaultRefinement","aroundLatLng","configureAroundLatLng","getCurrentPosition","currentPositionFromSearchParameters","_","_geoloc","isRefinedWithMap","showMore","limit","showMoreLimit","itemsLimit","truncate","rootAttribute","highlight","highlightProperty","highlightObject","parseAlgoliaHit","parseInt","getStateWithoutPage","hasPrevious","hasMore","refinePrevious","refineNext","cachedHits","cachedState","nbPages","_cache","read","write","hitsWithPositionsAndQueryID","firstReceivedPage","Number","lastReceivedPage","getValue","getLimit","defaultSortBy","searchable","searchForFacetValuesResults","isFromSearch","_highlightResult","highlighted","_slicedToArray","arrayWithHoles","_i","_s","_e","_arr","_n","_d","iterableToArrayLimit","nonIterableRest","stringifyItem","start","end","range","noRefinement","NEGATIVE_INFINITY","POSITIVE_INFINITY","refinedItem","startStr","endStr","parseItem","hostname","url","currentRange","isFloatPrecision","precision","nextMin","nextMax","hasMinBound","hasMaxBound","hasMinRefinment","hasMaxRefinment","getCurrentRefinementWithRange","nextValueForRefinement","hasBound","isReset","currentMinRange","currentMaxRange","isMinReset","isMaxReset","nextMinAsNumber","nextMaxAsNumber","isNextMinValid","isFinite","isNextMaxValid","header","footer","boundaries","pow","minBound","maxBound","hasFacet","floor","ceil","rangeMin","rangeMax","_currentRange","minRange","maxRange","minValue","maxValue","hasMin","hasMax","fragments","selectedValue","addKey","addRefinementKey","nextSelectedItems","scrollOn","cleanedSearchState","hasNotChanged","isVirtualReplica","appliedRelevancyStrictness","isRelevantSorted","selectedIndex","allSearchResults","areHitsSorted","nbSortedHits","falsyStrings","allFacetValues","facetValueCount","allFacetValuesCount","checked","unchecked","nextSearchParameters","wrapInsightsClient","aa","currentHit","inferredPayload","objectIDs","positions","inferPayload","getCurrentRefinementQuery","language","additionalQueryParameters","ignorePlurals","removeStopWords","optionalWords","ExperimentalDynamicWidgets","DynamicWidgets","EXPERIMENTAL_connectDynamicWidgets","inferredIndexId","insightsClient","insights","defaultTranslations","Translatable","translations","translation","translate"],"mappings":"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"}